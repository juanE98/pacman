
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  0000252a  000025be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000252a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  0080017e  0080017e  0000263c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036da  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b3  00000000  00000000  000060e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bfb  00000000  00000000  00007495  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  00009090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fff  00000000  00000000  00009a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ba4  00000000  00000000  0000aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0000d61f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 03 	jmp	0x692	; 0x692 <__ctors_end>
       4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      10:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_5>
      18:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      20:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      28:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      30:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      3c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      40:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_16>
      44:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      50:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_20>
      54:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__vector_21>
      58:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      5c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      60:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      68:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      6c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      70:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      74:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      78:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      7c:	12 06       	cpc	r1, r18
      7e:	21 06       	cpc	r2, r17
      80:	21 06       	cpc	r2, r17
      82:	21 06       	cpc	r2, r17
      84:	21 06       	cpc	r2, r17
      86:	21 06       	cpc	r2, r17
      88:	21 06       	cpc	r2, r17
      8a:	21 06       	cpc	r2, r17
      8c:	21 06       	cpc	r2, r17
      8e:	21 06       	cpc	r2, r17
      90:	21 06       	cpc	r2, r17
      92:	07 06       	cpc	r0, r23
      94:	21 06       	cpc	r2, r17
      96:	8f 05       	cpc	r24, r15
      98:	1c 06       	cpc	r1, r28
      9a:	21 06       	cpc	r2, r17
      9c:	21 06       	cpc	r2, r17
      9e:	21 06       	cpc	r2, r17
      a0:	21 06       	cpc	r2, r17
      a2:	21 06       	cpc	r2, r17
      a4:	21 06       	cpc	r2, r17
      a6:	21 06       	cpc	r2, r17
      a8:	21 06       	cpc	r2, r17
      aa:	b0 05       	cpc	r27, r0
      ac:	21 06       	cpc	r2, r17
      ae:	21 06       	cpc	r2, r17
      b0:	21 06       	cpc	r2, r17
      b2:	21 06       	cpc	r2, r17
      b4:	e0 05       	cpc	r30, r0
      b6:	21 06       	cpc	r2, r17
      b8:	d3 05       	cpc	r29, r3
      ba:	21 06       	cpc	r2, r17
      bc:	21 06       	cpc	r2, r17
      be:	21 06       	cpc	r2, r17
      c0:	21 06       	cpc	r2, r17
      c2:	21 06       	cpc	r2, r17
      c4:	21 06       	cpc	r2, r17
      c6:	21 06       	cpc	r2, r17
      c8:	a5 05       	cpc	r26, r5
      ca:	21 06       	cpc	r2, r17
      cc:	21 06       	cpc	r2, r17
      ce:	21 06       	cpc	r2, r17
      d0:	c6 05       	cpc	r28, r6
      d2:	21 06       	cpc	r2, r17
      d4:	bb 05       	cpc	r27, r11
      d6:	21 06       	cpc	r2, r17
      d8:	21 06       	cpc	r2, r17
      da:	21 06       	cpc	r2, r17
      dc:	17 06       	cpc	r1, r23
      de:	21 06       	cpc	r2, r17
      e0:	21 06       	cpc	r2, r17
      e2:	21 06       	cpc	r2, r17
      e4:	21 06       	cpc	r2, r17
      e6:	21 06       	cpc	r2, r17
      e8:	21 06       	cpc	r2, r17
      ea:	21 06       	cpc	r2, r17
      ec:	21 06       	cpc	r2, r17
      ee:	21 06       	cpc	r2, r17
      f0:	21 06       	cpc	r2, r17
      f2:	21 06       	cpc	r2, r17
      f4:	21 06       	cpc	r2, r17
      f6:	21 06       	cpc	r2, r17
      f8:	ed 05       	cpc	r30, r13
      fa:	21 06       	cpc	r2, r17
      fc:	21 06       	cpc	r2, r17
      fe:	21 06       	cpc	r2, r17
     100:	21 06       	cpc	r2, r17
     102:	21 06       	cpc	r2, r17
     104:	21 06       	cpc	r2, r17
     106:	21 06       	cpc	r2, r17
     108:	21 06       	cpc	r2, r17
     10a:	21 06       	cpc	r2, r17
     10c:	21 06       	cpc	r2, r17
     10e:	21 06       	cpc	r2, r17
     110:	21 06       	cpc	r2, r17
     112:	21 06       	cpc	r2, r17
     114:	21 06       	cpc	r2, r17
     116:	21 06       	cpc	r2, r17
     118:	21 06       	cpc	r2, r17
     11a:	21 06       	cpc	r2, r17
     11c:	21 06       	cpc	r2, r17
     11e:	21 06       	cpc	r2, r17
     120:	21 06       	cpc	r2, r17
     122:	21 06       	cpc	r2, r17
     124:	21 06       	cpc	r2, r17
     126:	21 06       	cpc	r2, r17
     128:	fa 05       	cpc	r31, r10
     12a:	21 06       	cpc	r2, r17
     12c:	21 06       	cpc	r2, r17
     12e:	21 06       	cpc	r2, r17
     130:	21 06       	cpc	r2, r17
     132:	21 06       	cpc	r2, r17
     134:	9a 05       	cpc	r25, r10

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2299>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2297>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2289>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2287>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2262>:
     550:	53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a 20     Student Number: 
     560:	34 34 33 31 37 39 36 32 00                          44317962.

00000569 <__c.2260>:
     569:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
     579:	20 62 79 20 3c 4a 75 61 6e 20 45 73 70 61 72 65      by <Juan Espare
     589:	73 3e 00                                            s>.

0000058c <__c.2258>:
     58c:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000594 <numbers>:
     594:	ff 05 fc 05 f8 05 f4 05 f0 05 ec 05 e8 05 e4 05     ................
     5a4:	e0 05 dc 05                                         ....

000005a8 <letters>:
     5a8:	6e 06 6a 06 66 06 62 06 5e 06 5a 06 56 06 52 06     n.j.f.b.^.Z.V.R.
     5b8:	4f 06 4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06     O.K.G.C.>.:.6.2.
     5c8:	2d 06 29 06 25 06 20 06 1c 06 17 06 12 06 0d 06     -.).%. .........
     5d8:	08 06 03 06                                         ....

000005dc <cols_9>:
     5dc:	64 92 92 7d                                         d..}

000005e0 <cols_8>:
     5e0:	6c 92 92 6d                                         l..m

000005e4 <cols_7>:
     5e4:	80 9e a0 c1                                         ....

000005e8 <cols_6>:
     5e8:	7c 92 92 4d                                         |..M

000005ec <cols_5>:
     5ec:	e4 a2 a2 9d                                         ....

000005f0 <cols_4>:
     5f0:	18 28 48 ff                                         .(H.

000005f4 <cols_3>:
     5f4:	44 92 92 6d                                         D..m

000005f8 <cols_2>:
     5f8:	46 8a 92 63                                         F..c

000005fc <cols_1>:
     5fc:	42 fe 03                                            B..

000005ff <cols_0>:
     5ff:	7c 92 a2 7d                                         |..}

00000603 <cols_Z>:
     603:	86 8a 92 a2 c3                                      .....

00000608 <cols_Y>:
     608:	e0 10 0e 10 e1                                      .....

0000060d <cols_X>:
     60d:	c6 28 10 28 c7                                      .(.(.

00000612 <cols_W>:
     612:	fc 02 1c 02 fd                                      .....

00000617 <cols_V>:
     617:	f8 04 02 04 f9                                      .....

0000061c <cols_U>:
     61c:	fc 02 02 fd                                         ....

00000620 <cols_T>:
     620:	80 80 fe 80 81                                      .....

00000625 <cols_S>:
     625:	64 92 92 4d                                         d..M

00000629 <cols_R>:
     629:	fe 90 98 67                                         ...g

0000062d <cols_Q>:
     62d:	7c 82 8a 7c 03                                      |..|.

00000632 <cols_P>:
     632:	fe 90 90 61                                         ...a

00000636 <cols_O>:
     636:	7c 82 82 7d                                         |..}

0000063a <cols_N>:
     63a:	fe 20 10 ff                                         . ..

0000063e <cols_M>:
     63e:	fe 40 30 40 ff                                      .@0@.

00000643 <cols_L>:
     643:	fe 02 02 03                                         ....

00000647 <cols_K>:
     647:	fe 10 28 c7                                         ..(.

0000064b <cols_J>:
     64b:	04 02 02 fd                                         ....

0000064f <cols_I>:
     64f:	82 fe 83                                            ...

00000652 <cols_H>:
     652:	fe 10 10 ff                                         ....

00000656 <cols_G>:
     656:	7c 82 92 5d                                         |..]

0000065a <cols_F>:
     65a:	fe 90 90 81                                         ....

0000065e <cols_E>:
     65e:	fe 92 92 83                                         ....

00000662 <cols_D>:
     662:	fe 82 82 7d                                         ...}

00000666 <cols_C>:
     666:	7c 82 82 45                                         |..E

0000066a <cols_B>:
     66a:	fe 92 92 6d                                         ...m

0000066e <cols_A>:
     66e:	7e 90 90 7f                                         ~...

00000672 <__c.2082>:
     672:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000679 <__c.2078>:
     679:	1b 5b 25 64 6d 00                                   .[%dm.

0000067f <__c.2068>:
     67f:	1b 5b 32 4a 00                                      .[2J.

00000684 <__c.2058>:
     684:	1b 5b 30 6d 00                                      .[0m.

00000689 <__c.2033>:
     689:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000692 <__ctors_end>:
     692:	11 24       	eor	r1, r1
     694:	1f be       	out	0x3f, r1	; 63
     696:	cf ef       	ldi	r28, 0xFF	; 255
     698:	d8 e0       	ldi	r29, 0x08	; 8
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61

0000069e <__do_copy_data>:
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	ea e2       	ldi	r30, 0x2A	; 42
     6a6:	f5 e2       	ldi	r31, 0x25	; 37
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__do_copy_data+0x10>
     6aa:	05 90       	lpm	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	ae 37       	cpi	r26, 0x7E	; 126
     6b0:	b1 07       	cpc	r27, r17
     6b2:	d9 f7       	brne	.-10     	; 0x6aa <__do_copy_data+0xc>

000006b4 <__do_clear_bss>:
     6b4:	23 e0       	ldi	r18, 0x03	; 3
     6b6:	ae e7       	ldi	r26, 0x7E	; 126
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
     6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
     6be:	ac 33       	cpi	r26, 0x3C	; 60
     6c0:	b2 07       	cpc	r27, r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
     6c4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <main>
     6c8:	0c 94 93 12 	jmp	0x2526	; 0x2526 <_exit>

000006cc <__bad_interrupt>:
     6cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6d0:	e8 e6       	ldi	r30, 0x68	; 104
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6da:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6dc:	ec e6       	ldi	r30, 0x6C	; 108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 60       	ori	r24, 0x0F	; 15
     6e4:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6e6:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
     6ea:	08 95       	ret

000006ec <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6ec:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     6f0:	18 16       	cp	r1, r24
     6f2:	3c f5       	brge	.+78     	; 0x742 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6f4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6f8:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6fa:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6fc:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <__data_end>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	b4 f0       	brlt	.+44     	; 0x730 <button_pushed+0x44>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     70a:	f9 01       	movw	r30, r18
     70c:	e1 58       	subi	r30, 0x81	; 129
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	40 81       	ld	r20, Z
     712:	f9 01       	movw	r30, r18
     714:	e2 58       	subi	r30, 0x82	; 130
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	29 2f       	mov	r18, r25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <__data_end>
     724:	04 2e       	mov	r0, r20
     726:	00 0c       	add	r0, r0
     728:	55 0b       	sbc	r21, r21
     72a:	24 17       	cp	r18, r20
     72c:	35 07       	cpc	r19, r21
     72e:	6c f3       	brlt	.-38     	; 0x70a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     730:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <__data_end>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <__data_end>
		
		if(interrupts_were_enabled) {
     73a:	66 23       	and	r22, r22
     73c:	1c f4       	brge	.+6      	; 0x744 <button_pushed+0x58>
			// Turn them back on again
			sei();
     73e:	78 94       	sei
     740:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     742:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     744:	08 95       	ret

00000746 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     764:	43 b1       	in	r20, 0x03	; 3
     766:	4f 70       	andi	r20, 0x0F	; 15
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     76c:	64 2f       	mov	r22, r20
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__data_end>
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	04 f5       	brge	.+64     	; 0x7b8 <__vector_5+0x72>
     778:	9b 01       	movw	r18, r22
     77a:	08 2e       	mov	r0, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_5+0x3c>
     77e:	35 95       	asr	r19
     780:	27 95       	ror	r18
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <__vector_5+0x38>
     786:	20 ff       	sbrs	r18, 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     78a:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	08 2e       	mov	r0, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x52>
     794:	35 95       	asr	r19
     796:	27 95       	ror	r18
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <__vector_5+0x4e>
     79c:	20 fd       	sbrc	r18, 0
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7a0:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__data_end>
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	2e 0f       	add	r18, r30
     7a8:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__data_end>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 0b       	sbc	r31, r31
     7b2:	e1 58       	subi	r30, 0x81	; 129
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f6       	brne	.-80     	; 0x770 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7c0:	40 93 83 01 	sts	0x0183, r20	; 0x800183 <last_button_state>
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <is_ghost_home>:
}

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
     7e2:	6f 30       	cpi	r22, 0x0F	; 15
     7e4:	39 f4       	brne	.+14     	; 0x7f4 <is_ghost_home+0x12>
		return 1;
     7e6:	94 ef       	ldi	r25, 0xF4	; 244
     7e8:	98 0f       	add	r25, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	97 30       	cpi	r25, 0x07	; 7
     7ee:	60 f0       	brcs	.+24     	; 0x808 <is_ghost_home+0x26>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
     7f4:	6e 30       	cpi	r22, 0x0E	; 14
     7f6:	39 f4       	brne	.+14     	; 0x806 <is_ghost_home+0x24>

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
		return 1;
     7f8:	92 ef       	ldi	r25, 0xF2	; 242
     7fa:	98 0f       	add	r25, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	93 30       	cpi	r25, 0x03	; 3
     800:	18 f0       	brcs	.+6      	; 0x808 <is_ghost_home+0x26>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
			&& x <= GHOST_HOME_ENTRY_X_RIGHT) {
		return 1;
	} else {
		return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     808:	08 95       	ret

0000080a <what_is_in_dirn>:

// what_is_in_dirn(x,y,direction) returns what is in the cell one from 
// the cell at (x,y) in the given direction - provided that is not off
// the game field. (If it is, we just indicate that a wall is there.)
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
	switch(direction) {
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <what_is_in_dirn+0x30>
     816:	28 f0       	brcs	.+10     	; 0x822 <what_is_in_dirn+0x18>
     818:	42 30       	cpi	r20, 0x02	; 2
     81a:	49 f0       	breq	.+18     	; 0x82e <what_is_in_dirn+0x24>
     81c:	43 30       	cpi	r20, 0x03	; 3
     81e:	99 f0       	breq	.+38     	; 0x846 <what_is_in_dirn+0x3c>
     820:	5e c0       	rjmp	.+188    	; 0x8de <what_is_in_dirn+0xd4>
		case DIRN_LEFT:
			if(x == 0) {
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <what_is_in_dirn+0x1e>
     826:	5d c0       	rjmp	.+186    	; 0x8e2 <what_is_in_dirn+0xd8>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     828:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = -1;
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	11 c0       	rjmp	.+34     	; 0x850 <what_is_in_dirn+0x46>
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
     82e:	8e 31       	cpi	r24, 0x1E	; 30
     830:	09 f4       	brne	.+2      	; 0x834 <what_is_in_dirn+0x2a>
     832:	59 c0       	rjmp	.+178    	; 0x8e6 <what_is_in_dirn+0xdc>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     834:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = 1;
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0b c0       	rjmp	.+22     	; 0x850 <what_is_in_dirn+0x46>
			break;
		case DIRN_UP:
			if(y == 0) {
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <what_is_in_dirn+0x36>
     83e:	55 c0       	rjmp	.+170    	; 0x8ea <what_is_in_dirn+0xe0>
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = -1;
     840:	2f ef       	ldi	r18, 0xFF	; 255
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <what_is_in_dirn+0x46>
				return CELL_IS_WALL;
			}
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
     846:	6e 31       	cpi	r22, 0x1E	; 30
     848:	09 f4       	brne	.+2      	; 0x84c <what_is_in_dirn+0x42>
     84a:	51 c0       	rjmp	.+162    	; 0x8ee <what_is_in_dirn+0xe4>
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = 1;
     84c:	21 e0       	ldi	r18, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     84e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
     850:	62 0f       	add	r22, r18
     852:	89 0f       	add	r24, r25
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
     854:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <pacman_x>
     858:	89 13       	cpse	r24, r25
     85a:	05 c0       	rjmp	.+10     	; 0x866 <what_is_in_dirn+0x5c>
     85c:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <pacman_y>
     860:	69 17       	cp	r22, r25
     862:	09 f4       	brne	.+2      	; 0x866 <what_is_in_dirn+0x5c>
     864:	46 c0       	rjmp	.+140    	; 0x8f2 <what_is_in_dirn+0xe8>
     866:	ad e8       	ldi	r26, 0x8D	; 141
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	e9 e8       	ldi	r30, 0x89	; 137
     86c:	f1 e0       	ldi	r31, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     86e:	90 e0       	ldi	r25, 0x00	; 0
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     870:	2d 91       	ld	r18, X+
     872:	82 13       	cpse	r24, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <what_is_in_dirn+0x74>
     876:	20 81       	ld	r18, Z
     878:	62 17       	cp	r22, r18
     87a:	09 f4       	brne	.+2      	; 0x87e <what_is_in_dirn+0x74>
     87c:	3c c0       	rjmp	.+120    	; 0x8f6 <what_is_in_dirn+0xec>
     87e:	9f 5f       	subi	r25, 0xFF	; 255
     880:	31 96       	adiw	r30, 0x01	; 1
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	a9 f7       	brne	.-22     	; 0x870 <what_is_in_dirn+0x66>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     886:	46 2f       	mov	r20, r22
     888:	50 e0       	ldi	r21, 0x00	; 0
	// Extract the value for the column x (which is in bit x)
	if(dots_on_row & (1UL<< x)) {
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     88e:	fa 01       	movw	r30, r20
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ea 56       	subi	r30, 0x6A	; 106
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
			if(x == ghost_x[i] && y == ghost_y[i]) {
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
     89c:	c0 80       	ld	r12, Z
     89e:	d1 80       	ldd	r13, Z+1	; 0x01
     8a0:	e2 80       	ldd	r14, Z+2	; 0x02
     8a2:	f3 80       	ldd	r15, Z+3	; 0x03
     8a4:	08 2e       	mov	r0, r24
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <what_is_in_dirn+0xa6>
     8a8:	f6 94       	lsr	r15
     8aa:	e7 94       	ror	r14
     8ac:	d7 94       	ror	r13
     8ae:	c7 94       	ror	r12
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <what_is_in_dirn+0x9e>
     8b4:	c0 fc       	sbrc	r12, 0
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <what_is_in_dirn+0xf0>
//
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
     8b8:	9f e1       	ldi	r25, 0x1F	; 31
     8ba:	94 9f       	mul	r25, r20
     8bc:	f0 01       	movw	r30, r0
     8be:	95 9f       	mul	r25, r21
     8c0:	f0 0d       	add	r31, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e2 0f       	add	r30, r18
     8c6:	f3 1f       	adc	r31, r19
     8c8:	ea 5c       	subi	r30, 0xCA	; 202
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	e4 91       	lpm	r30, Z
	return (wall_character != ' ' && wall_character != '.'
			&& wall_character != 'P');
     8ce:	e0 32       	cpi	r30, 0x20	; 32
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
	return (wall_character != ' ' && wall_character != '.'
     8d2:	ee 32       	cpi	r30, 0x2E	; 46
     8d4:	b1 f0       	breq	.+44     	; 0x902 <__stack+0x3>
			&& wall_character != 'P');
     8d6:	e0 35       	cpi	r30, 0x50	; 80
     8d8:	a1 f0       	breq	.+40     	; 0x902 <__stack+0x3>
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	17 c0       	rjmp	.+46     	; 0x90c <__stack+0xd>
			}
			delta_y = 1;
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
     8de:	8e ef       	ldi	r24, 0xFE	; 254
     8e0:	15 c0       	rjmp	.+42     	; 0x90c <__stack+0xd>
	int8_t delta_y = 0;
	switch(direction) {
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
     8e2:	8e ef       	ldi	r24, 0xFE	; 254
     8e4:	13 c0       	rjmp	.+38     	; 0x90c <__stack+0xd>
			delta_x = -1;
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
     8e6:	8e ef       	ldi	r24, 0xFE	; 254
     8e8:	11 c0       	rjmp	.+34     	; 0x90c <__stack+0xd>
			delta_x = 1;
			break;
		case DIRN_UP:
			if(y == 0) {
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
     8ea:	8e ef       	ldi	r24, 0xFE	; 254
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <__stack+0xd>
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
     8ee:	8e ef       	ldi	r24, 0xFE	; 254
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
// what_is_at(x,y) returns
//		CELL_EMPTY, CELL_CONTAINS_PACDOT, CELL_CONTAINS_PACMAN, CELL_IS_WALL,
//		CELL_IS_GHOST_HOME or the ghost number if the cell contains a ghost
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
     8f2:	8d ef       	ldi	r24, 0xFD	; 253
     8f4:	0b c0       	rjmp	.+22     	; 0x90c <__stack+0xd>
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     8f6:	89 2f       	mov	r24, r25
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
     8fa:	8c ef       	ldi	r24, 0xFC	; 252
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
		return CELL_IS_GHOST_HOME;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xd>
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
     902:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     906:	81 11       	cpse	r24, r1
     908:	fa cf       	rjmp	.-12     	; 0x8fe <what_is_in_dirn+0xf4>
		return CELL_IS_GHOST_HOME;
	}
	// If we get here, we haven't found anything else - cell is empty
	return CELL_EMPTY;
     90a:	8b ef       	ldi	r24, 0xFB	; 251
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
}
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	08 95       	ret

00000916 <determine_dirns_ghost_can_move_in>:
// - a pacdot
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	08 2f       	mov	r16, r24
     928:	f6 2e       	mov	r15, r22
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
     92a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     92e:	e8 2e       	mov	r14, r24
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
     934:	10 e0       	ldi	r17, 0x00	; 0
		if(adjacent_cell_contents < CELL_IS_WALL) {
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     936:	cc 24       	eor	r12, r12
     938:	c3 94       	inc	r12
     93a:	d1 2c       	mov	r13, r1
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		int8_t adjacent_cell_contents = what_is_in_dirn(x,y,dirn);
     93c:	4c 2f       	mov	r20, r28
     93e:	6f 2d       	mov	r22, r15
     940:	80 2f       	mov	r24, r16
     942:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
		
		if(adjacent_cell_contents < CELL_IS_WALL) {
     946:	8e 3f       	cpi	r24, 0xFE	; 254
     948:	4c f4       	brge	.+18     	; 0x95c <determine_dirns_ghost_can_move_in+0x46>
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
     94a:	c6 01       	movw	r24, r12
     94c:	0c 2e       	mov	r0, r28
     94e:	02 c0       	rjmp	.+4      	; 0x954 <determine_dirns_ghost_can_move_in+0x3e>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <determine_dirns_ghost_can_move_in+0x3a>
     958:	18 2b       	or	r17, r24
     95a:	0c c0       	rjmp	.+24     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
     95c:	ee 20       	and	r14, r14
     95e:	51 f0       	breq	.+20     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	41 f4       	brne	.+16     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     964:	c6 01       	movw	r24, r12
     966:	0c 2e       	mov	r0, r28
     968:	02 c0       	rjmp	.+4      	; 0x96e <determine_dirns_ghost_can_move_in+0x58>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	0a 94       	dec	r0
     970:	e2 f7       	brpl	.-8      	; 0x96a <determine_dirns_ghost_can_move_in+0x54>
     972:	18 2b       	or	r17, r24
     974:	21 96       	adiw	r28, 0x01	; 1
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
     976:	c4 30       	cpi	r28, 0x04	; 4
     978:	d1 05       	cpc	r29, r1
     97a:	01 f7       	brne	.-64     	; 0x93c <determine_dirns_ghost_can_move_in+0x26>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
		} 
	}
	return return_value;
}
     97c:	81 2f       	mov	r24, r17
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <draw_pacman_at>:

// We draw the pac-man at the given location. The character used
// to draw the pac-man is based on the direction it is currently
// facing.
static void draw_pacman_at(uint8_t x, uint8_t y) {
	move_cursor(x+1,y+1);
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	set_display_attribute(PACMAN_COLOUR);
     99e:	81 e2       	ldi	r24, 0x21	; 33
     9a0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <set_display_attribute>
	printf("%s", pacman_characters[pacman_direction]);
     9a4:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <pacman_direction>
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	e8 59       	subi	r30, 0x98	; 152
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
     9b4:	8f 93       	push	r24
     9b6:	80 81       	ld	r24, Z
     9b8:	8f 93       	push	r24
     9ba:	83 e1       	ldi	r24, 0x13	; 19
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
	normal_display_mode();
     9c6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <normal_display_mode>
}
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	08 95       	ret

000009d4 <draw_ghost_at>:

// ghostnum is assumed to be in the range 0..NUM_GHOSTS-1
// x and y values are assumed to be valid
static void draw_ghost_at(uint8_t ghostnum, uint8_t x, uint8_t y) {
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	18 2f       	mov	r17, r24
     9de:	06 2f       	mov	r16, r22
	move_cursor(x+1,y+1);
     9e0:	c4 2f       	mov	r28, r20
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	86 2f       	mov	r24, r22
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
     9f4:	e1 2f       	mov	r30, r17
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e0 59       	subi	r30, 0x90	; 144
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <set_display_attribute>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     a02:	cc 0f       	add	r28, r28
     a04:	dd 1f       	adc	r29, r29
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	ca 56       	subi	r28, 0x6A	; 106
     a0c:	de 4f       	sbci	r29, 0xFE	; 254
	move_cursor(x+1,y+1);
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
	// If there is a pac-dot at this location we output a "." otherwise
	// we output a space (which will be shown as a block in reverse video)
	if(is_pacdot_at(x,y)) {
     a0e:	88 81       	ld	r24, Y
     a10:	99 81       	ldd	r25, Y+1	; 0x01
     a12:	aa 81       	ldd	r26, Y+2	; 0x02
     a14:	bb 81       	ldd	r27, Y+3	; 0x03
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <draw_ghost_at+0x4c>
     a18:	b6 95       	lsr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	0a 95       	dec	r16
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <draw_ghost_at+0x44>
     a24:	80 ff       	sbrs	r24, 0
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <draw_ghost_at+0x5e>
		printf(".");
     a28:	8e e2       	ldi	r24, 0x2E	; 46
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <draw_ghost_at+0x66>
	} else {
		printf(" ");
     a32:	80 e2       	ldi	r24, 0x20	; 32
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
	}
	// Return to normal display mode to ensure we don't use this
	// background colour for any other printing
	normal_display_mode();
     a3a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <normal_display_mode>
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <erase_pixel_at>:

// Erase the pixel at the given location - presumably because the 
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	18 2f       	mov	r17, r24
	move_cursor(x+1, y+1);
     a50:	c6 2f       	mov	r28, r22
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     a62:	cc 0f       	add	r28, r28
     a64:	dd 1f       	adc	r29, r29
     a66:	cc 0f       	add	r28, r28
     a68:	dd 1f       	adc	r29, r29
     a6a:	ca 56       	subi	r28, 0x6A	; 106
     a6c:	de 4f       	sbci	r29, 0xFE	; 254
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
	move_cursor(x+1, y+1);
	if(is_pacdot_at(x,y)) {
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	aa 81       	ldd	r26, Y+2	; 0x02
     a74:	bb 81       	ldd	r27, Y+3	; 0x03
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <erase_pixel_at+0x38>
     a78:	b6 95       	lsr	r27
     a7a:	a7 95       	ror	r26
     a7c:	97 95       	ror	r25
     a7e:	87 95       	ror	r24
     a80:	1a 95       	dec	r17
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <erase_pixel_at+0x30>
     a84:	80 ff       	sbrs	r24, 0
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <erase_pixel_at+0x4a>
		printf(".");
     a88:	8e e2       	ldi	r24, 0x2E	; 46
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <erase_pixel_at+0x52>
 	} else {
		printf(" ");
     a92:	80 e2       	ldi	r24, 0x20	; 32
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
	 }
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	08 95       	ret

00000aa2 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     ac6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <clear_terminal>
	normal_display_mode();
     aca:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <normal_display_mode>
	hide_cursor();
     ace:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
     ade:	0f 2e       	mov	r0, r31
     ae0:	f5 e5       	ldi	r31, 0x55	; 85
     ae2:	6f 2e       	mov	r6, r31
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	7f 2e       	mov	r7, r31
     ae8:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     aea:	0f 2e       	mov	r0, r31
     aec:	fe e3       	ldi	r31, 0x3E	; 62
     aee:	2f 2e       	mov	r2, r31
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	3f 2e       	mov	r3, r31
     af4:	f0 2d       	mov	r31, r0
     af6:	0f 2e       	mov	r0, r31
     af8:	f3 e1       	ldi	r31, 0x13	; 19
     afa:	4f 2e       	mov	r4, r31
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	5f 2e       	mov	r5, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	b6 c0       	rjmp	.+364    	; 0xc70 <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     b04:	f6 01       	movw	r30, r12
     b06:	84 91       	lpm	r24, Z
			switch(wall_character) {
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	b0 97       	sbiw	r30, 0x20	; 32
     b0e:	ed 35       	cpi	r30, 0x5D	; 93
     b10:	f1 05       	cpc	r31, r1
     b12:	08 f0       	brcs	.+2      	; 0xb16 <initialise_game_level+0x74>
     b14:	96 c0       	rjmp	.+300    	; 0xc42 <initialise_game_level+0x1a0>
     b16:	e2 5c       	subi	r30, 0xC2	; 194
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     b1e:	9f 92       	push	r9
     b20:	8f 92       	push	r8
     b22:	5f 92       	push	r5
     b24:	4f 92       	push	r4
     b26:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	8b c0       	rjmp	.+278    	; 0xc4a <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     b34:	bf 92       	push	r11
     b36:	af 92       	push	r10
     b38:	5f 92       	push	r5
     b3a:	4f 92       	push	r4
     b3c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	80 c0       	rjmp	.+256    	; 0xc4a <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	5f 92       	push	r5
     b50:	4f 92       	push	r4
     b52:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	75 c0       	rjmp	.+234    	; 0xc4a <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     b60:	1f 93       	push	r17
     b62:	0f 93       	push	r16
     b64:	5f 92       	push	r5
     b66:	4f 92       	push	r4
     b68:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	6a c0       	rjmp	.+212    	; 0xc4a <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     b76:	ff 92       	push	r15
     b78:	ef 92       	push	r14
     b7a:	5f 92       	push	r5
     b7c:	4f 92       	push	r4
     b7e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	5f c0       	rjmp	.+190    	; 0xc4a <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     b8c:	8a e2       	ldi	r24, 0x2A	; 42
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	5f 92       	push	r5
     b96:	4f 92       	push	r4
     b98:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	52 c0       	rjmp	.+164    	; 0xc4a <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     ba6:	8e e2       	ldi	r24, 0x2E	; 46
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	5f 92       	push	r5
     bb0:	4f 92       	push	r4
     bb2:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     bc0:	82 e3       	ldi	r24, 0x32	; 50
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	9f 93       	push	r25
     bc6:	8f 93       	push	r24
     bc8:	5f 92       	push	r5
     bca:	4f 92       	push	r4
     bcc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	38 c0       	rjmp	.+112    	; 0xc4a <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     bda:	86 e3       	ldi	r24, 0x36	; 54
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	5f 92       	push	r5
     be4:	4f 92       	push	r4
     be6:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	2b c0       	rjmp	.+86     	; 0xc4a <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     bf4:	8a e3       	ldi	r24, 0x3A	; 58
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	5f 92       	push	r5
     bfe:	4f 92       	push	r4
     c00:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	1e c0       	rjmp	.+60     	; 0xc4a <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     c0e:	3f 92       	push	r3
     c10:	2f 92       	push	r2
     c12:	5f 92       	push	r5
     c14:	4f 92       	push	r4
     c16:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <initialise_game_level+0x1a8>
				case 'P':	printf("."); break;	// power-pellet initially just implemented as a pac-dot
     c2e:	8e e2       	ldi	r24, 0x2E	; 46
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     c38:	8e e2       	ldi	r24, 0x2E	; 46
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     c42:	88 e7       	ldi	r24, 0x78	; 120
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     c4a:	ff ef       	ldi	r31, 0xFF	; 255
     c4c:	cf 1a       	sub	r12, r31
     c4e:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     c50:	6c 14       	cp	r6, r12
     c52:	7d 04       	cpc	r7, r13
     c54:	09 f0       	breq	.+2      	; 0xc58 <initialise_game_level+0x1b6>
     c56:	56 cf       	rjmp	.-340    	; 0xb04 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     c58:	8a e0       	ldi	r24, 0x0A	; 10
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <putchar>
     c60:	2f e1       	ldi	r18, 0x1F	; 31
     c62:	62 0e       	add	r6, r18
     c64:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	95 e0       	ldi	r25, 0x05	; 5
     c6a:	86 15       	cp	r24, r6
     c6c:	97 05       	cpc	r25, r7
     c6e:	d9 f0       	breq	.+54     	; 0xca6 <initialise_game_level+0x204>
     c70:	63 01       	movw	r12, r6
     c72:	9f e1       	ldi	r25, 0x1F	; 31
     c74:	c9 1a       	sub	r12, r25
     c76:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c78:	0f 2e       	mov	r0, r31
     c7a:	f6 e2       	ldi	r31, 0x26	; 38
     c7c:	ef 2e       	mov	r14, r31
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	ff 2e       	mov	r15, r31
     c82:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c84:	02 e2       	ldi	r16, 0x22	; 34
     c86:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     c88:	ce e1       	ldi	r28, 0x1E	; 30
     c8a:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     c8c:	0f 2e       	mov	r0, r31
     c8e:	fa e1       	ldi	r31, 0x1A	; 26
     c90:	af 2e       	mov	r10, r31
     c92:	f1 e0       	ldi	r31, 0x01	; 1
     c94:	bf 2e       	mov	r11, r31
     c96:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     c98:	0f 2e       	mov	r0, r31
     c9a:	f6 e1       	ldi	r31, 0x16	; 22
     c9c:	8f 2e       	mov	r8, r31
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	9f 2e       	mov	r9, r31
     ca2:	f0 2d       	mov	r31, r0
     ca4:	2f cf       	rjmp	.-418    	; 0xb04 <initialise_game_level+0x62>
     ca6:	c6 e9       	ldi	r28, 0x96	; 150
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' || wall_character == 'P') {
				pacdots[y] |= (1UL<<x);
     cb2:	81 2c       	mov	r8, r1
     cb4:	91 2c       	mov	r9, r1
     cb6:	54 01       	movw	r10, r8
     cb8:	83 94       	inc	r8
     cba:	de 01       	movw	r26, r28

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     cbc:	18 82       	st	Y, r1
     cbe:	19 82       	std	Y+1, r1	; 0x01
     cc0:	1a 82       	std	Y+2, r1	; 0x02
     cc2:	1b 82       	std	Y+3, r1	; 0x03
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     cc8:	fc 01       	movw	r30, r24
     cca:	e2 0f       	add	r30, r18
     ccc:	f3 1f       	adc	r31, r19
     cce:	ea 5c       	subi	r30, 0xCA	; 202
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	e4 91       	lpm	r30, Z
			if(wall_character == '.' || wall_character == 'P') {
     cd4:	ee 32       	cpi	r30, 0x2E	; 46
     cd6:	11 f0       	breq	.+4      	; 0xcdc <initialise_game_level+0x23a>
     cd8:	e0 35       	cpi	r30, 0x50	; 80
     cda:	d1 f4       	brne	.+52     	; 0xd10 <initialise_game_level+0x26e>
				pacdots[y] |= (1UL<<x);
     cdc:	4d 90       	ld	r4, X+
     cde:	5d 90       	ld	r5, X+
     ce0:	6d 90       	ld	r6, X+
     ce2:	7c 90       	ld	r7, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	75 01       	movw	r14, r10
     ce8:	64 01       	movw	r12, r8
     cea:	08 2e       	mov	r0, r24
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <initialise_game_level+0x254>
     cee:	cc 0c       	add	r12, r12
     cf0:	dd 1c       	adc	r13, r13
     cf2:	ee 1c       	adc	r14, r14
     cf4:	ff 1c       	adc	r15, r15
     cf6:	0a 94       	dec	r0
     cf8:	d2 f7       	brpl	.-12     	; 0xcee <initialise_game_level+0x24c>
     cfa:	c4 28       	or	r12, r4
     cfc:	d5 28       	or	r13, r5
     cfe:	e6 28       	or	r14, r6
     d00:	f7 28       	or	r15, r7
     d02:	cd 92       	st	X+, r12
     d04:	dd 92       	st	X+, r13
     d06:	ed 92       	st	X+, r14
     d08:	fc 92       	st	X, r15
     d0a:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     d0c:	4f 5f       	subi	r20, 0xFF	; 255
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	01 96       	adiw	r24, 0x01	; 1
static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     d12:	8f 31       	cpi	r24, 0x1F	; 31
     d14:	91 05       	cpc	r25, r1
     d16:	c1 f6       	brne	.-80     	; 0xcc8 <initialise_game_level+0x226>
     d18:	21 5e       	subi	r18, 0xE1	; 225
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	24 96       	adiw	r28, 0x04	; 4
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d1e:	21 3c       	cpi	r18, 0xC1	; 193
     d20:	e3 e0       	ldi	r30, 0x03	; 3
     d22:	3e 07       	cpc	r19, r30
     d24:	51 f6       	brne	.-108    	; 0xcba <initialise_game_level+0x218>
     d26:	50 93 95 01 	sts	0x0195, r21	; 0x800195 <num_pacdots+0x1>
     d2a:	40 93 94 01 	sts	0x0194, r20	; 0x800194 <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     d2e:	8f e0       	ldi	r24, 0x0F	; 15
     d30:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     d34:	87 e1       	ldi	r24, 0x17	; 23
     d36:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     d40:	67 e1       	ldi	r22, 0x17	; 23
     d42:	8f e0       	ldi	r24, 0x0F	; 15
     d44:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
     d48:	0f 2e       	mov	r0, r31
     d4a:	fd e8       	ldi	r31, 0x8D	; 141
     d4c:	af 2e       	mov	r10, r31
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	bf 2e       	mov	r11, r31
     d52:	f0 2d       	mov	r31, r0
     d54:	0f 2e       	mov	r0, r31
     d56:	f9 e8       	ldi	r31, 0x89	; 137
     d58:	cf 2e       	mov	r12, r31
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	df 2e       	mov	r13, r31
     d5e:	f0 2d       	mov	r31, r0
     d60:	0f 2e       	mov	r0, r31
     d62:	f5 e8       	ldi	r31, 0x85	; 133
     d64:	ef 2e       	mov	r14, r31
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	ff 2e       	mov	r15, r31
     d6a:	f0 2d       	mov	r31, r0
     d6c:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d6e:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     d70:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     d72:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     d74:	f5 01       	movw	r30, r10
     d76:	d1 93       	st	Z+, r29
     d78:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     d7a:	f6 01       	movw	r30, r12
     d7c:	11 93       	st	Z+, r17
     d7e:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     d80:	f7 01       	movw	r30, r14
     d82:	01 93       	st	Z+, r16
     d84:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     d86:	41 2f       	mov	r20, r17
     d88:	6d 2f       	mov	r22, r29
     d8a:	8c 2f       	mov	r24, r28
     d8c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
     d90:	cf 5f       	subi	r28, 0xFF	; 255
     d92:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d94:	c4 30       	cpi	r28, 0x04	; 4
     d96:	71 f7       	brne	.-36     	; 0xd74 <initialise_game_level+0x2d2>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	af 90       	pop	r10
     dac:	9f 90       	pop	r9
     dae:	8f 90       	pop	r8
     db0:	7f 90       	pop	r7
     db2:	6f 90       	pop	r6
     db4:	5f 90       	pop	r5
     db6:	4f 90       	pop	r4
     db8:	3f 90       	pop	r3
     dba:	2f 90       	pop	r2
     dbc:	08 95       	ret

00000dbe <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     dbe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <initialise_game_level>
	game_running = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <game_running>
     dc8:	08 95       	ret

00000dca <move_pacman>:
}

int8_t move_pacman(void) {
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
	if(!game_running) {
     dd0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <game_running>
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <move_pacman+0x10>
     dd8:	a6 c0       	rjmp	.+332    	; 0xf26 <move_pacman+0x15c>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     dda:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <pacman_y>
     dde:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <pacman_x>
     de2:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <pacman_direction>
     de6:	61 2f       	mov	r22, r17
     de8:	8d 2f       	mov	r24, r29
     dea:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     dee:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL)  {
     df0:	8e 3f       	cpi	r24, 0xFE	; 254
     df2:	09 f4       	brne	.+2      	; 0xdf6 <move_pacman+0x2c>
     df4:	9a c0       	rjmp	.+308    	; 0xf2a <move_pacman+0x160>
		
		
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     df6:	61 2f       	mov	r22, r17
     df8:	8d 2f       	mov	r24, r29
     dfa:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	// Update the pac-man location
	
	 if (pacman_direction == DIRN_LEFT) {
     dfe:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <pacman_direction>
     e02:	81 11       	cpse	r24, r1
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <move_pacman+0x5a>
		 pacman_x--;
     e06:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <pacman_x>
     e0a:	81 50       	subi	r24, 0x01	; 1
     e0c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <pacman_x>

		 if (pacman_x == 0 && pacman_y == 15 ) {
     e10:	81 11       	cpse	r24, r1
     e12:	25 c0       	rjmp	.+74     	; 0xe5e <move_pacman+0x94>
     e14:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <pacman_y>
     e18:	8f 30       	cpi	r24, 0x0F	; 15
     e1a:	09 f5       	brne	.+66     	; 0xe5e <move_pacman+0x94>
			 pacman_x = 30 ;
     e1c:	8e e1       	ldi	r24, 0x1E	; 30
     e1e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <pacman_x>
     e22:	1d c0       	rjmp	.+58     	; 0xe5e <move_pacman+0x94>
		 }
		 
		 } else if (pacman_direction == DIRN_RIGHT) {
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	71 f4       	brne	.+28     	; 0xe44 <move_pacman+0x7a>
		 pacman_x++;
     e28:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <pacman_x>
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <pacman_x>
		 if (pacman_x == 30 && pacman_y == 15 ) {
     e32:	8e 31       	cpi	r24, 0x1E	; 30
     e34:	a1 f4       	brne	.+40     	; 0xe5e <move_pacman+0x94>
     e36:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <pacman_y>
     e3a:	8f 30       	cpi	r24, 0x0F	; 15
     e3c:	81 f4       	brne	.+32     	; 0xe5e <move_pacman+0x94>
			 pacman_x = 0 ;
     e3e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <pacman_x>
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <move_pacman+0x94>
		 }
	 }
		else if(pacman_direction == DIRN_UP) {
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	31 f4       	brne	.+12     	; 0xe54 <move_pacman+0x8a>
		 pacman_y--;
     e48:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <pacman_y>
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pacman_y>
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <move_pacman+0x94>
		 } else {
		 pacman_y++;
     e54:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <pacman_y>
     e58:	8f 5f       	subi	r24, 0xFF	; 255
     e5a:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <pacman_y>
	 }

	if(cell_contents >= 0) {
     e5e:	cc 23       	and	r28, r28
     e60:	94 f0       	brlt	.+36     	; 0xe86 <move_pacman+0xbc>
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     e62:	ec 2f       	mov	r30, r28
     e64:	cc 0f       	add	r28, r28
     e66:	ff 0b       	sbc	r31, r31
     e68:	e0 59       	subi	r30, 0x90	; 144
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	80 81       	ld	r24, Z
     e6e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     e72:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <pacman_y>
     e76:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <pacman_x>
     e7a:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		// Game is over 
		game_running = 0;
     e7e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <game_running>
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	53 c0       	rjmp	.+166    	; 0xf2c <move_pacman+0x162>
		set_display_attribute(ghost_colours[cell_contents]);
		draw_pacman_at(pacman_x, pacman_y);
		// Game is over 
		game_running = 0;
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
     e86:	cc 3f       	cpi	r28, 0xFC	; 252
     e88:	09 f0       	breq	.+2      	; 0xe8c <move_pacman+0xc2>
     e8a:	45 c0       	rjmp	.+138    	; 0xf16 <move_pacman+0x14c>
// count of remaining pac-dots.
// See initialise_pacdots() below for information on how the pacdots array
// is initialised.
static void eat_pacdot(void) {
	uint32_t maskval = 1UL << pacman_x; 
	pacdots[pacman_y] &= ~(maskval); 
     e8c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <pacman_y>
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	ee 0f       	add	r30, r30
     e98:	ff 1f       	adc	r31, r31
     e9a:	ea 56       	subi	r30, 0x6A	; 106
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a0 e0       	ldi	r26, 0x00	; 0
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	00 90 93 01 	lds	r0, 0x0193	; 0x800193 <pacman_x>
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <move_pacman+0xea>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	aa 1f       	adc	r26, r26
     eb2:	bb 1f       	adc	r27, r27
     eb4:	0a 94       	dec	r0
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <move_pacman+0xe2>
     eb8:	80 95       	com	r24
     eba:	90 95       	com	r25
     ebc:	a0 95       	com	r26
     ebe:	b0 95       	com	r27
     ec0:	40 81       	ld	r20, Z
     ec2:	51 81       	ldd	r21, Z+1	; 0x01
     ec4:	62 81       	ldd	r22, Z+2	; 0x02
     ec6:	73 81       	ldd	r23, Z+3	; 0x03
     ec8:	84 23       	and	r24, r20
     eca:	95 23       	and	r25, r21
     ecc:	a6 23       	and	r26, r22
     ece:	b7 23       	and	r27, r23
     ed0:	80 83       	st	Z, r24
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	a2 83       	std	Z+2, r26	; 0x02
     ed6:	b3 83       	std	Z+3, r27	; 0x03
	
	num_pacdots--;
     ed8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <num_pacdots>
     edc:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <num_pacdots+0x1>
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <num_pacdots+0x1>
     ee6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <num_pacdots>
	move_cursor(55, 7);
     eea:	67 e0       	ldi	r22, 0x07	; 7
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	87 e3       	ldi	r24, 0x37	; 55
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf(("Pacdots Remaining: %d"), num_pacdots);
     ef6:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <num_pacdots+0x1>
     efa:	8f 93       	push	r24
     efc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <num_pacdots>
     f00:	8f 93       	push	r24
     f02:	82 e4       	ldi	r24, 0x42	; 66
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <printf>
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
     f16:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <pacman_y>
     f1a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <pacman_x>
     f1e:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
	}
	return 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	03 c0       	rjmp	.+6      	; 0xf2c <move_pacman+0x162>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <move_pacman+0x162>
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL)  {
		
		
		return 0;	// We can't move - wall is straight ahead
     f2a:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	08 95       	ret

00000f34 <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
	if(!game_running) {
     f3a:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <game_running>
     f3e:	99 23       	and	r25, r25
     f40:	a1 f0       	breq	.+40     	; 0xf6a <change_pacman_direction+0x36>
     f42:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
     f44:	10 91 92 01 	lds	r17, 0x0192	; 0x800192 <pacman_y>
     f48:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <pacman_x>
     f4c:	48 2f       	mov	r20, r24
     f4e:	61 2f       	mov	r22, r17
     f50:	8d 2f       	mov	r24, r29
     f52:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
     f56:	8e 3f       	cpi	r24, 0xFE	; 254
     f58:	51 f0       	breq	.+20     	; 0xf6e <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
     f5a:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
     f5e:	61 2f       	mov	r22, r17
     f60:	8d 2f       	mov	r24, r29
     f62:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		return 1;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	08 95       	ret

00000f78 <move_ghost>:


void move_ghost(int8_t ghostnum) {
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
	if(!game_running) {
     f82:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <game_running>
     f86:	99 23       	and	r25, r25
     f88:	09 f4       	brne	.+2      	; 0xf8c <move_ghost+0x14>
     f8a:	e2 c1       	rjmp	.+964    	; 0x1350 <move_ghost+0x3d8>
     f8c:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fc 01       	movw	r30, r24
     f92:	e3 57       	subi	r30, 0x73	; 115
     f94:	fe 4f       	sbci	r31, 0xFE	; 254
     f96:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
     f98:	fc 01       	movw	r30, r24
     f9a:	e7 57       	subi	r30, 0x77	; 119
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
     fa0:	fc 01       	movw	r30, r24
     fa2:	eb 57       	subi	r30, 0x7B	; 123
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
     fa8:	6f 2d       	mov	r22, r15
     faa:	81 2f       	mov	r24, r17
     fac:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
     fb0:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <move_ghost+0x40>
     fb6:	cc c1       	rjmp	.+920    	; 0x1350 <move_ghost+0x3d8>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
     fb8:	6f 2d       	mov	r22, r15
     fba:	81 2f       	mov	r24, r17
     fbc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <move_ghost+0x4e>
     fc4:	45 c1       	rjmp	.+650    	; 0x1250 <move_ghost+0x2d8>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
     fc6:	01 ff       	sbrs	r16, 1
     fc8:	43 c1       	rjmp	.+646    	; 0x1250 <move_ghost+0x2d8>
     fca:	9a c1       	rjmp	.+820    	; 0x1300 <move_ghost+0x388>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
     fcc:	00 91 93 01 	lds	r16, 0x0193	; 0x800193 <pacman_x>
     fd0:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
     fd2:	d0 91 92 01 	lds	r29, 0x0192	; 0x800192 <pacman_y>
     fd6:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
     fd8:	6f 2d       	mov	r22, r15
     fda:	81 2f       	mov	r24, r17
     fdc:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
     fe0:	88 23       	and	r24, r24
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <move_ghost+0x6e>
     fe4:	b5 c1       	rjmp	.+874    	; 0x1350 <move_ghost+0x3d8>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
     fe6:	40 2f       	mov	r20, r16
     fe8:	00 2e       	mov	r0, r16
     fea:	00 0c       	add	r0, r0
     fec:	55 0b       	sbc	r21, r21
     fee:	55 23       	and	r21, r21
     ff0:	1c f4       	brge	.+6      	; 0xff8 <move_ghost+0x80>
     ff2:	51 95       	neg	r21
     ff4:	41 95       	neg	r20
     ff6:	51 09       	sbc	r21, r1
     ff8:	2d 2f       	mov	r18, r29
     ffa:	0d 2e       	mov	r0, r29
     ffc:	00 0c       	add	r0, r0
     ffe:	33 0b       	sbc	r19, r19
    1000:	33 23       	and	r19, r19
    1002:	1c f4       	brge	.+6      	; 0x100a <move_ghost+0x92>
    1004:	31 95       	neg	r19
    1006:	21 95       	neg	r18
    1008:	31 09       	sbc	r19, r1
    100a:	42 17       	cp	r20, r18
    100c:	53 07       	cpc	r21, r19
    100e:	4c f4       	brge	.+18     	; 0x1022 <move_ghost+0xaa>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    1010:	dd 23       	and	r29, r29
    1012:	1c f4       	brge	.+6      	; 0x101a <move_ghost+0xa2>
			if(dirn_options & (1 << DIRN_UP)) {
    1014:	81 ff       	sbrs	r24, 1
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <move_ghost+0xaa>
    1018:	73 c1       	rjmp	.+742    	; 0x1300 <move_ghost+0x388>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    101a:	1d 16       	cp	r1, r29
    101c:	14 f4       	brge	.+4      	; 0x1022 <move_ghost+0xaa>
			if(dirn_options & (1 << DIRN_DOWN)) {
    101e:	83 fd       	sbrc	r24, 3
    1020:	83 c1       	rjmp	.+774    	; 0x1328 <move_ghost+0x3b0>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    1022:	00 23       	and	r16, r16
    1024:	54 f4       	brge	.+20     	; 0x103a <move_ghost+0xc2>
		if(dirn_options & (1 << DIRN_LEFT)) {
    1026:	80 fd       	sbrc	r24, 0
    1028:	44 c1       	rjmp	.+648    	; 0x12b2 <move_ghost+0x33a>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    102a:	dd 23       	and	r29, r29
    102c:	1c f4       	brge	.+6      	; 0x1034 <move_ghost+0xbc>
			if(dirn_options & (1 << DIRN_UP)) {
    102e:	81 ff       	sbrs	r24, 1
    1030:	3c c1       	rjmp	.+632    	; 0x12aa <move_ghost+0x332>
    1032:	66 c1       	rjmp	.+716    	; 0x1300 <move_ghost+0x388>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1034:	83 fd       	sbrc	r24, 3
    1036:	78 c1       	rjmp	.+752    	; 0x1328 <move_ghost+0x3b0>
    1038:	38 c1       	rjmp	.+624    	; 0x12aa <move_ghost+0x332>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    103a:	82 fd       	sbrc	r24, 2
    103c:	4d c1       	rjmp	.+666    	; 0x12d8 <move_ghost+0x360>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    103e:	dd 23       	and	r29, r29
    1040:	1c f4       	brge	.+6      	; 0x1048 <move_ghost+0xd0>
			if(dirn_options & (1 << DIRN_UP)) {
    1042:	81 ff       	sbrs	r24, 1
    1044:	14 c1       	rjmp	.+552    	; 0x126e <move_ghost+0x2f6>
    1046:	5c c1       	rjmp	.+696    	; 0x1300 <move_ghost+0x388>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1048:	83 fd       	sbrc	r24, 3
    104a:	6e c1       	rjmp	.+732    	; 0x1328 <move_ghost+0x3b0>
    104c:	10 c1       	rjmp	.+544    	; 0x126e <move_ghost+0x2f6>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1052:	ab 01       	movw	r20, r22
    1054:	08 2e       	mov	r0, r24
    1056:	02 c0       	rjmp	.+4      	; 0x105c <move_ghost+0xe4>
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <move_ghost+0xe0>
    1060:	40 fd       	sbrc	r20, 0
    1062:	a0 c0       	rjmp	.+320    	; 0x11a4 <move_ghost+0x22c>
    1064:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	91 05       	cpc	r25, r1
    106a:	99 f7       	brne	.-26     	; 0x1052 <move_ghost+0xda>
    106c:	71 c1       	rjmp	.+738    	; 0x1350 <move_ghost+0x3d8>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    106e:	00 2e       	mov	r0, r16
    1070:	00 0c       	add	r0, r0
    1072:	11 0b       	sbc	r17, r17
    1074:	4d 2f       	mov	r20, r29
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	c8 01       	movw	r24, r16
    107a:	0d 2e       	mov	r0, r29
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <move_ghost+0x10a>
    107e:	95 95       	asr	r25
    1080:	87 95       	ror	r24
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <move_ghost+0x106>
    1086:	80 fd       	sbrc	r24, 0
    1088:	94 c0       	rjmp	.+296    	; 0x11b2 <move_ghost+0x23a>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    108a:	dc 0f       	add	r29, r28
    108c:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    108e:	2d 2f       	mov	r18, r29
    1090:	0d 2e       	mov	r0, r29
    1092:	00 0c       	add	r0, r0
    1094:	33 0b       	sbc	r19, r19
    1096:	c8 01       	movw	r24, r16
    1098:	0d 2e       	mov	r0, r29
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <move_ghost+0x128>
    109c:	95 95       	asr	r25
    109e:	87 95       	ror	r24
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <move_ghost+0x124>
    10a4:	80 fd       	sbrc	r24, 0
    10a6:	85 c0       	rjmp	.+266    	; 0x11b2 <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    10a8:	2e 5f       	subi	r18, 0xFE	; 254
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	23 70       	andi	r18, 0x03	; 3
    10ae:	30 78       	andi	r19, 0x80	; 128
    10b0:	33 23       	and	r19, r19
    10b2:	34 f4       	brge	.+12     	; 0x10c0 <move_ghost+0x148>
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	31 09       	sbc	r19, r1
    10b8:	2c 6f       	ori	r18, 0xFC	; 252
    10ba:	3f 6f       	ori	r19, 0xFF	; 255
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <move_ghost+0x150>
    10c4:	15 95       	asr	r17
    10c6:	07 95       	ror	r16
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <move_ghost+0x14c>
    10cc:	00 fd       	sbrc	r16, 0
    10ce:	6c c0       	rjmp	.+216    	; 0x11a8 <move_ghost+0x230>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    10d0:	9a 01       	movw	r18, r20
    10d2:	2e 5f       	subi	r18, 0xFE	; 254
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	23 70       	andi	r18, 0x03	; 3
    10d8:	30 78       	andi	r19, 0x80	; 128
    10da:	33 23       	and	r19, r19
    10dc:	34 f4       	brge	.+12     	; 0x10ea <move_ghost+0x172>
    10de:	21 50       	subi	r18, 0x01	; 1
    10e0:	31 09       	sbc	r19, r1
    10e2:	2c 6f       	ori	r18, 0xFC	; 252
    10e4:	3f 6f       	ori	r19, 0xFF	; 255
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	d2 2f       	mov	r29, r18
    10ec:	62 c0       	rjmp	.+196    	; 0x11b2 <move_ghost+0x23a>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    10ee:	00 2e       	mov	r0, r16
    10f0:	00 0c       	add	r0, r0
    10f2:	11 0b       	sbc	r17, r17
    10f4:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <pacman_direction>
    10f8:	c8 01       	movw	r24, r16
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <move_ghost+0x18a>
    10fe:	95 95       	asr	r25
    1100:	87 95       	ror	r24
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <move_ghost+0x186>
    1106:	80 ff       	sbrs	r24, 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <move_ghost+0x196>
				// That direction is one of the valid options
				return pacman_direction;
    110a:	d2 2f       	mov	r29, r18
    110c:	52 c0       	rjmp	.+164    	; 0x11b2 <move_ghost+0x23a>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    110e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <random>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	83 70       	andi	r24, 0x03	; 3
    1118:	99 27       	eor	r25, r25
    111a:	aa 27       	eor	r26, r26
    111c:	b0 78       	andi	r27, 0x80	; 128
    111e:	bb 23       	and	r27, r27
    1120:	54 f4       	brge	.+20     	; 0x1136 <move_ghost+0x1be>
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	a1 09       	sbc	r26, r1
    1126:	b1 09       	sbc	r27, r1
    1128:	8c 6f       	ori	r24, 0xFC	; 252
    112a:	9f 6f       	ori	r25, 0xFF	; 255
    112c:	af 6f       	ori	r26, 0xFF	; 255
    112e:	bf 6f       	ori	r27, 0xFF	; 255
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	a1 1d       	adc	r26, r1
    1134:	b1 1d       	adc	r27, r1
    1136:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1138:	68 2f       	mov	r22, r24
    113a:	88 0f       	add	r24, r24
    113c:	77 0b       	sbc	r23, r23
    113e:	9b 01       	movw	r18, r22
    1140:	23 70       	andi	r18, 0x03	; 3
    1142:	30 78       	andi	r19, 0x80	; 128
    1144:	33 23       	and	r19, r19
    1146:	34 f4       	brge	.+12     	; 0x1154 <move_ghost+0x1dc>
    1148:	21 50       	subi	r18, 0x01	; 1
    114a:	31 09       	sbc	r19, r1
    114c:	2c 6f       	ori	r18, 0xFC	; 252
    114e:	3f 6f       	ori	r19, 0xFF	; 255
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    1154:	c8 01       	movw	r24, r16
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <move_ghost+0x1e6>
    115a:	95 95       	asr	r25
    115c:	87 95       	ror	r24
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <move_ghost+0x1e2>
    1162:	80 fd       	sbrc	r24, 0
    1164:	23 c0       	rjmp	.+70     	; 0x11ac <move_ghost+0x234>
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	04 2e       	mov	r0, r20
    116c:	00 0c       	add	r0, r0
    116e:	55 0b       	sbc	r21, r21
    1170:	4c 5f       	subi	r20, 0xFC	; 252
    1172:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1174:	cb 01       	movw	r24, r22
    1176:	83 70       	andi	r24, 0x03	; 3
    1178:	90 78       	andi	r25, 0x80	; 128
    117a:	99 23       	and	r25, r25
    117c:	24 f4       	brge	.+8      	; 0x1186 <move_ghost+0x20e>
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	8c 6f       	ori	r24, 0xFC	; 252
    1182:	9f 6f       	ori	r25, 0xFF	; 255
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    1188:	f8 01       	movw	r30, r16
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <move_ghost+0x218>
    118c:	f5 95       	asr	r31
    118e:	e7 95       	ror	r30
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <move_ghost+0x214>
    1194:	e0 fd       	sbrc	r30, 0
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <move_ghost+0x238>
    1198:	6f 5f       	subi	r22, 0xFF	; 255
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    119c:	64 17       	cp	r22, r20
    119e:	75 07       	cpc	r23, r21
    11a0:	49 f7       	brne	.-46     	; 0x1174 <move_ghost+0x1fc>
    11a2:	d6 c0       	rjmp	.+428    	; 0x1350 <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    11a4:	d8 2f       	mov	r29, r24
    11a6:	05 c0       	rjmp	.+10     	; 0x11b2 <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    11a8:	d2 2f       	mov	r29, r18
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <move_ghost+0x23a>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    11ac:	d2 2f       	mov	r29, r18
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <move_ghost+0x23a>
    11b0:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    11b2:	dd 23       	and	r29, r29
    11b4:	0c f4       	brge	.+2      	; 0x11b8 <move_ghost+0x240>
    11b6:	cc c0       	rjmp	.+408    	; 0x1350 <move_ghost+0x3d8>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    11b8:	0c 2f       	mov	r16, r28
    11ba:	0c 2e       	mov	r0, r28
    11bc:	00 0c       	add	r0, r0
    11be:	11 0b       	sbc	r17, r17
    11c0:	d8 01       	movw	r26, r16
    11c2:	a7 57       	subi	r26, 0x77	; 119
    11c4:	be 4f       	sbci	r27, 0xFE	; 254
    11c6:	f8 01       	movw	r30, r16
    11c8:	e3 57       	subi	r30, 0x73	; 115
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	6c 91       	ld	r22, X
    11ce:	80 81       	ld	r24, Z
    11d0:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    11d4:	f8 01       	movw	r30, r16
    11d6:	eb 57       	subi	r30, 0x7B	; 123
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    11dc:	d1 30       	cpi	r29, 0x01	; 1
    11de:	b9 f0       	breq	.+46     	; 0x120e <move_ghost+0x296>
    11e0:	1c f4       	brge	.+6      	; 0x11e8 <move_ghost+0x270>
    11e2:	dd 23       	and	r29, r29
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <move_ghost+0x27a>
    11e6:	20 c0       	rjmp	.+64     	; 0x1228 <move_ghost+0x2b0>
    11e8:	d2 30       	cpi	r29, 0x02	; 2
    11ea:	51 f0       	breq	.+20     	; 0x1200 <move_ghost+0x288>
    11ec:	d3 30       	cpi	r29, 0x03	; 3
    11ee:	b1 f0       	breq	.+44     	; 0x121c <move_ghost+0x2a4>
    11f0:	1b c0       	rjmp	.+54     	; 0x1228 <move_ghost+0x2b0>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    11f2:	f8 01       	movw	r30, r16
    11f4:	e3 57       	subi	r30, 0x73	; 115
    11f6:	fe 4f       	sbci	r31, 0xFE	; 254
    11f8:	80 81       	ld	r24, Z
    11fa:	81 50       	subi	r24, 0x01	; 1
    11fc:	80 83       	st	Z, r24
			break;
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <move_ghost+0x2b0>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    1200:	f8 01       	movw	r30, r16
    1202:	e3 57       	subi	r30, 0x73	; 115
    1204:	fe 4f       	sbci	r31, 0xFE	; 254
    1206:	80 81       	ld	r24, Z
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 83       	st	Z, r24
			break;
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <move_ghost+0x2b0>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    120e:	f8 01       	movw	r30, r16
    1210:	e7 57       	subi	r30, 0x77	; 119
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	80 81       	ld	r24, Z
    1216:	81 50       	subi	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
			break;
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <move_ghost+0x2b0>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    121c:	f8 01       	movw	r30, r16
    121e:	e7 57       	subi	r30, 0x77	; 119
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	80 81       	ld	r24, Z
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    1228:	f8 01       	movw	r30, r16
    122a:	e7 57       	subi	r30, 0x77	; 119
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	40 81       	ld	r20, Z
    1230:	f8 01       	movw	r30, r16
    1232:	e3 57       	subi	r30, 0x73	; 115
    1234:	fe 4f       	sbci	r31, 0xFE	; 254
    1236:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    1238:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <pacman_x>
    123c:	68 13       	cpse	r22, r24
    123e:	31 c0       	rjmp	.+98     	; 0x12a2 <move_ghost+0x32a>
    1240:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <pacman_y>
    1244:	48 13       	cpse	r20, r24
    1246:	2d c0       	rjmp	.+90     	; 0x12a2 <move_ghost+0x32a>
    1248:	19 c0       	rjmp	.+50     	; 0x127c <move_ghost+0x304>
		set_display_attribute(ghost_colours[ghostnum]);
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
    124a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <normal_display_mode>
    124e:	80 c0       	rjmp	.+256    	; 0x1350 <move_ghost+0x3d8>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    1250:	c1 30       	cpi	r28, 0x01	; 1
    1252:	09 f4       	brne	.+2      	; 0x1256 <move_ghost+0x2de>
    1254:	0c cf       	rjmp	.-488    	; 0x106e <move_ghost+0xf6>
    1256:	24 f4       	brge	.+8      	; 0x1260 <move_ghost+0x2e8>
    1258:	cc 23       	and	r28, r28
    125a:	09 f4       	brne	.+2      	; 0x125e <move_ghost+0x2e6>
    125c:	b7 ce       	rjmp	.-658    	; 0xfcc <move_ghost+0x54>
    125e:	78 c0       	rjmp	.+240    	; 0x1350 <move_ghost+0x3d8>
    1260:	c2 30       	cpi	r28, 0x02	; 2
    1262:	09 f4       	brne	.+2      	; 0x1266 <move_ghost+0x2ee>
    1264:	44 cf       	rjmp	.-376    	; 0x10ee <move_ghost+0x176>
    1266:	c3 30       	cpi	r28, 0x03	; 3
    1268:	09 f4       	brne	.+2      	; 0x126c <move_ghost+0x2f4>
    126a:	01 cf       	rjmp	.-510    	; 0x106e <move_ghost+0xf6>
    126c:	71 c0       	rjmp	.+226    	; 0x1350 <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    126e:	68 2f       	mov	r22, r24
    1270:	08 2e       	mov	r0, r24
    1272:	00 0c       	add	r0, r0
    1274:	77 0b       	sbc	r23, r23
    1276:	80 ff       	sbrs	r24, 0
    1278:	ea ce       	rjmp	.-556    	; 0x104e <move_ghost+0xd6>
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <move_ghost+0x33a>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		// Ghost has just moved into the pac-man. Game is over
		game_running = 0;
    127c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <game_running>
		// We draw the background colour for the
		// ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    1280:	f8 01       	movw	r30, r16
    1282:	e0 59       	subi	r30, 0x90	; 144
    1284:	fe 4f       	sbci	r31, 0xFE	; 254
    1286:	80 81       	ld	r24, Z
    1288:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    128c:	d8 01       	movw	r26, r16
    128e:	a7 57       	subi	r26, 0x77	; 119
    1290:	be 4f       	sbci	r27, 0xFE	; 254
    1292:	f8 01       	movw	r30, r16
    1294:	e3 57       	subi	r30, 0x73	; 115
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	6c 91       	ld	r22, X
    129a:	80 81       	ld	r24, Z
    129c:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
    12a0:	d4 cf       	rjmp	.-88     	; 0x124a <move_ghost+0x2d2>
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    12a2:	8c 2f       	mov	r24, r28
    12a4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
    12a8:	d0 cf       	rjmp	.-96     	; 0x124a <move_ghost+0x2d2>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    12aa:	68 2f       	mov	r22, r24
    12ac:	88 0f       	add	r24, r24
    12ae:	77 0b       	sbc	r23, r23
    12b0:	ce ce       	rjmp	.-612    	; 0x104e <move_ghost+0xd6>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    12b2:	0c 2f       	mov	r16, r28
    12b4:	0c 2e       	mov	r0, r28
    12b6:	00 0c       	add	r0, r0
    12b8:	11 0b       	sbc	r17, r17
    12ba:	d8 01       	movw	r26, r16
    12bc:	a7 57       	subi	r26, 0x77	; 119
    12be:	be 4f       	sbci	r27, 0xFE	; 254
    12c0:	f8 01       	movw	r30, r16
    12c2:	e3 57       	subi	r30, 0x73	; 115
    12c4:	fe 4f       	sbci	r31, 0xFE	; 254
    12c6:	6c 91       	ld	r22, X
    12c8:	80 81       	ld	r24, Z
    12ca:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    12ce:	f8 01       	movw	r30, r16
    12d0:	eb 57       	subi	r30, 0x7B	; 123
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	10 82       	st	Z, r1
    12d6:	8d cf       	rjmp	.-230    	; 0x11f2 <move_ghost+0x27a>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    12d8:	0c 2f       	mov	r16, r28
    12da:	0c 2e       	mov	r0, r28
    12dc:	00 0c       	add	r0, r0
    12de:	11 0b       	sbc	r17, r17
    12e0:	d8 01       	movw	r26, r16
    12e2:	a7 57       	subi	r26, 0x77	; 119
    12e4:	be 4f       	sbci	r27, 0xFE	; 254
    12e6:	f8 01       	movw	r30, r16
    12e8:	e3 57       	subi	r30, 0x73	; 115
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	6c 91       	ld	r22, X
    12ee:	80 81       	ld	r24, Z
    12f0:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    12f4:	f8 01       	movw	r30, r16
    12f6:	eb 57       	subi	r30, 0x7B	; 123
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	80 83       	st	Z, r24
    12fe:	80 cf       	rjmp	.-256    	; 0x1200 <move_ghost+0x288>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1300:	0c 2f       	mov	r16, r28
    1302:	0c 2e       	mov	r0, r28
    1304:	00 0c       	add	r0, r0
    1306:	11 0b       	sbc	r17, r17
    1308:	d8 01       	movw	r26, r16
    130a:	a7 57       	subi	r26, 0x77	; 119
    130c:	be 4f       	sbci	r27, 0xFE	; 254
    130e:	f8 01       	movw	r30, r16
    1310:	e3 57       	subi	r30, 0x73	; 115
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	6c 91       	ld	r22, X
    1316:	80 81       	ld	r24, Z
    1318:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    131c:	f8 01       	movw	r30, r16
    131e:	eb 57       	subi	r30, 0x7B	; 123
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 83       	st	Z, r24
    1326:	73 cf       	rjmp	.-282    	; 0x120e <move_ghost+0x296>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1328:	0c 2f       	mov	r16, r28
    132a:	0c 2e       	mov	r0, r28
    132c:	00 0c       	add	r0, r0
    132e:	11 0b       	sbc	r17, r17
    1330:	d8 01       	movw	r26, r16
    1332:	a7 57       	subi	r26, 0x77	; 119
    1334:	be 4f       	sbci	r27, 0xFE	; 254
    1336:	f8 01       	movw	r30, r16
    1338:	e3 57       	subi	r30, 0x73	; 115
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	6c 91       	ld	r22, X
    133e:	80 81       	ld	r24, Z
    1340:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1344:	f8 01       	movw	r30, r16
    1346:	eb 57       	subi	r30, 0x7B	; 123
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	80 83       	st	Z, r24
    134e:	66 cf       	rjmp	.-308    	; 0x121c <move_ghost+0x2a4>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
}
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	08 95       	ret

0000135c <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <game_running>
    1362:	91 11       	cpse	r25, r1
    1364:	80 e0       	ldi	r24, 0x00	; 0
}
    1366:	08 95       	ret

00001368 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <num_pacdots>
    136e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <num_pacdots+0x1>
    1372:	23 2b       	or	r18, r19
    1374:	09 f0       	breq	.+2      	; 0x1378 <is_level_complete+0x10>
    1376:	80 e0       	ldi	r24, 0x00	; 0
}
    1378:	08 95       	ret

0000137a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    137a:	80 e8       	ldi	r24, 0x80	; 128
    137c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <spi_setup_master>
    1380:	08 95       	ret

00001382 <ledmatrix_update_column>:
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	80 31       	cpi	r24, 0x10	; 16
    138c:	90 f4       	brcc	.+36     	; 0x13b2 <ledmatrix_update_column+0x30>
    138e:	8b 01       	movw	r16, r22
    1390:	c8 2f       	mov	r28, r24
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    1398:	8c 2f       	mov	r24, r28
    139a:	8f 70       	andi	r24, 0x0F	; 15
    139c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    13a0:	e8 01       	movw	r28, r16
    13a2:	08 5f       	subi	r16, 0xF8	; 248
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	89 91       	ld	r24, Y+
    13a8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    13ac:	c0 17       	cp	r28, r16
    13ae:	d1 07       	cpc	r29, r17
    13b0:	d1 f7       	brne	.-12     	; 0x13a6 <ledmatrix_update_column+0x24>
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <ledmatrix_shift_display_left>:
    13bc:	84 e0       	ldi	r24, 0x04	; 4
    13be:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    13c8:	08 95       	ret

000013ca <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    13ca:	8f e0       	ldi	r24, 0x0F	; 15
    13cc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <spi_send_byte>
    13d0:	08 95       	ret

000013d2 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    13d2:	0e 94 bd 09 	call	0x137a	; 0x137a <ledmatrix_setup>
	init_button_interrupts();
    13d6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	7b e4       	ldi	r23, 0x4B	; 75
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 a5 0c 	call	0x194a	; 0x194a <init_serial_stdio>
	
	init_timer0();
    13e8:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <init_timer0>
	
	// Turn on global interrupts
	sei();
    13ec:	78 94       	sei
    13ee:	08 95       	ret

000013f0 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    13f0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <clear_terminal>
	move_cursor(10,10);
    13f4:	6a e0       	ldi	r22, 0x0A	; 10
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("Pac-Man"));
    1400:	8c e8       	ldi	r24, 0x8C	; 140
    1402:	95 e0       	ldi	r25, 0x05	; 5
    1404:	9f 93       	push	r25
    1406:	8f 93       	push	r24
    1408:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	move_cursor(10,12);
    140c:	6c e0       	ldi	r22, 0x0C	; 12
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("CSSE2010 project by <Juan Espares>"));
    1418:	89 e6       	ldi	r24, 0x69	; 105
    141a:	95 e0       	ldi	r25, 0x05	; 5
    141c:	9f 93       	push	r25
    141e:	8f 93       	push	r24
    1420:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	move_cursor(10,14); 
    1424:	6e e0       	ldi	r22, 0x0E	; 14
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	8a e0       	ldi	r24, 0x0A	; 10
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("Student Number: 44317962")) ; 
    1430:	80 e5       	ldi	r24, 0x50	; 80
    1432:	95 e0       	ldi	r25, 0x05	; 5
    1434:	9f 93       	push	r25
    1436:	8f 93       	push	r24
    1438:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    143c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ledmatrix_clear>
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("44317962", COLOUR_GREEN);
    144c:	60 ef       	ldi	r22, 0xF0	; 240
    144e:	84 e7       	ldi	r24, 0x74	; 116
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1456:	10 c0       	rjmp	.+32     	; 0x1478 <splash_screen+0x88>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1458:	2f e7       	ldi	r18, 0x7F	; 127
    145a:	89 ea       	ldi	r24, 0xA9	; 169
    145c:	93 e0       	ldi	r25, 0x03	; 3
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	80 40       	sbci	r24, 0x00	; 0
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <splash_screen+0x6e>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <splash_screen+0x78>
    1468:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    146a:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    146e:	8f 3f       	cpi	r24, 0xFF	; 255
    1470:	19 f0       	breq	.+6      	; 0x1478 <splash_screen+0x88>
				ledmatrix_clear();
    1472:	0e 94 e5 09 	call	0x13ca	; 0x13ca <ledmatrix_clear>
				return;
    1476:	08 95       	ret
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("44317962", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1478:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <scroll_display>
    147c:	81 11       	cpse	r24, r1
    147e:	ec cf       	rjmp	.-40     	; 0x1458 <splash_screen+0x68>
    1480:	e5 cf       	rjmp	.-54     	; 0x144c <splash_screen+0x5c>

00001482 <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    1482:	0e 94 df 06 	call	0xdbe	; 0xdbe <initialise_game>
	
	// Initialise the score
	init_score();
    1486:	0e 94 65 0b 	call	0x16ca	; 0x16ca <init_score>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    148a:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
	clear_serial_input_buffer();
    148e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <clear_serial_input_buffer>
    1492:	08 95       	ret

00001494 <handle_level_complete>:
	}
	// We get here if the game is over.
}

void handle_level_complete(void) {
	move_cursor(35,10);
    1494:	6a e0       	ldi	r22, 0x0A	; 10
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	83 e2       	ldi	r24, 0x23	; 35
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("Level complete"));
    14a0:	81 e4       	ldi	r24, 0x41	; 65
    14a2:	95 e0       	ldi	r25, 0x05	; 5
    14a4:	9f 93       	push	r25
    14a6:	8f 93       	push	r24
    14a8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	move_cursor(35,11);
    14ac:	6b e0       	ldi	r22, 0x0B	; 11
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	83 e2       	ldi	r24, 0x23	; 35
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("Push a button or key to continue"));
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	95 e0       	ldi	r25, 0x05	; 5
    14bc:	9f 93       	push	r25
    14be:	8f 93       	push	r24
    14c0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	// Clear any characters in the serial input buffer - to make
	// sure we only use key presses from now on.
	clear_serial_input_buffer();
    14c4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <clear_serial_input_buffer>
	while(button_pushed() == NO_BUTTON_PUSHED && !serial_input_available()) {
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    14d4:	8f 3f       	cpi	r24, 0xFF	; 255
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <handle_level_complete+0x4c>
    14d8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <serial_input_available>
    14dc:	88 23       	and	r24, r24
    14de:	c1 f3       	breq	.-16     	; 0x14d0 <handle_level_complete+0x3c>
		; // wait
	}
	// Throw away any characters in the serial input buffer
	clear_serial_input_buffer();
    14e0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <clear_serial_input_buffer>
    14e4:	08 95       	ret

000014e6 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    14e6:	3f 92       	push	r3
    14e8:	4f 92       	push	r4
    14ea:	5f 92       	push	r5
    14ec:	6f 92       	push	r6
    14ee:	7f 92       	push	r7
    14f0:	8f 92       	push	r8
    14f2:	9f 92       	push	r9
    14f4:	af 92       	push	r10
    14f6:	bf 92       	push	r11
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    1508:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <get_current_time>
    150c:	4b 01       	movw	r8, r22
    150e:	5c 01       	movw	r10, r24
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
    1510:	2b 01       	movw	r4, r22
    1512:	3c 01       	movw	r6, r24
	uint32_t current_time;
	uint32_t pacman_last_move_time;
	uint32_t ghost_last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1514:	00 e0       	ldi	r16, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1516:	33 24       	eor	r3, r3
    1518:	3a 94       	dec	r3
		
		if(button == NO_BUTTON_PUSHED) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    151a:	c6 e3       	ldi	r28, 0x36	; 54
    151c:	d3 e0       	ldi	r29, 0x03	; 3
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    151e:	7e c0       	rjmp	.+252    	; 0x161c <play_game+0x136>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1520:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1524:	18 2f       	mov	r17, r24
		
		if(button == NO_BUTTON_PUSHED) {
    1526:	8f 3f       	cpi	r24, 0xFF	; 255
    1528:	09 f0       	breq	.+2      	; 0x152c <play_game+0x46>
    152a:	84 c0       	rjmp	.+264    	; 0x1634 <play_game+0x14e>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    152c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <serial_input_available>
    1530:	88 23       	and	r24, r24
    1532:	89 f1       	breq	.+98     	; 0x1596 <play_game+0xb0>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1534:	88 81       	ld	r24, Y
    1536:	99 81       	ldd	r25, Y+1	; 0x01
    1538:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    153c:	01 11       	cpse	r16, r1
    153e:	05 c0       	rjmp	.+10     	; 0x154a <play_game+0x64>
    1540:	8b 31       	cpi	r24, 0x1B	; 27
    1542:	09 f4       	brne	.+2      	; 0x1546 <play_game+0x60>
    1544:	71 c0       	rjmp	.+226    	; 0x1628 <play_game+0x142>
    1546:	83 2d       	mov	r24, r3
    1548:	0a c0       	rjmp	.+20     	; 0x155e <play_game+0x78>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    154a:	01 30       	cpi	r16, 0x01	; 1
    154c:	29 f4       	brne	.+10     	; 0x1558 <play_game+0x72>
    154e:	8b 35       	cpi	r24, 0x5B	; 91
    1550:	09 f4       	brne	.+2      	; 0x1554 <play_game+0x6e>
    1552:	6c c0       	rjmp	.+216    	; 0x162c <play_game+0x146>
    1554:	83 2d       	mov	r24, r3
    1556:	03 c0       	rjmp	.+6      	; 0x155e <play_game+0x78>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1558:	02 30       	cpi	r16, 0x02	; 2
    155a:	09 f0       	breq	.+2      	; 0x155e <play_game+0x78>
    155c:	69 c0       	rjmp	.+210    	; 0x1630 <play_game+0x14a>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='A') {
    155e:	81 34       	cpi	r24, 0x41	; 65
    1560:	09 f0       	breq	.+2      	; 0x1564 <play_game+0x7e>
    1562:	6b c0       	rjmp	.+214    	; 0x163a <play_game+0x154>
    1564:	00 e0       	ldi	r16, 0x00	; 0
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 9a 07 	call	0xf34	; 0xf34 <change_pacman_direction>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <play_game+0xb0>
    156e:	00 e0       	ldi	r16, 0x00	; 0
		} else if(button==2 || escape_sequence_char=='W') {
			// Button 2 pressed or up cursor key escape sequence completed
			// Attempt to move up 
			change_pacman_direction(DIRN_UP);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	0e 94 9a 07 	call	0xf34	; 0xf34 <change_pacman_direction>
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <play_game+0xb0>
		} else if(button==1 || escape_sequence_char=='S') {
    1578:	11 30       	cpi	r17, 0x01	; 1
    157a:	11 f0       	breq	.+4      	; 0x1580 <play_game+0x9a>
    157c:	83 35       	cpi	r24, 0x53	; 83
    157e:	21 f4       	brne	.+8      	; 0x1588 <play_game+0xa2>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Attempt to move down
			change_pacman_direction(DIRN_DOWN); 
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	0e 94 9a 07 	call	0xf34	; 0xf34 <change_pacman_direction>
    1586:	07 c0       	rjmp	.+14     	; 0x1596 <play_game+0xb0>
		} else if(button==0 || escape_sequence_char=='D') {
    1588:	11 23       	and	r17, r17
    158a:	11 f0       	breq	.+4      	; 0x1590 <play_game+0xaa>
    158c:	84 34       	cpi	r24, 0x44	; 68
    158e:	19 f4       	brne	.+6      	; 0x1596 <play_game+0xb0>
			// Button 0 pressed OR right cursor key escape sequence completed 
			// Attempt to move right
			change_pacman_direction(DIRN_RIGHT);
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	0e 94 9a 07 	call	0xf34	; 0xf34 <change_pacman_direction>
			// pressed again
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    1596:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <get_current_time>
    159a:	6b 01       	movw	r12, r22
    159c:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
    159e:	0e 94 ae 09 	call	0x135c	; 0x135c <is_game_over>
    15a2:	81 11       	cpse	r24, r1
    15a4:	1e c0       	rjmp	.+60     	; 0x15e2 <play_game+0xfc>
    15a6:	d5 01       	movw	r26, r10
    15a8:	c4 01       	movw	r24, r8
    15aa:	80 57       	subi	r24, 0x70	; 112
    15ac:	9e 4f       	sbci	r25, 0xFE	; 254
    15ae:	af 4f       	sbci	r26, 0xFF	; 255
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	c8 16       	cp	r12, r24
    15b4:	d9 06       	cpc	r13, r25
    15b6:	ea 06       	cpc	r14, r26
    15b8:	fb 06       	cpc	r15, r27
    15ba:	98 f0       	brcs	.+38     	; 0x15e2 <play_game+0xfc>
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
    15bc:	0e 94 e5 06 	call	0xdca	; 0xdca <move_pacman>
			pacman_last_move_time = current_time;
			
			// Check if the move finished the level - and restart if so
			if(is_level_complete()) {
    15c0:	0e 94 b4 09 	call	0x1368	; 0x1368 <is_level_complete>
    15c4:	88 23       	and	r24, r24
    15c6:	59 f0       	breq	.+22     	; 0x15de <play_game+0xf8>
				handle_level_complete();	// This will pause until a button is pushed
    15c8:	0e 94 4a 0a 	call	0x1494	; 0x1494 <handle_level_complete>
				initialise_game_level();
    15cc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <initialise_game_level>
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
    15d0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <get_current_time>
    15d4:	4b 01       	movw	r8, r22
    15d6:	5c 01       	movw	r10, r24
    15d8:	2b 01       	movw	r4, r22
    15da:	3c 01       	movw	r6, r24
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <play_game+0xfc>
		current_time = get_current_time();
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
			pacman_last_move_time = current_time;
    15de:	46 01       	movw	r8, r12
    15e0:	57 01       	movw	r10, r14
				initialise_game_level();
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
			}
		}
		if(!is_game_over() && current_time >= ghost_last_move_time + 500) {
    15e2:	0e 94 ae 09 	call	0x135c	; 0x135c <is_game_over>
    15e6:	81 11       	cpse	r24, r1
    15e8:	19 c0       	rjmp	.+50     	; 0x161c <play_game+0x136>
    15ea:	d3 01       	movw	r26, r6
    15ec:	c2 01       	movw	r24, r4
    15ee:	8c 50       	subi	r24, 0x0C	; 12
    15f0:	9e 4f       	sbci	r25, 0xFE	; 254
    15f2:	af 4f       	sbci	r26, 0xFF	; 255
    15f4:	bf 4f       	sbci	r27, 0xFF	; 255
    15f6:	c8 16       	cp	r12, r24
    15f8:	d9 06       	cpc	r13, r25
    15fa:	ea 06       	cpc	r14, r26
    15fc:	fb 06       	cpc	r15, r27
    15fe:	70 f0       	brcs	.+28     	; 0x161c <play_game+0x136>
			// 500ms (0.5 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(0);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	0e 94 bc 07 	call	0xf78	; 0xf78 <move_ghost>
			move_ghost(1);
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0e 94 bc 07 	call	0xf78	; 0xf78 <move_ghost>
			move_ghost(2);
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	0e 94 bc 07 	call	0xf78	; 0xf78 <move_ghost>
			move_ghost(3);
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	0e 94 bc 07 	call	0xf78	; 0xf78 <move_ghost>
			ghost_last_move_time = current_time;
    1618:	26 01       	movw	r4, r12
    161a:	37 01       	movw	r6, r14
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    161c:	0e 94 ae 09 	call	0x135c	; 0x135c <is_game_over>
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <play_game+0x140>
    1624:	7d cf       	rjmp	.-262    	; 0x1520 <play_game+0x3a>
    1626:	13 c0       	rjmp	.+38     	; 0x164e <play_game+0x168>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1628:	01 e0       	ldi	r16, 0x01	; 1
    162a:	b5 cf       	rjmp	.-150    	; 0x1596 <play_game+0xb0>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    162c:	02 e0       	ldi	r16, 0x02	; 2
    162e:	b3 cf       	rjmp	.-154    	; 0x1596 <play_game+0xb0>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1630:	00 e0       	ldi	r16, 0x00	; 0
    1632:	b1 cf       	rjmp	.-158    	; 0x1596 <play_game+0xb0>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='A') {
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	31 f4       	brne	.+12     	; 0x1644 <play_game+0x15e>
    1638:	96 cf       	rjmp	.-212    	; 0x1566 <play_game+0x80>
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if(button==2 || escape_sequence_char=='W') {
    163a:	87 35       	cpi	r24, 0x57	; 87
    163c:	09 f4       	brne	.+2      	; 0x1640 <play_game+0x15a>
    163e:	97 cf       	rjmp	.-210    	; 0x156e <play_game+0x88>
    1640:	00 e0       	ldi	r16, 0x00	; 0
    1642:	9a cf       	rjmp	.-204    	; 0x1578 <play_game+0x92>
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	09 f4       	brne	.+2      	; 0x164a <play_game+0x164>
    1648:	93 cf       	rjmp	.-218    	; 0x1570 <play_game+0x8a>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    164a:	83 2d       	mov	r24, r3
    164c:	95 cf       	rjmp	.-214    	; 0x1578 <play_game+0x92>
			move_ghost(3);
			ghost_last_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	7f 90       	pop	r7
    1668:	6f 90       	pop	r6
    166a:	5f 90       	pop	r5
    166c:	4f 90       	pop	r4
    166e:	3f 90       	pop	r3
    1670:	08 95       	ret

00001672 <handle_game_over>:
	clear_serial_input_buffer();

}

void handle_game_over(void) {
	move_cursor(35,14);
    1672:	6e e0       	ldi	r22, 0x0E	; 14
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	83 e2       	ldi	r24, 0x23	; 35
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    167e:	86 e1       	ldi	r24, 0x16	; 22
    1680:	95 e0       	ldi	r25, 0x05	; 5
    1682:	9f 93       	push	r25
    1684:	8f 93       	push	r24
    1686:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	move_cursor(35,16);
    168a:	60 e1       	ldi	r22, 0x10	; 16
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	83 e2       	ldi	r24, 0x23	; 35
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1696:	88 ef       	ldi	r24, 0xF8	; 248
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	9f 93       	push	r25
    169c:	8f 93       	push	r24
    169e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	e1 f3       	breq	.-8      	; 0x16aa <handle_game_over+0x38>
		; // wait
	}
	
}
    16b2:	08 95       	ret

000016b4 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    16b4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    16b8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <splash_screen>
	
	while(1) {
		new_game();
    16bc:	0e 94 41 0a 	call	0x1482	; 0x1482 <new_game>
		play_game();
    16c0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <play_game>
		handle_game_over();
    16c4:	0e 94 39 0b 	call	0x1672	; 0x1672 <handle_game_over>
    16c8:	f9 cf       	rjmp	.-14     	; 0x16bc <main+0x8>

000016ca <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    16ca:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <score>
    16ce:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <score+0x1>
    16d2:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <score+0x2>
    16d6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <score+0x3>
    16da:	08 95       	ret

000016dc <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    16dc:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    16e0:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <display_string+0x1>
    16e4:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <display_string>
	next_col_ptr = 0;
    16e8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <next_col_ptr+0x1>
    16ec:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <next_col_ptr>
	next_char_to_display = 0;
    16f0:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <next_char_to_display+0x1>
    16f4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <next_char_to_display>
    16f8:	08 95       	ret

000016fa <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	28 97       	sbiw	r28, 0x08	; 8
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1712:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <next_col_ptr>
    1716:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <next_col_ptr+0x1>
    171a:	30 97       	sbiw	r30, 0x00	; 0
    171c:	81 f0       	breq	.+32     	; 0x173e <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    171e:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1720:	10 ff       	sbrs	r17, 0
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1724:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <next_col_ptr+0x1>
    1728:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    172c:	00 e0       	ldi	r16, 0x00	; 0
    172e:	6b c0       	rjmp	.+214    	; 0x1806 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <next_col_ptr+0x1>
    1736:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    173a:	00 e0       	ldi	r16, 0x00	; 0
    173c:	64 c0       	rjmp	.+200    	; 0x1806 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    173e:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <next_char_to_display>
    1742:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <next_char_to_display+0x1>
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f4       	brne	.+2      	; 0x174c <scroll_display+0x52>
    174a:	49 c0       	rjmp	.+146    	; 0x17de <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    174c:	cf 01       	movw	r24, r30
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <next_char_to_display+0x1>
    1754:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <next_char_to_display>
    1758:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    175a:	e1 11       	cpse	r30, r1
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    175e:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <next_char_to_display+0x1>
    1762:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <next_char_to_display>
			shift_countdown = 16;
    1766:	80 e1       	ldi	r24, 0x10	; 16
    1768:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    176c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    176e:	10 e0       	ldi	r17, 0x00	; 0
    1770:	4a c0       	rjmp	.+148    	; 0x1806 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1772:	8f e9       	ldi	r24, 0x9F	; 159
    1774:	8e 0f       	add	r24, r30
    1776:	8a 31       	cpi	r24, 0x1A	; 26
    1778:	70 f4       	brcc	.+28     	; 0x1796 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ea 51       	subi	r30, 0x1A	; 26
    1782:	fb 4f       	sbci	r31, 0xFB	; 251
    1784:	85 91       	lpm	r24, Z+
    1786:	94 91       	lpm	r25, Z
    1788:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <next_col_ptr+0x1>
    178c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1790:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1792:	10 e0       	ldi	r17, 0x00	; 0
    1794:	38 c0       	rjmp	.+112    	; 0x1806 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1796:	8f eb       	ldi	r24, 0xBF	; 191
    1798:	8e 0f       	add	r24, r30
    179a:	8a 31       	cpi	r24, 0x1A	; 26
    179c:	70 f4       	brcc	.+28     	; 0x17ba <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	ea 5d       	subi	r30, 0xDA	; 218
    17a6:	fa 4f       	sbci	r31, 0xFA	; 250
    17a8:	85 91       	lpm	r24, Z+
    17aa:	94 91       	lpm	r25, Z
    17ac:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <next_col_ptr+0x1>
    17b0:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17b4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17b6:	10 e0       	ldi	r17, 0x00	; 0
    17b8:	26 c0       	rjmp	.+76     	; 0x1806 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    17ba:	80 ed       	ldi	r24, 0xD0	; 208
    17bc:	8e 0f       	add	r24, r30
    17be:	8a 30       	cpi	r24, 0x0A	; 10
    17c0:	00 f5       	brcc	.+64     	; 0x1802 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	ec 5c       	subi	r30, 0xCC	; 204
    17ca:	fa 4f       	sbci	r31, 0xFA	; 250
    17cc:	85 91       	lpm	r24, Z+
    17ce:	94 91       	lpm	r25, Z
    17d0:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <next_col_ptr+0x1>
    17d4:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17d8:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17da:	10 e0       	ldi	r17, 0x00	; 0
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    17de:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <display_string>
    17e2:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17e6:	01 e0       	ldi	r16, 0x01	; 1
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	09 f0       	breq	.+2      	; 0x17ee <scroll_display+0xf4>
    17ec:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    17ee:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <next_char_to_display+0x1>
    17f2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <next_char_to_display>
		display_string = 0;
    17f6:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <display_string+0x1>
    17fa:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1802:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1804:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1806:	0e 94 de 09 	call	0x13bc	; 0x13bc <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    180a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    180e:	fe 01       	movw	r30, r28
    1810:	38 96       	adiw	r30, 0x08	; 8
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1816:	11 23       	and	r17, r17
    1818:	14 f4       	brge	.+4      	; 0x181e <scroll_display+0x124>
			column_colour_data[i] = colour;
    181a:	20 83       	st	Z, r18
    181c:	01 c0       	rjmp	.+2      	; 0x1820 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    181e:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1820:	11 0f       	add	r17, r17
    1822:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1824:	e8 17       	cp	r30, r24
    1826:	f9 07       	cpc	r31, r25
    1828:	b1 f7       	brne	.-20     	; 0x1816 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    182a:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    182c:	be 01       	movw	r22, r28
    182e:	6f 5f       	subi	r22, 0xFF	; 255
    1830:	7f 4f       	sbci	r23, 0xFF	; 255
    1832:	8f e0       	ldi	r24, 0x0F	; 15
    1834:	0e 94 c1 09 	call	0x1382	; 0x1382 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1838:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <shift_countdown.1854>
    183c:	88 23       	and	r24, r24
    183e:	89 f0       	breq	.+34     	; 0x1862 <scroll_display+0x168>
		shift_countdown--;
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1846:	00 23       	and	r16, r16
    1848:	11 f0       	breq	.+4      	; 0x184e <scroll_display+0x154>
    184a:	88 23       	and	r24, r24
    184c:	11 f0       	breq	.+4      	; 0x1852 <scroll_display+0x158>
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <scroll_display+0x15e>
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <scroll_display+0x15e>
    1856:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	99 23       	and	r25, r25
    185c:	29 f0       	breq	.+10     	; 0x1868 <scroll_display+0x16e>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1862:	00 23       	and	r16, r16
    1864:	a1 f3       	breq	.-24     	; 0x184e <scroll_display+0x154>
    1866:	f7 cf       	rjmp	.-18     	; 0x1856 <scroll_display+0x15c>
	return !finished;
}
    1868:	28 96       	adiw	r28, 0x08	; 8
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	08 95       	ret

0000187e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    187e:	cf 93       	push	r28
    1880:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1882:	8a 30       	cpi	r24, 0x0A	; 10
    1884:	19 f4       	brne	.+6      	; 0x188c <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1886:	8d e0       	ldi	r24, 0x0D	; 13
    1888:	0e 94 3f 0c 	call	0x187e	; 0x187e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    188c:	9f b7       	in	r25, 0x3f	; 63
    188e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1892:	99 23       	and	r25, r25
    1894:	29 f1       	breq	.+74     	; 0x18e0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1896:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	d1 f3       	breq	.-12     	; 0x1892 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    189e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    18a0:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <out_insert_pos>
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	8e 0f       	add	r24, r30
    18a8:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <out_insert_pos>
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	ec 5d       	subi	r30, 0xDC	; 220
    18b0:	fd 4f       	sbci	r31, 0xFD	; 253
    18b2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    18b4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    18be:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <out_insert_pos>
    18c2:	8f 3f       	cpi	r24, 0xFF	; 255
    18c4:	11 f4       	brne	.+4      	; 0x18ca <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    18c6:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    18ca:	e1 ec       	ldi	r30, 0xC1	; 193
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 62       	ori	r24, 0x20	; 32
    18d2:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    18d4:	99 23       	and	r25, r25
    18d6:	39 f0       	breq	.+14     	; 0x18e6 <uart_put_char+0x68>
		sei();
    18d8:	78 94       	sei
	}
	return 0;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	05 c0       	rjmp	.+10     	; 0x18ea <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
}
    18ea:	cf 91       	pop	r28
    18ec:	08 95       	ret

000018ee <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    18ee:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <bytes_in_input_buffer>
    18f2:	88 23       	and	r24, r24
    18f4:	e1 f3       	breq	.-8      	; 0x18ee <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    18f6:	2f b7       	in	r18, 0x3f	; 63
    18f8:	20 78       	andi	r18, 0x80	; 128
	cli();
    18fa:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    18fc:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <input_insert_pos>
    1900:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <bytes_in_input_buffer>
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	83 1b       	sub	r24, r19
    1908:	91 09       	sbc	r25, r1
    190a:	5a f4       	brpl	.+22     	; 0x1922 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    190c:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <input_insert_pos>
    1910:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	e8 1b       	sub	r30, r24
    1918:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    191a:	ec 5c       	subi	r30, 0xCC	; 204
    191c:	fc 4f       	sbci	r31, 0xFC	; 252
    191e:	80 81       	ld	r24, Z
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1922:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <input_insert_pos>
    1926:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <bytes_in_input_buffer>
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	e8 1b       	sub	r30, r24
    192e:	f1 09       	sbc	r31, r1
    1930:	ec 5d       	subi	r30, 0xDC	; 220
    1932:	fc 4f       	sbci	r31, 0xFC	; 252
    1934:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1936:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <bytes_in_input_buffer>
    193a:	91 50       	subi	r25, 0x01	; 1
    193c:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1940:	22 23       	and	r18, r18
    1942:	09 f0       	breq	.+2      	; 0x1946 <uart_get_char+0x58>
		sei();
    1944:	78 94       	sei
	}	
	return c;
}
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	08 95       	ret

0000194a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    194a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <out_insert_pos>
	bytes_in_out_buffer = 0;
    194e:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1952:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1956:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <bytes_in_input_buffer>
	input_overrun = 0;
    195a:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    195e:	40 93 19 02 	sts	0x0219, r20	; 0x800219 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	aa 1f       	adc	r26, r26
    196c:	bb 1f       	adc	r27, r27
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	aa 1f       	adc	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	9c 01       	movw	r18, r24
    1978:	ad 01       	movw	r20, r26
    197a:	22 0f       	add	r18, r18
    197c:	33 1f       	adc	r19, r19
    197e:	44 1f       	adc	r20, r20
    1980:	55 1f       	adc	r21, r21
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	72 e1       	ldi	r23, 0x12	; 18
    1986:	8a e7       	ldi	r24, 0x7A	; 122
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__divmodsi4>
    198e:	ba 01       	movw	r22, r20
    1990:	a9 01       	movw	r20, r18
    1992:	4f 5f       	subi	r20, 0xFF	; 255
    1994:	5f 4f       	sbci	r21, 0xFF	; 255
    1996:	6f 4f       	sbci	r22, 0xFF	; 255
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	db 01       	movw	r26, r22
    199c:	ca 01       	movw	r24, r20
    199e:	1a f4       	brpl	.+6      	; 0x19a6 <init_serial_stdio+0x5c>
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	a1 1d       	adc	r26, r1
    19a4:	b1 1d       	adc	r27, r1
    19a6:	b5 95       	asr	r27
    19a8:	a7 95       	ror	r26
    19aa:	97 95       	ror	r25
    19ac:	87 95       	ror	r24
    19ae:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    19b0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    19b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    19b8:	e1 ec       	ldi	r30, 0xC1	; 193
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	88 e1       	ldi	r24, 0x18	; 24
    19be:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    19c0:	80 81       	ld	r24, Z
    19c2:	80 68       	ori	r24, 0x80	; 128
    19c4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    19c6:	e6 e3       	ldi	r30, 0x36	; 54
    19c8:	f3 e0       	ldi	r31, 0x03	; 3
    19ca:	85 e0       	ldi	r24, 0x05	; 5
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	93 83       	std	Z+3, r25	; 0x03
    19d0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
    19d6:	08 95       	ret

000019d8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    19d8:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <bytes_in_input_buffer>
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	91 11       	cpse	r25, r1
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <serial_input_available+0xc>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
}
    19e4:	08 95       	ret

000019e6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    19e6:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <input_insert_pos>
	bytes_in_input_buffer = 0;
    19ea:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <bytes_in_input_buffer>
    19ee:	08 95       	ret

000019f0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    19f0:	1f 92       	push	r1
    19f2:	0f 92       	push	r0
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	0f 92       	push	r0
    19f8:	11 24       	eor	r1, r1
    19fa:	2f 93       	push	r18
    19fc:	8f 93       	push	r24
    19fe:	9f 93       	push	r25
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1a04:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    1a08:	88 23       	and	r24, r24
    1a0a:	29 f1       	breq	.+74     	; 0x1a56 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1a0c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <out_insert_pos>
    1a10:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <bytes_in_out_buffer>
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	82 1b       	sub	r24, r18
    1a18:	91 09       	sbc	r25, r1
    1a1a:	5a f4       	brpl	.+22     	; 0x1a32 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a1c:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <out_insert_pos>
    1a20:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	e8 1b       	sub	r30, r24
    1a28:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a2a:	ed 5d       	subi	r30, 0xDD	; 221
    1a2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a2e:	90 81       	ld	r25, Z
    1a30:	0a c0       	rjmp	.+20     	; 0x1a46 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1a32:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <out_insert_pos>
    1a36:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	e8 1b       	sub	r30, r24
    1a3e:	f1 09       	sbc	r31, r1
    1a40:	ec 5d       	subi	r30, 0xDC	; 220
    1a42:	fd 4f       	sbci	r31, 0xFD	; 253
    1a44:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1a46:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1a50:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1a56:	e1 ec       	ldi	r30, 0xC1	; 193
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7d       	andi	r24, 0xDF	; 223
    1a5e:	80 83       	st	Z, r24
	}
}
    1a60:	ff 91       	pop	r31
    1a62:	ef 91       	pop	r30
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	cf 93       	push	r28
    1a94:	ef 93       	push	r30
    1a96:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1a98:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1a9c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <do_echo>
    1aa0:	88 23       	and	r24, r24
    1aa2:	49 f0       	breq	.+18     	; 0x1ab6 <__vector_20+0x42>
    1aa4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <bytes_in_out_buffer>
    1aa8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aaa:	29 f0       	breq	.+10     	; 0x1ab6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	8c 2f       	mov	r24, r28
    1ab2:	0e 94 3f 0c 	call	0x187e	; 0x187e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1ab6:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <bytes_in_input_buffer>
    1aba:	80 31       	cpi	r24, 0x10	; 16
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <__vector_20+0x52>
		input_overrun = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <input_overrun>
    1ac4:	18 c0       	rjmp	.+48     	; 0x1af6 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1ac6:	cd 30       	cpi	r28, 0x0D	; 13
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <__vector_20+0x58>
			c = '\n';
    1aca:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1acc:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <input_insert_pos>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	8e 0f       	add	r24, r30
    1ad4:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <input_insert_pos>
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	ec 5d       	subi	r30, 0xDC	; 220
    1adc:	fc 4f       	sbci	r31, 0xFC	; 252
    1ade:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1ae0:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <bytes_in_input_buffer>
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1aea:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <input_insert_pos>
    1aee:	80 31       	cpi	r24, 0x10	; 16
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1af2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <input_insert_pos>
		}
	}
}
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	cf 91       	pop	r28
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1b1a:	94 b1       	in	r25, 0x04	; 4
    1b1c:	90 6b       	ori	r25, 0xB0	; 176
    1b1e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1b20:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1b22:	90 e5       	ldi	r25, 0x50	; 80
    1b24:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1b26:	88 30       	cpi	r24, 0x08	; 8
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <spi_setup_master+0x18>
    1b2a:	80 32       	cpi	r24, 0x20	; 32
    1b2c:	11 f0       	breq	.+4      	; 0x1b32 <spi_setup_master+0x18>
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	19 f4       	brne	.+6      	; 0x1b38 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1b32:	91 e0       	ldi	r25, 0x01	; 1
    1b34:	9d bd       	out	0x2d, r25	; 45
			break;
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1b38:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1b3a:	80 32       	cpi	r24, 0x20	; 32
    1b3c:	69 f0       	breq	.+26     	; 0x1b58 <spi_setup_master+0x3e>
    1b3e:	28 f4       	brcc	.+10     	; 0x1b4a <spi_setup_master+0x30>
    1b40:	88 30       	cpi	r24, 0x08	; 8
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <spi_setup_master+0x46>
    1b44:	80 31       	cpi	r24, 0x10	; 16
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <spi_setup_master+0x46>
    1b48:	0e c0       	rjmp	.+28     	; 0x1b66 <spi_setup_master+0x4c>
    1b4a:	80 34       	cpi	r24, 0x40	; 64
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <spi_setup_master+0x3e>
    1b4e:	80 38       	cpi	r24, 0x80	; 128
    1b50:	51 f4       	brne	.+20     	; 0x1b66 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1b52:	8c b5       	in	r24, 0x2c	; 44
    1b54:	81 60       	ori	r24, 0x01	; 1
    1b56:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1b58:	8c b5       	in	r24, 0x2c	; 44
    1b5a:	82 60       	ori	r24, 0x02	; 2
    1b5c:	8c bd       	out	0x2c, r24	; 44
			break;
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1b60:	8c b5       	in	r24, 0x2c	; 44
    1b62:	81 60       	ori	r24, 0x01	; 1
    1b64:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1b66:	2c 98       	cbi	0x05, 4	; 5
    1b68:	08 95       	ret

00001b6a <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1b6a:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1b6c:	0d b4       	in	r0, 0x2d	; 45
    1b6e:	07 fe       	sbrs	r0, 7
    1b70:	fd cf       	rjmp	.-6      	; 0x1b6c <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1b72:	8e b5       	in	r24, 0x2e	; 46
    1b74:	08 95       	ret

00001b76 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1b76:	9f 93       	push	r25
    1b78:	8f 93       	push	r24
    1b7a:	7f 93       	push	r23
    1b7c:	6f 93       	push	r22
    1b7e:	89 e8       	ldi	r24, 0x89	; 137
    1b80:	96 e0       	ldi	r25, 0x06	; 6
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	08 95       	ret

00001b98 <normal_display_mode>:
    1b98:	84 e8       	ldi	r24, 0x84	; 132
    1b9a:	96 e0       	ldi	r25, 0x06	; 6
    1b9c:	9f 93       	push	r25
    1b9e:	8f 93       	push	r24
    1ba0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	08 95       	ret

00001baa <clear_terminal>:
    1baa:	8f e7       	ldi	r24, 0x7F	; 127
    1bac:	96 e0       	ldi	r25, 0x06	; 6
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	08 95       	ret

00001bbc <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1bbc:	1f 92       	push	r1
    1bbe:	8f 93       	push	r24
    1bc0:	89 e7       	ldi	r24, 0x79	; 121
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	9f 93       	push	r25
    1bc6:	8f 93       	push	r24
    1bc8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	08 95       	ret

00001bd6 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1bd6:	82 e7       	ldi	r24, 0x72	; 114
    1bd8:	96 e0       	ldi	r25, 0x06	; 6
    1bda:	9f 93       	push	r25
    1bdc:	8f 93       	push	r24
    1bde:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <printf_P>
}
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	08 95       	ret

00001be8 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1be8:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <clockTicks>
    1bec:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <clockTicks+0x1>
    1bf0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <clockTicks+0x2>
    1bf4:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1bf8:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1bfa:	8c e7       	ldi	r24, 0x7C	; 124
    1bfc:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1c06:	ee e6       	ldi	r30, 0x6E	; 110
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1c10:	85 b3       	in	r24, 0x15	; 21
    1c12:	82 70       	andi	r24, 0x02	; 2
    1c14:	85 bb       	out	0x15, r24	; 21
    1c16:	08 95       	ret

00001c18 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1c18:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1c1a:	f8 94       	cli
	returnValue = clockTicks;
    1c1c:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <clockTicks>
    1c20:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <clockTicks+0x1>
    1c24:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <clockTicks+0x2>
    1c28:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <clockTicks+0x3>
	if(interruptsOn) {
    1c2c:	22 23       	and	r18, r18
    1c2e:	0c f4       	brge	.+2      	; 0x1c32 <get_current_time+0x1a>
		sei();
    1c30:	78 94       	sei
	}
	return returnValue;
}
    1c32:	08 95       	ret

00001c34 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    1c46:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <clockTicks>
    1c4a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <clockTicks+0x1>
    1c4e:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <clockTicks+0x2>
    1c52:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <clockTicks+0x3>
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	a1 1d       	adc	r26, r1
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <clockTicks>
    1c60:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <clockTicks+0x1>
    1c64:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <clockTicks+0x2>
    1c68:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <clockTicks+0x3>
}
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__divmodsi4>:
    1c7e:	05 2e       	mov	r0, r21
    1c80:	97 fb       	bst	r25, 7
    1c82:	1e f4       	brtc	.+6      	; 0x1c8a <__divmodsi4+0xc>
    1c84:	00 94       	com	r0
    1c86:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__negsi2>
    1c8a:	57 fd       	sbrc	r21, 7
    1c8c:	07 d0       	rcall	.+14     	; 0x1c9c <__divmodsi4_neg2>
    1c8e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__udivmodsi4>
    1c92:	07 fc       	sbrc	r0, 7
    1c94:	03 d0       	rcall	.+6      	; 0x1c9c <__divmodsi4_neg2>
    1c96:	4e f4       	brtc	.+18     	; 0x1caa <__divmodsi4_exit>
    1c98:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__negsi2>

00001c9c <__divmodsi4_neg2>:
    1c9c:	50 95       	com	r21
    1c9e:	40 95       	com	r20
    1ca0:	30 95       	com	r19
    1ca2:	21 95       	neg	r18
    1ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca6:	4f 4f       	sbci	r20, 0xFF	; 255
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255

00001caa <__divmodsi4_exit>:
    1caa:	08 95       	ret

00001cac <__negsi2>:
    1cac:	90 95       	com	r25
    1cae:	80 95       	com	r24
    1cb0:	70 95       	com	r23
    1cb2:	61 95       	neg	r22
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	08 95       	ret

00001cbc <__tablejump2__>:
    1cbc:	ee 0f       	add	r30, r30
    1cbe:	ff 1f       	adc	r31, r31
    1cc0:	05 90       	lpm	r0, Z+
    1cc2:	f4 91       	lpm	r31, Z
    1cc4:	e0 2d       	mov	r30, r0
    1cc6:	09 94       	ijmp

00001cc8 <__udivmodsi4>:
    1cc8:	a1 e2       	ldi	r26, 0x21	; 33
    1cca:	1a 2e       	mov	r1, r26
    1ccc:	aa 1b       	sub	r26, r26
    1cce:	bb 1b       	sub	r27, r27
    1cd0:	fd 01       	movw	r30, r26
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <__udivmodsi4_ep>

00001cd4 <__udivmodsi4_loop>:
    1cd4:	aa 1f       	adc	r26, r26
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	ee 1f       	adc	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	a2 17       	cp	r26, r18
    1cde:	b3 07       	cpc	r27, r19
    1ce0:	e4 07       	cpc	r30, r20
    1ce2:	f5 07       	cpc	r31, r21
    1ce4:	20 f0       	brcs	.+8      	; 0x1cee <__udivmodsi4_ep>
    1ce6:	a2 1b       	sub	r26, r18
    1ce8:	b3 0b       	sbc	r27, r19
    1cea:	e4 0b       	sbc	r30, r20
    1cec:	f5 0b       	sbc	r31, r21

00001cee <__udivmodsi4_ep>:
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	1a 94       	dec	r1
    1cf8:	69 f7       	brne	.-38     	; 0x1cd4 <__udivmodsi4_loop>
    1cfa:	60 95       	com	r22
    1cfc:	70 95       	com	r23
    1cfe:	80 95       	com	r24
    1d00:	90 95       	com	r25
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	bd 01       	movw	r22, r26
    1d08:	cf 01       	movw	r24, r30
    1d0a:	08 95       	ret

00001d0c <random_r>:
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ec 01       	movw	r28, r24
    1d22:	68 81       	ld	r22, Y
    1d24:	79 81       	ldd	r23, Y+1	; 0x01
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2a:	61 15       	cp	r22, r1
    1d2c:	71 05       	cpc	r23, r1
    1d2e:	81 05       	cpc	r24, r1
    1d30:	91 05       	cpc	r25, r1
    1d32:	21 f4       	brne	.+8      	; 0x1d3c <random_r+0x30>
    1d34:	64 e2       	ldi	r22, 0x24	; 36
    1d36:	79 ed       	ldi	r23, 0xD9	; 217
    1d38:	8b e5       	ldi	r24, 0x5B	; 91
    1d3a:	97 e0       	ldi	r25, 0x07	; 7
    1d3c:	2d e1       	ldi	r18, 0x1D	; 29
    1d3e:	33 ef       	ldi	r19, 0xF3	; 243
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__divmodsi4>
    1d48:	49 01       	movw	r8, r18
    1d4a:	5a 01       	movw	r10, r20
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	a7 ea       	ldi	r26, 0xA7	; 167
    1d52:	b1 e4       	ldi	r27, 0x41	; 65
    1d54:	0e 94 3a 12 	call	0x2474	; 0x2474 <__muluhisi3>
    1d58:	6b 01       	movw	r12, r22
    1d5a:	7c 01       	movw	r14, r24
    1d5c:	ac ee       	ldi	r26, 0xEC	; 236
    1d5e:	b4 ef       	ldi	r27, 0xF4	; 244
    1d60:	a5 01       	movw	r20, r10
    1d62:	94 01       	movw	r18, r8
    1d64:	0e 94 48 12 	call	0x2490	; 0x2490 <__mulohisi3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8c 0d       	add	r24, r12
    1d6e:	9d 1d       	adc	r25, r13
    1d70:	ae 1d       	adc	r26, r14
    1d72:	bf 1d       	adc	r27, r15
    1d74:	b7 ff       	sbrs	r27, 7
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <random_r+0x72>
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	a1 09       	sbc	r26, r1
    1d7c:	b0 48       	sbci	r27, 0x80	; 128
    1d7e:	88 83       	st	Y, r24
    1d80:	99 83       	std	Y+1, r25	; 0x01
    1d82:	aa 83       	std	Y+2, r26	; 0x02
    1d84:	bb 83       	std	Y+3, r27	; 0x03
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	9f 77       	andi	r25, 0x7F	; 127
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	ff 90       	pop	r15
    1d92:	ef 90       	pop	r14
    1d94:	df 90       	pop	r13
    1d96:	cf 90       	pop	r12
    1d98:	bf 90       	pop	r11
    1d9a:	af 90       	pop	r10
    1d9c:	9f 90       	pop	r9
    1d9e:	8f 90       	pop	r8
    1da0:	08 95       	ret

00001da2 <random>:
    1da2:	8f 92       	push	r8
    1da4:	9f 92       	push	r9
    1da6:	af 92       	push	r10
    1da8:	bf 92       	push	r11
    1daa:	cf 92       	push	r12
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1db6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1dba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1dbe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1dc2:	61 15       	cp	r22, r1
    1dc4:	71 05       	cpc	r23, r1
    1dc6:	81 05       	cpc	r24, r1
    1dc8:	91 05       	cpc	r25, r1
    1dca:	21 f4       	brne	.+8      	; 0x1dd4 <random+0x32>
    1dcc:	64 e2       	ldi	r22, 0x24	; 36
    1dce:	79 ed       	ldi	r23, 0xD9	; 217
    1dd0:	8b e5       	ldi	r24, 0x5B	; 91
    1dd2:	97 e0       	ldi	r25, 0x07	; 7
    1dd4:	2d e1       	ldi	r18, 0x1D	; 29
    1dd6:	33 ef       	ldi	r19, 0xF3	; 243
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__divmodsi4>
    1de0:	49 01       	movw	r8, r18
    1de2:	5a 01       	movw	r10, r20
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	a7 ea       	ldi	r26, 0xA7	; 167
    1dea:	b1 e4       	ldi	r27, 0x41	; 65
    1dec:	0e 94 3a 12 	call	0x2474	; 0x2474 <__muluhisi3>
    1df0:	6b 01       	movw	r12, r22
    1df2:	7c 01       	movw	r14, r24
    1df4:	ac ee       	ldi	r26, 0xEC	; 236
    1df6:	b4 ef       	ldi	r27, 0xF4	; 244
    1df8:	a5 01       	movw	r20, r10
    1dfa:	94 01       	movw	r18, r8
    1dfc:	0e 94 48 12 	call	0x2490	; 0x2490 <__mulohisi3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	8c 0d       	add	r24, r12
    1e06:	9d 1d       	adc	r25, r13
    1e08:	ae 1d       	adc	r26, r14
    1e0a:	bf 1d       	adc	r27, r15
    1e0c:	b7 ff       	sbrs	r27, 7
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <random+0x74>
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	a1 09       	sbc	r26, r1
    1e14:	b0 48       	sbci	r27, 0x80	; 128
    1e16:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1e1a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1e1e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1e22:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	9f 77       	andi	r25, 0x7F	; 127
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	9f 90       	pop	r9
    1e3a:	8f 90       	pop	r8
    1e3c:	08 95       	ret

00001e3e <srandom>:
    1e3e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1e42:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1e46:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1e4a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1e4e:	08 95       	ret

00001e50 <fgetc>:
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	ec 01       	movw	r28, r24
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	20 ff       	sbrs	r18, 0
    1e5a:	33 c0       	rjmp	.+102    	; 0x1ec2 <fgetc+0x72>
    1e5c:	26 ff       	sbrs	r18, 6
    1e5e:	0a c0       	rjmp	.+20     	; 0x1e74 <fgetc+0x24>
    1e60:	2f 7b       	andi	r18, 0xBF	; 191
    1e62:	2b 83       	std	Y+3, r18	; 0x03
    1e64:	8e 81       	ldd	r24, Y+6	; 0x06
    1e66:	9f 81       	ldd	r25, Y+7	; 0x07
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	9f 83       	std	Y+7, r25	; 0x07
    1e6c:	8e 83       	std	Y+6, r24	; 0x06
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	29 c0       	rjmp	.+82     	; 0x1ec6 <fgetc+0x76>
    1e74:	22 ff       	sbrs	r18, 2
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <fgetc+0x46>
    1e78:	e8 81       	ld	r30, Y
    1e7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7c:	80 81       	ld	r24, Z
    1e7e:	08 2e       	mov	r0, r24
    1e80:	00 0c       	add	r0, r0
    1e82:	99 0b       	sbc	r25, r25
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	19 f4       	brne	.+6      	; 0x1e8e <fgetc+0x3e>
    1e88:	20 62       	ori	r18, 0x20	; 32
    1e8a:	2b 83       	std	Y+3, r18	; 0x03
    1e8c:	1a c0       	rjmp	.+52     	; 0x1ec2 <fgetc+0x72>
    1e8e:	31 96       	adiw	r30, 0x01	; 1
    1e90:	f9 83       	std	Y+1, r31	; 0x01
    1e92:	e8 83       	st	Y, r30
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <fgetc+0x62>
    1e96:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e98:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e9a:	09 95       	icall
    1e9c:	97 ff       	sbrs	r25, 7
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <fgetc+0x62>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <fgetc+0x5a>
    1ea6:	80 e2       	ldi	r24, 0x20	; 32
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <fgetc+0x5c>
    1eaa:	80 e1       	ldi	r24, 0x10	; 16
    1eac:	82 2b       	or	r24, r18
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	08 c0       	rjmp	.+16     	; 0x1ec2 <fgetc+0x72>
    1eb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	3f 83       	std	Y+7, r19	; 0x07
    1ebc:	2e 83       	std	Y+6, r18	; 0x06
    1ebe:	99 27       	eor	r25, r25
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <fgetc+0x76>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	08 95       	ret

00001ecc <printf>:
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	ec e6       	ldi	r30, 0x6C	; 108
    1ed2:	ff e0       	ldi	r31, 0x0F	; 15
    1ed4:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__prologue_saves__+0x20>
    1ed8:	ae 01       	movw	r20, r28
    1eda:	4b 5f       	subi	r20, 0xFB	; 251
    1edc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ede:	fa 01       	movw	r30, r20
    1ee0:	61 91       	ld	r22, Z+
    1ee2:	71 91       	ld	r23, Z+
    1ee4:	af 01       	movw	r20, r30
    1ee6:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <__iob+0x2>
    1eea:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <__iob+0x3>
    1eee:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <vfprintf>
    1ef2:	e2 e0       	ldi	r30, 0x02	; 2
    1ef4:	0c 94 79 12 	jmp	0x24f2	; 0x24f2 <__epilogue_restores__+0x20>

00001ef8 <printf_P>:
    1ef8:	a0 e0       	ldi	r26, 0x00	; 0
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e2 e8       	ldi	r30, 0x82	; 130
    1efe:	ff e0       	ldi	r31, 0x0F	; 15
    1f00:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__+0x1c>
    1f04:	ae 01       	movw	r20, r28
    1f06:	49 5f       	subi	r20, 0xF9	; 249
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	da 01       	movw	r26, r20
    1f0c:	6d 91       	ld	r22, X+
    1f0e:	7d 91       	ld	r23, X+
    1f10:	ad 01       	movw	r20, r26
    1f12:	06 e3       	ldi	r16, 0x36	; 54
    1f14:	13 e0       	ldi	r17, 0x03	; 3
    1f16:	f8 01       	movw	r30, r16
    1f18:	82 81       	ldd	r24, Z+2	; 0x02
    1f1a:	93 81       	ldd	r25, Z+3	; 0x03
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	13 96       	adiw	r26, 0x03	; 3
    1f20:	2c 91       	ld	r18, X
    1f22:	13 97       	sbiw	r26, 0x03	; 3
    1f24:	28 60       	ori	r18, 0x08	; 8
    1f26:	13 96       	adiw	r26, 0x03	; 3
    1f28:	2c 93       	st	X, r18
    1f2a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <vfprintf>
    1f2e:	d8 01       	movw	r26, r16
    1f30:	12 96       	adiw	r26, 0x02	; 2
    1f32:	ed 91       	ld	r30, X+
    1f34:	fc 91       	ld	r31, X
    1f36:	13 97       	sbiw	r26, 0x03	; 3
    1f38:	23 81       	ldd	r18, Z+3	; 0x03
    1f3a:	27 7f       	andi	r18, 0xF7	; 247
    1f3c:	23 83       	std	Z+3, r18	; 0x03
    1f3e:	e4 e0       	ldi	r30, 0x04	; 4
    1f40:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__+0x1c>

00001f44 <putchar>:
    1f44:	60 91 38 03 	lds	r22, 0x0338	; 0x800338 <__iob+0x2>
    1f48:	70 91 39 03 	lds	r23, 0x0339	; 0x800339 <__iob+0x3>
    1f4c:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    1f50:	08 95       	ret

00001f52 <vfprintf>:
    1f52:	ab e0       	ldi	r26, 0x0B	; 11
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ef ea       	ldi	r30, 0xAF	; 175
    1f58:	ff e0       	ldi	r31, 0x0F	; 15
    1f5a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__>
    1f5e:	6c 01       	movw	r12, r24
    1f60:	7b 01       	movw	r14, r22
    1f62:	8a 01       	movw	r16, r20
    1f64:	fc 01       	movw	r30, r24
    1f66:	17 82       	std	Z+7, r1	; 0x07
    1f68:	16 82       	std	Z+6, r1	; 0x06
    1f6a:	83 81       	ldd	r24, Z+3	; 0x03
    1f6c:	81 ff       	sbrs	r24, 1
    1f6e:	cc c1       	rjmp	.+920    	; 0x2308 <vfprintf+0x3b6>
    1f70:	ce 01       	movw	r24, r28
    1f72:	01 96       	adiw	r24, 0x01	; 1
    1f74:	3c 01       	movw	r6, r24
    1f76:	f6 01       	movw	r30, r12
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	93 fd       	sbrc	r25, 3
    1f7e:	85 91       	lpm	r24, Z+
    1f80:	93 ff       	sbrs	r25, 3
    1f82:	81 91       	ld	r24, Z+
    1f84:	7f 01       	movw	r14, r30
    1f86:	88 23       	and	r24, r24
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <vfprintf+0x3a>
    1f8a:	ba c1       	rjmp	.+884    	; 0x2300 <vfprintf+0x3ae>
    1f8c:	85 32       	cpi	r24, 0x25	; 37
    1f8e:	39 f4       	brne	.+14     	; 0x1f9e <vfprintf+0x4c>
    1f90:	93 fd       	sbrc	r25, 3
    1f92:	85 91       	lpm	r24, Z+
    1f94:	93 ff       	sbrs	r25, 3
    1f96:	81 91       	ld	r24, Z+
    1f98:	7f 01       	movw	r14, r30
    1f9a:	85 32       	cpi	r24, 0x25	; 37
    1f9c:	29 f4       	brne	.+10     	; 0x1fa8 <vfprintf+0x56>
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    1fa6:	e7 cf       	rjmp	.-50     	; 0x1f76 <vfprintf+0x24>
    1fa8:	91 2c       	mov	r9, r1
    1faa:	21 2c       	mov	r2, r1
    1fac:	31 2c       	mov	r3, r1
    1fae:	ff e1       	ldi	r31, 0x1F	; 31
    1fb0:	f3 15       	cp	r31, r3
    1fb2:	d8 f0       	brcs	.+54     	; 0x1fea <vfprintf+0x98>
    1fb4:	8b 32       	cpi	r24, 0x2B	; 43
    1fb6:	79 f0       	breq	.+30     	; 0x1fd6 <vfprintf+0x84>
    1fb8:	38 f4       	brcc	.+14     	; 0x1fc8 <vfprintf+0x76>
    1fba:	80 32       	cpi	r24, 0x20	; 32
    1fbc:	79 f0       	breq	.+30     	; 0x1fdc <vfprintf+0x8a>
    1fbe:	83 32       	cpi	r24, 0x23	; 35
    1fc0:	a1 f4       	brne	.+40     	; 0x1fea <vfprintf+0x98>
    1fc2:	23 2d       	mov	r18, r3
    1fc4:	20 61       	ori	r18, 0x10	; 16
    1fc6:	1d c0       	rjmp	.+58     	; 0x2002 <vfprintf+0xb0>
    1fc8:	8d 32       	cpi	r24, 0x2D	; 45
    1fca:	61 f0       	breq	.+24     	; 0x1fe4 <vfprintf+0x92>
    1fcc:	80 33       	cpi	r24, 0x30	; 48
    1fce:	69 f4       	brne	.+26     	; 0x1fea <vfprintf+0x98>
    1fd0:	23 2d       	mov	r18, r3
    1fd2:	21 60       	ori	r18, 0x01	; 1
    1fd4:	16 c0       	rjmp	.+44     	; 0x2002 <vfprintf+0xb0>
    1fd6:	83 2d       	mov	r24, r3
    1fd8:	82 60       	ori	r24, 0x02	; 2
    1fda:	38 2e       	mov	r3, r24
    1fdc:	e3 2d       	mov	r30, r3
    1fde:	e4 60       	ori	r30, 0x04	; 4
    1fe0:	3e 2e       	mov	r3, r30
    1fe2:	2a c0       	rjmp	.+84     	; 0x2038 <vfprintf+0xe6>
    1fe4:	f3 2d       	mov	r31, r3
    1fe6:	f8 60       	ori	r31, 0x08	; 8
    1fe8:	1d c0       	rjmp	.+58     	; 0x2024 <vfprintf+0xd2>
    1fea:	37 fc       	sbrc	r3, 7
    1fec:	2d c0       	rjmp	.+90     	; 0x2048 <vfprintf+0xf6>
    1fee:	20 ed       	ldi	r18, 0xD0	; 208
    1ff0:	28 0f       	add	r18, r24
    1ff2:	2a 30       	cpi	r18, 0x0A	; 10
    1ff4:	40 f0       	brcs	.+16     	; 0x2006 <vfprintf+0xb4>
    1ff6:	8e 32       	cpi	r24, 0x2E	; 46
    1ff8:	b9 f4       	brne	.+46     	; 0x2028 <vfprintf+0xd6>
    1ffa:	36 fc       	sbrc	r3, 6
    1ffc:	81 c1       	rjmp	.+770    	; 0x2300 <vfprintf+0x3ae>
    1ffe:	23 2d       	mov	r18, r3
    2000:	20 64       	ori	r18, 0x40	; 64
    2002:	32 2e       	mov	r3, r18
    2004:	19 c0       	rjmp	.+50     	; 0x2038 <vfprintf+0xe6>
    2006:	36 fe       	sbrs	r3, 6
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <vfprintf+0xc4>
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	98 9e       	mul	r9, r24
    200e:	20 0d       	add	r18, r0
    2010:	11 24       	eor	r1, r1
    2012:	92 2e       	mov	r9, r18
    2014:	11 c0       	rjmp	.+34     	; 0x2038 <vfprintf+0xe6>
    2016:	ea e0       	ldi	r30, 0x0A	; 10
    2018:	2e 9e       	mul	r2, r30
    201a:	20 0d       	add	r18, r0
    201c:	11 24       	eor	r1, r1
    201e:	22 2e       	mov	r2, r18
    2020:	f3 2d       	mov	r31, r3
    2022:	f0 62       	ori	r31, 0x20	; 32
    2024:	3f 2e       	mov	r3, r31
    2026:	08 c0       	rjmp	.+16     	; 0x2038 <vfprintf+0xe6>
    2028:	8c 36       	cpi	r24, 0x6C	; 108
    202a:	21 f4       	brne	.+8      	; 0x2034 <vfprintf+0xe2>
    202c:	83 2d       	mov	r24, r3
    202e:	80 68       	ori	r24, 0x80	; 128
    2030:	38 2e       	mov	r3, r24
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <vfprintf+0xe6>
    2034:	88 36       	cpi	r24, 0x68	; 104
    2036:	41 f4       	brne	.+16     	; 0x2048 <vfprintf+0xf6>
    2038:	f7 01       	movw	r30, r14
    203a:	93 fd       	sbrc	r25, 3
    203c:	85 91       	lpm	r24, Z+
    203e:	93 ff       	sbrs	r25, 3
    2040:	81 91       	ld	r24, Z+
    2042:	7f 01       	movw	r14, r30
    2044:	81 11       	cpse	r24, r1
    2046:	b3 cf       	rjmp	.-154    	; 0x1fae <vfprintf+0x5c>
    2048:	98 2f       	mov	r25, r24
    204a:	9f 7d       	andi	r25, 0xDF	; 223
    204c:	95 54       	subi	r25, 0x45	; 69
    204e:	93 30       	cpi	r25, 0x03	; 3
    2050:	28 f4       	brcc	.+10     	; 0x205c <vfprintf+0x10a>
    2052:	0c 5f       	subi	r16, 0xFC	; 252
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	9f e3       	ldi	r25, 0x3F	; 63
    2058:	99 83       	std	Y+1, r25	; 0x01
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <vfprintf+0x124>
    205c:	83 36       	cpi	r24, 0x63	; 99
    205e:	31 f0       	breq	.+12     	; 0x206c <vfprintf+0x11a>
    2060:	83 37       	cpi	r24, 0x73	; 115
    2062:	71 f0       	breq	.+28     	; 0x2080 <vfprintf+0x12e>
    2064:	83 35       	cpi	r24, 0x53	; 83
    2066:	09 f0       	breq	.+2      	; 0x206a <vfprintf+0x118>
    2068:	59 c0       	rjmp	.+178    	; 0x211c <vfprintf+0x1ca>
    206a:	21 c0       	rjmp	.+66     	; 0x20ae <vfprintf+0x15c>
    206c:	f8 01       	movw	r30, r16
    206e:	80 81       	ld	r24, Z
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	0e 5f       	subi	r16, 0xFE	; 254
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	88 24       	eor	r8, r8
    2078:	83 94       	inc	r8
    207a:	91 2c       	mov	r9, r1
    207c:	53 01       	movw	r10, r6
    207e:	13 c0       	rjmp	.+38     	; 0x20a6 <vfprintf+0x154>
    2080:	28 01       	movw	r4, r16
    2082:	f2 e0       	ldi	r31, 0x02	; 2
    2084:	4f 0e       	add	r4, r31
    2086:	51 1c       	adc	r5, r1
    2088:	f8 01       	movw	r30, r16
    208a:	a0 80       	ld	r10, Z
    208c:	b1 80       	ldd	r11, Z+1	; 0x01
    208e:	36 fe       	sbrs	r3, 6
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <vfprintf+0x146>
    2092:	69 2d       	mov	r22, r9
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	02 c0       	rjmp	.+4      	; 0x209c <vfprintf+0x14a>
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	7f ef       	ldi	r23, 0xFF	; 255
    209c:	c5 01       	movw	r24, r10
    209e:	0e 94 95 11 	call	0x232a	; 0x232a <strnlen>
    20a2:	4c 01       	movw	r8, r24
    20a4:	82 01       	movw	r16, r4
    20a6:	f3 2d       	mov	r31, r3
    20a8:	ff 77       	andi	r31, 0x7F	; 127
    20aa:	3f 2e       	mov	r3, r31
    20ac:	16 c0       	rjmp	.+44     	; 0x20da <vfprintf+0x188>
    20ae:	28 01       	movw	r4, r16
    20b0:	22 e0       	ldi	r18, 0x02	; 2
    20b2:	42 0e       	add	r4, r18
    20b4:	51 1c       	adc	r5, r1
    20b6:	f8 01       	movw	r30, r16
    20b8:	a0 80       	ld	r10, Z
    20ba:	b1 80       	ldd	r11, Z+1	; 0x01
    20bc:	36 fe       	sbrs	r3, 6
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <vfprintf+0x174>
    20c0:	69 2d       	mov	r22, r9
    20c2:	70 e0       	ldi	r23, 0x00	; 0
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <vfprintf+0x178>
    20c6:	6f ef       	ldi	r22, 0xFF	; 255
    20c8:	7f ef       	ldi	r23, 0xFF	; 255
    20ca:	c5 01       	movw	r24, r10
    20cc:	0e 94 8a 11 	call	0x2314	; 0x2314 <strnlen_P>
    20d0:	4c 01       	movw	r8, r24
    20d2:	f3 2d       	mov	r31, r3
    20d4:	f0 68       	ori	r31, 0x80	; 128
    20d6:	3f 2e       	mov	r3, r31
    20d8:	82 01       	movw	r16, r4
    20da:	33 fc       	sbrc	r3, 3
    20dc:	1b c0       	rjmp	.+54     	; 0x2114 <vfprintf+0x1c2>
    20de:	82 2d       	mov	r24, r2
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	88 16       	cp	r8, r24
    20e4:	99 06       	cpc	r9, r25
    20e6:	b0 f4       	brcc	.+44     	; 0x2114 <vfprintf+0x1c2>
    20e8:	b6 01       	movw	r22, r12
    20ea:	80 e2       	ldi	r24, 0x20	; 32
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    20f2:	2a 94       	dec	r2
    20f4:	f4 cf       	rjmp	.-24     	; 0x20de <vfprintf+0x18c>
    20f6:	f5 01       	movw	r30, r10
    20f8:	37 fc       	sbrc	r3, 7
    20fa:	85 91       	lpm	r24, Z+
    20fc:	37 fe       	sbrs	r3, 7
    20fe:	81 91       	ld	r24, Z+
    2100:	5f 01       	movw	r10, r30
    2102:	b6 01       	movw	r22, r12
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    210a:	21 10       	cpse	r2, r1
    210c:	2a 94       	dec	r2
    210e:	21 e0       	ldi	r18, 0x01	; 1
    2110:	82 1a       	sub	r8, r18
    2112:	91 08       	sbc	r9, r1
    2114:	81 14       	cp	r8, r1
    2116:	91 04       	cpc	r9, r1
    2118:	71 f7       	brne	.-36     	; 0x20f6 <vfprintf+0x1a4>
    211a:	e8 c0       	rjmp	.+464    	; 0x22ec <vfprintf+0x39a>
    211c:	84 36       	cpi	r24, 0x64	; 100
    211e:	11 f0       	breq	.+4      	; 0x2124 <vfprintf+0x1d2>
    2120:	89 36       	cpi	r24, 0x69	; 105
    2122:	41 f5       	brne	.+80     	; 0x2174 <vfprintf+0x222>
    2124:	f8 01       	movw	r30, r16
    2126:	37 fe       	sbrs	r3, 7
    2128:	07 c0       	rjmp	.+14     	; 0x2138 <vfprintf+0x1e6>
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	0c 5f       	subi	r16, 0xFC	; 252
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	08 c0       	rjmp	.+16     	; 0x2148 <vfprintf+0x1f6>
    2138:	60 81       	ld	r22, Z
    213a:	71 81       	ldd	r23, Z+1	; 0x01
    213c:	07 2e       	mov	r0, r23
    213e:	00 0c       	add	r0, r0
    2140:	88 0b       	sbc	r24, r24
    2142:	99 0b       	sbc	r25, r25
    2144:	0e 5f       	subi	r16, 0xFE	; 254
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	f3 2d       	mov	r31, r3
    214a:	ff 76       	andi	r31, 0x6F	; 111
    214c:	3f 2e       	mov	r3, r31
    214e:	97 ff       	sbrs	r25, 7
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <vfprintf+0x212>
    2152:	90 95       	com	r25
    2154:	80 95       	com	r24
    2156:	70 95       	com	r23
    2158:	61 95       	neg	r22
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	8f 4f       	sbci	r24, 0xFF	; 255
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	f0 68       	ori	r31, 0x80	; 128
    2162:	3f 2e       	mov	r3, r31
    2164:	2a e0       	ldi	r18, 0x0A	; 10
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	a3 01       	movw	r20, r6
    216a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__ultoa_invert>
    216e:	88 2e       	mov	r8, r24
    2170:	86 18       	sub	r8, r6
    2172:	45 c0       	rjmp	.+138    	; 0x21fe <vfprintf+0x2ac>
    2174:	85 37       	cpi	r24, 0x75	; 117
    2176:	31 f4       	brne	.+12     	; 0x2184 <vfprintf+0x232>
    2178:	23 2d       	mov	r18, r3
    217a:	2f 7e       	andi	r18, 0xEF	; 239
    217c:	b2 2e       	mov	r11, r18
    217e:	2a e0       	ldi	r18, 0x0A	; 10
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	25 c0       	rjmp	.+74     	; 0x21ce <vfprintf+0x27c>
    2184:	93 2d       	mov	r25, r3
    2186:	99 7f       	andi	r25, 0xF9	; 249
    2188:	b9 2e       	mov	r11, r25
    218a:	8f 36       	cpi	r24, 0x6F	; 111
    218c:	c1 f0       	breq	.+48     	; 0x21be <vfprintf+0x26c>
    218e:	18 f4       	brcc	.+6      	; 0x2196 <vfprintf+0x244>
    2190:	88 35       	cpi	r24, 0x58	; 88
    2192:	79 f0       	breq	.+30     	; 0x21b2 <vfprintf+0x260>
    2194:	b5 c0       	rjmp	.+362    	; 0x2300 <vfprintf+0x3ae>
    2196:	80 37       	cpi	r24, 0x70	; 112
    2198:	19 f0       	breq	.+6      	; 0x21a0 <vfprintf+0x24e>
    219a:	88 37       	cpi	r24, 0x78	; 120
    219c:	21 f0       	breq	.+8      	; 0x21a6 <vfprintf+0x254>
    219e:	b0 c0       	rjmp	.+352    	; 0x2300 <vfprintf+0x3ae>
    21a0:	e9 2f       	mov	r30, r25
    21a2:	e0 61       	ori	r30, 0x10	; 16
    21a4:	be 2e       	mov	r11, r30
    21a6:	b4 fe       	sbrs	r11, 4
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <vfprintf+0x272>
    21aa:	fb 2d       	mov	r31, r11
    21ac:	f4 60       	ori	r31, 0x04	; 4
    21ae:	bf 2e       	mov	r11, r31
    21b0:	09 c0       	rjmp	.+18     	; 0x21c4 <vfprintf+0x272>
    21b2:	34 fe       	sbrs	r3, 4
    21b4:	0a c0       	rjmp	.+20     	; 0x21ca <vfprintf+0x278>
    21b6:	29 2f       	mov	r18, r25
    21b8:	26 60       	ori	r18, 0x06	; 6
    21ba:	b2 2e       	mov	r11, r18
    21bc:	06 c0       	rjmp	.+12     	; 0x21ca <vfprintf+0x278>
    21be:	28 e0       	ldi	r18, 0x08	; 8
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	05 c0       	rjmp	.+10     	; 0x21ce <vfprintf+0x27c>
    21c4:	20 e1       	ldi	r18, 0x10	; 16
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <vfprintf+0x27c>
    21ca:	20 e1       	ldi	r18, 0x10	; 16
    21cc:	32 e0       	ldi	r19, 0x02	; 2
    21ce:	f8 01       	movw	r30, r16
    21d0:	b7 fe       	sbrs	r11, 7
    21d2:	07 c0       	rjmp	.+14     	; 0x21e2 <vfprintf+0x290>
    21d4:	60 81       	ld	r22, Z
    21d6:	71 81       	ldd	r23, Z+1	; 0x01
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	0c 5f       	subi	r16, 0xFC	; 252
    21de:	1f 4f       	sbci	r17, 0xFF	; 255
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <vfprintf+0x29c>
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 5f       	subi	r16, 0xFE	; 254
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	a3 01       	movw	r20, r6
    21f0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__ultoa_invert>
    21f4:	88 2e       	mov	r8, r24
    21f6:	86 18       	sub	r8, r6
    21f8:	fb 2d       	mov	r31, r11
    21fa:	ff 77       	andi	r31, 0x7F	; 127
    21fc:	3f 2e       	mov	r3, r31
    21fe:	36 fe       	sbrs	r3, 6
    2200:	0d c0       	rjmp	.+26     	; 0x221c <vfprintf+0x2ca>
    2202:	23 2d       	mov	r18, r3
    2204:	2e 7f       	andi	r18, 0xFE	; 254
    2206:	a2 2e       	mov	r10, r18
    2208:	89 14       	cp	r8, r9
    220a:	58 f4       	brcc	.+22     	; 0x2222 <vfprintf+0x2d0>
    220c:	34 fe       	sbrs	r3, 4
    220e:	0b c0       	rjmp	.+22     	; 0x2226 <vfprintf+0x2d4>
    2210:	32 fc       	sbrc	r3, 2
    2212:	09 c0       	rjmp	.+18     	; 0x2226 <vfprintf+0x2d4>
    2214:	83 2d       	mov	r24, r3
    2216:	8e 7e       	andi	r24, 0xEE	; 238
    2218:	a8 2e       	mov	r10, r24
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <vfprintf+0x2d4>
    221c:	b8 2c       	mov	r11, r8
    221e:	a3 2c       	mov	r10, r3
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <vfprintf+0x2d6>
    2222:	b8 2c       	mov	r11, r8
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <vfprintf+0x2d6>
    2226:	b9 2c       	mov	r11, r9
    2228:	a4 fe       	sbrs	r10, 4
    222a:	0f c0       	rjmp	.+30     	; 0x224a <vfprintf+0x2f8>
    222c:	fe 01       	movw	r30, r28
    222e:	e8 0d       	add	r30, r8
    2230:	f1 1d       	adc	r31, r1
    2232:	80 81       	ld	r24, Z
    2234:	80 33       	cpi	r24, 0x30	; 48
    2236:	21 f4       	brne	.+8      	; 0x2240 <vfprintf+0x2ee>
    2238:	9a 2d       	mov	r25, r10
    223a:	99 7e       	andi	r25, 0xE9	; 233
    223c:	a9 2e       	mov	r10, r25
    223e:	09 c0       	rjmp	.+18     	; 0x2252 <vfprintf+0x300>
    2240:	a2 fe       	sbrs	r10, 2
    2242:	06 c0       	rjmp	.+12     	; 0x2250 <vfprintf+0x2fe>
    2244:	b3 94       	inc	r11
    2246:	b3 94       	inc	r11
    2248:	04 c0       	rjmp	.+8      	; 0x2252 <vfprintf+0x300>
    224a:	8a 2d       	mov	r24, r10
    224c:	86 78       	andi	r24, 0x86	; 134
    224e:	09 f0       	breq	.+2      	; 0x2252 <vfprintf+0x300>
    2250:	b3 94       	inc	r11
    2252:	a3 fc       	sbrc	r10, 3
    2254:	11 c0       	rjmp	.+34     	; 0x2278 <vfprintf+0x326>
    2256:	a0 fe       	sbrs	r10, 0
    2258:	06 c0       	rjmp	.+12     	; 0x2266 <vfprintf+0x314>
    225a:	b2 14       	cp	r11, r2
    225c:	88 f4       	brcc	.+34     	; 0x2280 <vfprintf+0x32e>
    225e:	28 0c       	add	r2, r8
    2260:	92 2c       	mov	r9, r2
    2262:	9b 18       	sub	r9, r11
    2264:	0e c0       	rjmp	.+28     	; 0x2282 <vfprintf+0x330>
    2266:	b2 14       	cp	r11, r2
    2268:	60 f4       	brcc	.+24     	; 0x2282 <vfprintf+0x330>
    226a:	b6 01       	movw	r22, r12
    226c:	80 e2       	ldi	r24, 0x20	; 32
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    2274:	b3 94       	inc	r11
    2276:	f7 cf       	rjmp	.-18     	; 0x2266 <vfprintf+0x314>
    2278:	b2 14       	cp	r11, r2
    227a:	18 f4       	brcc	.+6      	; 0x2282 <vfprintf+0x330>
    227c:	2b 18       	sub	r2, r11
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <vfprintf+0x332>
    2280:	98 2c       	mov	r9, r8
    2282:	21 2c       	mov	r2, r1
    2284:	a4 fe       	sbrs	r10, 4
    2286:	10 c0       	rjmp	.+32     	; 0x22a8 <vfprintf+0x356>
    2288:	b6 01       	movw	r22, r12
    228a:	80 e3       	ldi	r24, 0x30	; 48
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    2292:	a2 fe       	sbrs	r10, 2
    2294:	17 c0       	rjmp	.+46     	; 0x22c4 <vfprintf+0x372>
    2296:	a1 fc       	sbrc	r10, 1
    2298:	03 c0       	rjmp	.+6      	; 0x22a0 <vfprintf+0x34e>
    229a:	88 e7       	ldi	r24, 0x78	; 120
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <vfprintf+0x352>
    22a0:	88 e5       	ldi	r24, 0x58	; 88
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	b6 01       	movw	r22, r12
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <vfprintf+0x36e>
    22a8:	8a 2d       	mov	r24, r10
    22aa:	86 78       	andi	r24, 0x86	; 134
    22ac:	59 f0       	breq	.+22     	; 0x22c4 <vfprintf+0x372>
    22ae:	a1 fe       	sbrs	r10, 1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <vfprintf+0x364>
    22b2:	8b e2       	ldi	r24, 0x2B	; 43
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <vfprintf+0x366>
    22b6:	80 e2       	ldi	r24, 0x20	; 32
    22b8:	a7 fc       	sbrc	r10, 7
    22ba:	8d e2       	ldi	r24, 0x2D	; 45
    22bc:	b6 01       	movw	r22, r12
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    22c4:	89 14       	cp	r8, r9
    22c6:	38 f4       	brcc	.+14     	; 0x22d6 <vfprintf+0x384>
    22c8:	b6 01       	movw	r22, r12
    22ca:	80 e3       	ldi	r24, 0x30	; 48
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    22d2:	9a 94       	dec	r9
    22d4:	f7 cf       	rjmp	.-18     	; 0x22c4 <vfprintf+0x372>
    22d6:	8a 94       	dec	r8
    22d8:	f3 01       	movw	r30, r6
    22da:	e8 0d       	add	r30, r8
    22dc:	f1 1d       	adc	r31, r1
    22de:	80 81       	ld	r24, Z
    22e0:	b6 01       	movw	r22, r12
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    22e8:	81 10       	cpse	r8, r1
    22ea:	f5 cf       	rjmp	.-22     	; 0x22d6 <vfprintf+0x384>
    22ec:	22 20       	and	r2, r2
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <vfprintf+0x3a0>
    22f0:	42 ce       	rjmp	.-892    	; 0x1f76 <vfprintf+0x24>
    22f2:	b6 01       	movw	r22, r12
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 a0 11 	call	0x2340	; 0x2340 <fputc>
    22fc:	2a 94       	dec	r2
    22fe:	f6 cf       	rjmp	.-20     	; 0x22ec <vfprintf+0x39a>
    2300:	f6 01       	movw	r30, r12
    2302:	86 81       	ldd	r24, Z+6	; 0x06
    2304:	97 81       	ldd	r25, Z+7	; 0x07
    2306:	02 c0       	rjmp	.+4      	; 0x230c <vfprintf+0x3ba>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	9f ef       	ldi	r25, 0xFF	; 255
    230c:	2b 96       	adiw	r28, 0x0b	; 11
    230e:	e2 e1       	ldi	r30, 0x12	; 18
    2310:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__>

00002314 <strnlen_P>:
    2314:	fc 01       	movw	r30, r24
    2316:	05 90       	lpm	r0, Z+
    2318:	61 50       	subi	r22, 0x01	; 1
    231a:	70 40       	sbci	r23, 0x00	; 0
    231c:	01 10       	cpse	r0, r1
    231e:	d8 f7       	brcc	.-10     	; 0x2316 <strnlen_P+0x2>
    2320:	80 95       	com	r24
    2322:	90 95       	com	r25
    2324:	8e 0f       	add	r24, r30
    2326:	9f 1f       	adc	r25, r31
    2328:	08 95       	ret

0000232a <strnlen>:
    232a:	fc 01       	movw	r30, r24
    232c:	61 50       	subi	r22, 0x01	; 1
    232e:	70 40       	sbci	r23, 0x00	; 0
    2330:	01 90       	ld	r0, Z+
    2332:	01 10       	cpse	r0, r1
    2334:	d8 f7       	brcc	.-10     	; 0x232c <strnlen+0x2>
    2336:	80 95       	com	r24
    2338:	90 95       	com	r25
    233a:	8e 0f       	add	r24, r30
    233c:	9f 1f       	adc	r25, r31
    233e:	08 95       	ret

00002340 <fputc>:
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	fb 01       	movw	r30, r22
    234a:	23 81       	ldd	r18, Z+3	; 0x03
    234c:	21 fd       	sbrc	r18, 1
    234e:	03 c0       	rjmp	.+6      	; 0x2356 <fputc+0x16>
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	9f ef       	ldi	r25, 0xFF	; 255
    2354:	2c c0       	rjmp	.+88     	; 0x23ae <fputc+0x6e>
    2356:	22 ff       	sbrs	r18, 2
    2358:	16 c0       	rjmp	.+44     	; 0x2386 <fputc+0x46>
    235a:	46 81       	ldd	r20, Z+6	; 0x06
    235c:	57 81       	ldd	r21, Z+7	; 0x07
    235e:	24 81       	ldd	r18, Z+4	; 0x04
    2360:	35 81       	ldd	r19, Z+5	; 0x05
    2362:	42 17       	cp	r20, r18
    2364:	53 07       	cpc	r21, r19
    2366:	44 f4       	brge	.+16     	; 0x2378 <fputc+0x38>
    2368:	a0 81       	ld	r26, Z
    236a:	b1 81       	ldd	r27, Z+1	; 0x01
    236c:	9d 01       	movw	r18, r26
    236e:	2f 5f       	subi	r18, 0xFF	; 255
    2370:	3f 4f       	sbci	r19, 0xFF	; 255
    2372:	31 83       	std	Z+1, r19	; 0x01
    2374:	20 83       	st	Z, r18
    2376:	8c 93       	st	X, r24
    2378:	26 81       	ldd	r18, Z+6	; 0x06
    237a:	37 81       	ldd	r19, Z+7	; 0x07
    237c:	2f 5f       	subi	r18, 0xFF	; 255
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	37 83       	std	Z+7, r19	; 0x07
    2382:	26 83       	std	Z+6, r18	; 0x06
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <fputc+0x6e>
    2386:	8b 01       	movw	r16, r22
    2388:	ec 01       	movw	r28, r24
    238a:	fb 01       	movw	r30, r22
    238c:	00 84       	ldd	r0, Z+8	; 0x08
    238e:	f1 85       	ldd	r31, Z+9	; 0x09
    2390:	e0 2d       	mov	r30, r0
    2392:	09 95       	icall
    2394:	89 2b       	or	r24, r25
    2396:	e1 f6       	brne	.-72     	; 0x2350 <fputc+0x10>
    2398:	d8 01       	movw	r26, r16
    239a:	16 96       	adiw	r26, 0x06	; 6
    239c:	8d 91       	ld	r24, X+
    239e:	9c 91       	ld	r25, X
    23a0:	17 97       	sbiw	r26, 0x07	; 7
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	17 96       	adiw	r26, 0x07	; 7
    23a6:	9c 93       	st	X, r25
    23a8:	8e 93       	st	-X, r24
    23aa:	16 97       	sbiw	r26, 0x06	; 6
    23ac:	ce 01       	movw	r24, r28
    23ae:	df 91       	pop	r29
    23b0:	cf 91       	pop	r28
    23b2:	1f 91       	pop	r17
    23b4:	0f 91       	pop	r16
    23b6:	08 95       	ret

000023b8 <__ultoa_invert>:
    23b8:	fa 01       	movw	r30, r20
    23ba:	aa 27       	eor	r26, r26
    23bc:	28 30       	cpi	r18, 0x08	; 8
    23be:	51 f1       	breq	.+84     	; 0x2414 <__ultoa_invert+0x5c>
    23c0:	20 31       	cpi	r18, 0x10	; 16
    23c2:	81 f1       	breq	.+96     	; 0x2424 <__ultoa_invert+0x6c>
    23c4:	e8 94       	clt
    23c6:	6f 93       	push	r22
    23c8:	6e 7f       	andi	r22, 0xFE	; 254
    23ca:	6e 5f       	subi	r22, 0xFE	; 254
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	8f 4f       	sbci	r24, 0xFF	; 255
    23d0:	9f 4f       	sbci	r25, 0xFF	; 255
    23d2:	af 4f       	sbci	r26, 0xFF	; 255
    23d4:	b1 e0       	ldi	r27, 0x01	; 1
    23d6:	3e d0       	rcall	.+124    	; 0x2454 <__ultoa_invert+0x9c>
    23d8:	b4 e0       	ldi	r27, 0x04	; 4
    23da:	3c d0       	rcall	.+120    	; 0x2454 <__ultoa_invert+0x9c>
    23dc:	67 0f       	add	r22, r23
    23de:	78 1f       	adc	r23, r24
    23e0:	89 1f       	adc	r24, r25
    23e2:	9a 1f       	adc	r25, r26
    23e4:	a1 1d       	adc	r26, r1
    23e6:	68 0f       	add	r22, r24
    23e8:	79 1f       	adc	r23, r25
    23ea:	8a 1f       	adc	r24, r26
    23ec:	91 1d       	adc	r25, r1
    23ee:	a1 1d       	adc	r26, r1
    23f0:	6a 0f       	add	r22, r26
    23f2:	71 1d       	adc	r23, r1
    23f4:	81 1d       	adc	r24, r1
    23f6:	91 1d       	adc	r25, r1
    23f8:	a1 1d       	adc	r26, r1
    23fa:	20 d0       	rcall	.+64     	; 0x243c <__ultoa_invert+0x84>
    23fc:	09 f4       	brne	.+2      	; 0x2400 <__ultoa_invert+0x48>
    23fe:	68 94       	set
    2400:	3f 91       	pop	r19
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	26 9f       	mul	r18, r22
    2406:	11 24       	eor	r1, r1
    2408:	30 19       	sub	r19, r0
    240a:	30 5d       	subi	r19, 0xD0	; 208
    240c:	31 93       	st	Z+, r19
    240e:	de f6       	brtc	.-74     	; 0x23c6 <__ultoa_invert+0xe>
    2410:	cf 01       	movw	r24, r30
    2412:	08 95       	ret
    2414:	46 2f       	mov	r20, r22
    2416:	47 70       	andi	r20, 0x07	; 7
    2418:	40 5d       	subi	r20, 0xD0	; 208
    241a:	41 93       	st	Z+, r20
    241c:	b3 e0       	ldi	r27, 0x03	; 3
    241e:	0f d0       	rcall	.+30     	; 0x243e <__ultoa_invert+0x86>
    2420:	c9 f7       	brne	.-14     	; 0x2414 <__ultoa_invert+0x5c>
    2422:	f6 cf       	rjmp	.-20     	; 0x2410 <__ultoa_invert+0x58>
    2424:	46 2f       	mov	r20, r22
    2426:	4f 70       	andi	r20, 0x0F	; 15
    2428:	40 5d       	subi	r20, 0xD0	; 208
    242a:	4a 33       	cpi	r20, 0x3A	; 58
    242c:	18 f0       	brcs	.+6      	; 0x2434 <__ultoa_invert+0x7c>
    242e:	49 5d       	subi	r20, 0xD9	; 217
    2430:	31 fd       	sbrc	r19, 1
    2432:	40 52       	subi	r20, 0x20	; 32
    2434:	41 93       	st	Z+, r20
    2436:	02 d0       	rcall	.+4      	; 0x243c <__ultoa_invert+0x84>
    2438:	a9 f7       	brne	.-22     	; 0x2424 <__ultoa_invert+0x6c>
    243a:	ea cf       	rjmp	.-44     	; 0x2410 <__ultoa_invert+0x58>
    243c:	b4 e0       	ldi	r27, 0x04	; 4
    243e:	a6 95       	lsr	r26
    2440:	97 95       	ror	r25
    2442:	87 95       	ror	r24
    2444:	77 95       	ror	r23
    2446:	67 95       	ror	r22
    2448:	ba 95       	dec	r27
    244a:	c9 f7       	brne	.-14     	; 0x243e <__ultoa_invert+0x86>
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	61 05       	cpc	r22, r1
    2450:	71 05       	cpc	r23, r1
    2452:	08 95       	ret
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	0a 2e       	mov	r0, r26
    245a:	06 94       	lsr	r0
    245c:	57 95       	ror	r21
    245e:	47 95       	ror	r20
    2460:	37 95       	ror	r19
    2462:	27 95       	ror	r18
    2464:	ba 95       	dec	r27
    2466:	c9 f7       	brne	.-14     	; 0x245a <__ultoa_invert+0xa2>
    2468:	62 0f       	add	r22, r18
    246a:	73 1f       	adc	r23, r19
    246c:	84 1f       	adc	r24, r20
    246e:	95 1f       	adc	r25, r21
    2470:	a0 1d       	adc	r26, r0
    2472:	08 95       	ret

00002474 <__muluhisi3>:
    2474:	0e 94 84 12 	call	0x2508	; 0x2508 <__umulhisi3>
    2478:	a5 9f       	mul	r26, r21
    247a:	90 0d       	add	r25, r0
    247c:	b4 9f       	mul	r27, r20
    247e:	90 0d       	add	r25, r0
    2480:	a4 9f       	mul	r26, r20
    2482:	80 0d       	add	r24, r0
    2484:	91 1d       	adc	r25, r1
    2486:	11 24       	eor	r1, r1
    2488:	08 95       	ret

0000248a <__mulshisi3>:
    248a:	b7 ff       	sbrs	r27, 7
    248c:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__muluhisi3>

00002490 <__mulohisi3>:
    2490:	0e 94 3a 12 	call	0x2474	; 0x2474 <__muluhisi3>
    2494:	82 1b       	sub	r24, r18
    2496:	93 0b       	sbc	r25, r19
    2498:	08 95       	ret

0000249a <__prologue_saves__>:
    249a:	2f 92       	push	r2
    249c:	3f 92       	push	r3
    249e:	4f 92       	push	r4
    24a0:	5f 92       	push	r5
    24a2:	6f 92       	push	r6
    24a4:	7f 92       	push	r7
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	ca 1b       	sub	r28, r26
    24c4:	db 0b       	sbc	r29, r27
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	09 94       	ijmp

000024d2 <__epilogue_restores__>:
    24d2:	2a 88       	ldd	r2, Y+18	; 0x12
    24d4:	39 88       	ldd	r3, Y+17	; 0x11
    24d6:	48 88       	ldd	r4, Y+16	; 0x10
    24d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24da:	6e 84       	ldd	r6, Y+14	; 0x0e
    24dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    24de:	8c 84       	ldd	r8, Y+12	; 0x0c
    24e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24e4:	b9 84       	ldd	r11, Y+9	; 0x09
    24e6:	c8 84       	ldd	r12, Y+8	; 0x08
    24e8:	df 80       	ldd	r13, Y+7	; 0x07
    24ea:	ee 80       	ldd	r14, Y+6	; 0x06
    24ec:	fd 80       	ldd	r15, Y+5	; 0x05
    24ee:	0c 81       	ldd	r16, Y+4	; 0x04
    24f0:	1b 81       	ldd	r17, Y+3	; 0x03
    24f2:	aa 81       	ldd	r26, Y+2	; 0x02
    24f4:	b9 81       	ldd	r27, Y+1	; 0x01
    24f6:	ce 0f       	add	r28, r30
    24f8:	d1 1d       	adc	r29, r1
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	ed 01       	movw	r28, r26
    2506:	08 95       	ret

00002508 <__umulhisi3>:
    2508:	a2 9f       	mul	r26, r18
    250a:	b0 01       	movw	r22, r0
    250c:	b3 9f       	mul	r27, r19
    250e:	c0 01       	movw	r24, r0
    2510:	a3 9f       	mul	r26, r19
    2512:	70 0d       	add	r23, r0
    2514:	81 1d       	adc	r24, r1
    2516:	11 24       	eor	r1, r1
    2518:	91 1d       	adc	r25, r1
    251a:	b2 9f       	mul	r27, r18
    251c:	70 0d       	add	r23, r0
    251e:	81 1d       	adc	r24, r1
    2520:	11 24       	eor	r1, r1
    2522:	91 1d       	adc	r25, r1
    2524:	08 95       	ret

00002526 <_exit>:
    2526:	f8 94       	cli

00002528 <__stop_program>:
    2528:	ff cf       	rjmp	.-2      	; 0x2528 <__stop_program>
