
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00002a7a  00002b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cd  008001c2  008001c2  00002bd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b1c  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015bd  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002022  00000000  00000000  000080dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b48  00000000  00000000  0000a100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001100  00000000  00000000  0000ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f47  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0000ec8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 03 	jmp	0x692	; 0x692 <__ctors_end>
       4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      10:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_5>
      18:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      20:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      28:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      30:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      3c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      40:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__vector_16>
      44:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      50:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_20>
      54:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_21>
      58:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      5c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      60:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      68:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      6c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      70:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      74:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      78:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      7c:	19 06       	cpc	r1, r25
      7e:	28 06       	cpc	r2, r24
      80:	28 06       	cpc	r2, r24
      82:	28 06       	cpc	r2, r24
      84:	28 06       	cpc	r2, r24
      86:	28 06       	cpc	r2, r24
      88:	28 06       	cpc	r2, r24
      8a:	28 06       	cpc	r2, r24
      8c:	28 06       	cpc	r2, r24
      8e:	28 06       	cpc	r2, r24
      90:	28 06       	cpc	r2, r24
      92:	0e 06       	cpc	r0, r30
      94:	28 06       	cpc	r2, r24
      96:	96 05       	cpc	r25, r6
      98:	23 06       	cpc	r2, r19
      9a:	28 06       	cpc	r2, r24
      9c:	28 06       	cpc	r2, r24
      9e:	28 06       	cpc	r2, r24
      a0:	28 06       	cpc	r2, r24
      a2:	28 06       	cpc	r2, r24
      a4:	28 06       	cpc	r2, r24
      a6:	28 06       	cpc	r2, r24
      a8:	28 06       	cpc	r2, r24
      aa:	b7 05       	cpc	r27, r7
      ac:	28 06       	cpc	r2, r24
      ae:	28 06       	cpc	r2, r24
      b0:	28 06       	cpc	r2, r24
      b2:	28 06       	cpc	r2, r24
      b4:	e7 05       	cpc	r30, r7
      b6:	28 06       	cpc	r2, r24
      b8:	da 05       	cpc	r29, r10
      ba:	28 06       	cpc	r2, r24
      bc:	28 06       	cpc	r2, r24
      be:	28 06       	cpc	r2, r24
      c0:	28 06       	cpc	r2, r24
      c2:	28 06       	cpc	r2, r24
      c4:	28 06       	cpc	r2, r24
      c6:	28 06       	cpc	r2, r24
      c8:	ac 05       	cpc	r26, r12
      ca:	28 06       	cpc	r2, r24
      cc:	28 06       	cpc	r2, r24
      ce:	28 06       	cpc	r2, r24
      d0:	cd 05       	cpc	r28, r13
      d2:	28 06       	cpc	r2, r24
      d4:	c2 05       	cpc	r28, r2
      d6:	28 06       	cpc	r2, r24
      d8:	28 06       	cpc	r2, r24
      da:	28 06       	cpc	r2, r24
      dc:	1e 06       	cpc	r1, r30
      de:	28 06       	cpc	r2, r24
      e0:	28 06       	cpc	r2, r24
      e2:	28 06       	cpc	r2, r24
      e4:	28 06       	cpc	r2, r24
      e6:	28 06       	cpc	r2, r24
      e8:	28 06       	cpc	r2, r24
      ea:	28 06       	cpc	r2, r24
      ec:	28 06       	cpc	r2, r24
      ee:	28 06       	cpc	r2, r24
      f0:	28 06       	cpc	r2, r24
      f2:	28 06       	cpc	r2, r24
      f4:	28 06       	cpc	r2, r24
      f6:	28 06       	cpc	r2, r24
      f8:	f4 05       	cpc	r31, r4
      fa:	28 06       	cpc	r2, r24
      fc:	28 06       	cpc	r2, r24
      fe:	28 06       	cpc	r2, r24
     100:	28 06       	cpc	r2, r24
     102:	28 06       	cpc	r2, r24
     104:	28 06       	cpc	r2, r24
     106:	28 06       	cpc	r2, r24
     108:	28 06       	cpc	r2, r24
     10a:	28 06       	cpc	r2, r24
     10c:	28 06       	cpc	r2, r24
     10e:	28 06       	cpc	r2, r24
     110:	28 06       	cpc	r2, r24
     112:	28 06       	cpc	r2, r24
     114:	28 06       	cpc	r2, r24
     116:	28 06       	cpc	r2, r24
     118:	28 06       	cpc	r2, r24
     11a:	28 06       	cpc	r2, r24
     11c:	28 06       	cpc	r2, r24
     11e:	28 06       	cpc	r2, r24
     120:	28 06       	cpc	r2, r24
     122:	28 06       	cpc	r2, r24
     124:	28 06       	cpc	r2, r24
     126:	28 06       	cpc	r2, r24
     128:	01 06       	cpc	r0, r17
     12a:	28 06       	cpc	r2, r24
     12c:	28 06       	cpc	r2, r24
     12e:	28 06       	cpc	r2, r24
     130:	28 06       	cpc	r2, r24
     132:	28 06       	cpc	r2, r24
     134:	a1 05       	cpc	r26, r1

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2326>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2324>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2316>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2314>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2283>:
     550:	53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a 20     Student Number: 
     560:	34 34 33 31 37 39 36 32 00                          44317962.

00000569 <__c.2281>:
     569:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
     579:	20 62 79 20 3c 4a 75 61 6e 20 45 73 70 61 72 65      by <Juan Espare
     589:	73 3e 00                                            s>.

0000058c <__c.2279>:
     58c:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000594 <numbers>:
     594:	ff 05 fc 05 f8 05 f4 05 f0 05 ec 05 e8 05 e4 05     ................
     5a4:	e0 05 dc 05                                         ....

000005a8 <letters>:
     5a8:	6e 06 6a 06 66 06 62 06 5e 06 5a 06 56 06 52 06     n.j.f.b.^.Z.V.R.
     5b8:	4f 06 4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06     O.K.G.C.>.:.6.2.
     5c8:	2d 06 29 06 25 06 20 06 1c 06 17 06 12 06 0d 06     -.).%. .........
     5d8:	08 06 03 06                                         ....

000005dc <cols_9>:
     5dc:	64 92 92 7d                                         d..}

000005e0 <cols_8>:
     5e0:	6c 92 92 6d                                         l..m

000005e4 <cols_7>:
     5e4:	80 9e a0 c1                                         ....

000005e8 <cols_6>:
     5e8:	7c 92 92 4d                                         |..M

000005ec <cols_5>:
     5ec:	e4 a2 a2 9d                                         ....

000005f0 <cols_4>:
     5f0:	18 28 48 ff                                         .(H.

000005f4 <cols_3>:
     5f4:	44 92 92 6d                                         D..m

000005f8 <cols_2>:
     5f8:	46 8a 92 63                                         F..c

000005fc <cols_1>:
     5fc:	42 fe 03                                            B..

000005ff <cols_0>:
     5ff:	7c 92 a2 7d                                         |..}

00000603 <cols_Z>:
     603:	86 8a 92 a2 c3                                      .....

00000608 <cols_Y>:
     608:	e0 10 0e 10 e1                                      .....

0000060d <cols_X>:
     60d:	c6 28 10 28 c7                                      .(.(.

00000612 <cols_W>:
     612:	fc 02 1c 02 fd                                      .....

00000617 <cols_V>:
     617:	f8 04 02 04 f9                                      .....

0000061c <cols_U>:
     61c:	fc 02 02 fd                                         ....

00000620 <cols_T>:
     620:	80 80 fe 80 81                                      .....

00000625 <cols_S>:
     625:	64 92 92 4d                                         d..M

00000629 <cols_R>:
     629:	fe 90 98 67                                         ...g

0000062d <cols_Q>:
     62d:	7c 82 8a 7c 03                                      |..|.

00000632 <cols_P>:
     632:	fe 90 90 61                                         ...a

00000636 <cols_O>:
     636:	7c 82 82 7d                                         |..}

0000063a <cols_N>:
     63a:	fe 20 10 ff                                         . ..

0000063e <cols_M>:
     63e:	fe 40 30 40 ff                                      .@0@.

00000643 <cols_L>:
     643:	fe 02 02 03                                         ....

00000647 <cols_K>:
     647:	fe 10 28 c7                                         ..(.

0000064b <cols_J>:
     64b:	04 02 02 fd                                         ....

0000064f <cols_I>:
     64f:	82 fe 83                                            ...

00000652 <cols_H>:
     652:	fe 10 10 ff                                         ....

00000656 <cols_G>:
     656:	7c 82 92 5d                                         |..]

0000065a <cols_F>:
     65a:	fe 90 90 81                                         ....

0000065e <cols_E>:
     65e:	fe 92 92 83                                         ....

00000662 <cols_D>:
     662:	fe 82 82 7d                                         ...}

00000666 <cols_C>:
     666:	7c 82 82 45                                         |..E

0000066a <cols_B>:
     66a:	fe 92 92 6d                                         ...m

0000066e <cols_A>:
     66e:	7e 90 90 7f                                         ~...

00000672 <__c.2082>:
     672:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000679 <__c.2078>:
     679:	1b 5b 25 64 6d 00                                   .[%dm.

0000067f <__c.2068>:
     67f:	1b 5b 32 4a 00                                      .[2J.

00000684 <__c.2058>:
     684:	1b 5b 30 6d 00                                      .[0m.

00000689 <__c.2033>:
     689:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000692 <__ctors_end>:
     692:	11 24       	eor	r1, r1
     694:	1f be       	out	0x3f, r1	; 63
     696:	cf ef       	ldi	r28, 0xFF	; 255
     698:	d8 e0       	ldi	r29, 0x08	; 8
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61

0000069e <__do_copy_data>:
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	ea e7       	ldi	r30, 0x7A	; 122
     6a6:	fa e2       	ldi	r31, 0x2A	; 42
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__do_copy_data+0x10>
     6aa:	05 90       	lpm	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	a2 3c       	cpi	r26, 0xC2	; 194
     6b0:	b1 07       	cpc	r27, r17
     6b2:	d9 f7       	brne	.-10     	; 0x6aa <__do_copy_data+0xc>

000006b4 <__do_clear_bss>:
     6b4:	23 e0       	ldi	r18, 0x03	; 3
     6b6:	a2 ec       	ldi	r26, 0xC2	; 194
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
     6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
     6be:	af 38       	cpi	r26, 0x8F	; 143
     6c0:	b2 07       	cpc	r27, r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
     6c4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <main>
     6c8:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <_exit>

000006cc <__bad_interrupt>:
     6cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6d0:	e8 e6       	ldi	r30, 0x68	; 104
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6da:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6dc:	ec e6       	ldi	r30, 0x6C	; 108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 60       	ori	r24, 0x0F	; 15
     6e4:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6e6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
     6ea:	08 95       	ret

000006ec <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6ec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
     6f0:	18 16       	cp	r1, r24
     6f2:	3c f5       	brge	.+78     	; 0x742 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6f8:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6fa:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6fc:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	b4 f0       	brlt	.+44     	; 0x730 <button_pushed+0x44>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     70a:	f9 01       	movw	r30, r18
     70c:	ed 53       	subi	r30, 0x3D	; 61
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	40 81       	ld	r20, Z
     712:	f9 01       	movw	r30, r18
     714:	ee 53       	subi	r30, 0x3E	; 62
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	29 2f       	mov	r18, r25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <__data_end>
     724:	04 2e       	mov	r0, r20
     726:	00 0c       	add	r0, r0
     728:	55 0b       	sbc	r21, r21
     72a:	24 17       	cp	r18, r20
     72c:	35 07       	cpc	r19, r21
     72e:	6c f3       	brlt	.-38     	; 0x70a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     730:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__data_end>
		
		if(interrupts_were_enabled) {
     73a:	66 23       	and	r22, r22
     73c:	1c f4       	brge	.+6      	; 0x744 <button_pushed+0x58>
			// Turn them back on again
			sei();
     73e:	78 94       	sei
     740:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     742:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     744:	08 95       	ret

00000746 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     764:	43 b1       	in	r20, 0x03	; 3
     766:	4f 70       	andi	r20, 0x0F	; 15
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     76c:	64 2f       	mov	r22, r20
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__data_end>
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	04 f5       	brge	.+64     	; 0x7b8 <__vector_5+0x72>
     778:	9b 01       	movw	r18, r22
     77a:	08 2e       	mov	r0, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_5+0x3c>
     77e:	35 95       	asr	r19
     780:	27 95       	ror	r18
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <__vector_5+0x38>
     786:	20 ff       	sbrs	r18, 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     78a:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	08 2e       	mov	r0, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x52>
     794:	35 95       	asr	r19
     796:	27 95       	ror	r18
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <__vector_5+0x4e>
     79c:	20 fd       	sbrc	r18, 0
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7a0:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <__data_end>
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	2e 0f       	add	r18, r30
     7a8:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <__data_end>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 0b       	sbc	r31, r31
     7b2:	ed 53       	subi	r30, 0x3D	; 61
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f6       	brne	.-80     	; 0x770 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7c0:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <last_button_state>
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <is_ghost_home>:

void set_lives(int8_t num){
	lives += num; 
	//cap max lives 
	if(lives > MAX_LIVES){
		lives = MAX_LIVES; 
     7e2:	6f 30       	cpi	r22, 0x0F	; 15
     7e4:	39 f4       	brne	.+14     	; 0x7f4 <is_ghost_home+0x12>
     7e6:	94 ef       	ldi	r25, 0xF4	; 244
     7e8:	98 0f       	add	r25, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	97 30       	cpi	r25, 0x07	; 7
     7ee:	60 f0       	brcs	.+24     	; 0x808 <is_ghost_home+0x26>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
     7f4:	6e 30       	cpi	r22, 0x0E	; 14
     7f6:	39 f4       	brne	.+14     	; 0x806 <is_ghost_home+0x24>
     7f8:	92 ef       	ldi	r25, 0xF2	; 242
     7fa:	98 0f       	add	r25, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	93 30       	cpi	r25, 0x03	; 3
     800:	18 f0       	brcs	.+6      	; 0x808 <is_ghost_home+0x26>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret

0000080a <what_is_in_dirn>:
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <what_is_in_dirn+0x30>
     816:	28 f0       	brcs	.+10     	; 0x822 <what_is_in_dirn+0x18>
     818:	42 30       	cpi	r20, 0x02	; 2
     81a:	49 f0       	breq	.+18     	; 0x82e <what_is_in_dirn+0x24>
     81c:	43 30       	cpi	r20, 0x03	; 3
     81e:	99 f0       	breq	.+38     	; 0x846 <what_is_in_dirn+0x3c>
     820:	5e c0       	rjmp	.+188    	; 0x8de <what_is_in_dirn+0xd4>
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <what_is_in_dirn+0x1e>
     826:	5d c0       	rjmp	.+186    	; 0x8e2 <what_is_in_dirn+0xd8>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	11 c0       	rjmp	.+34     	; 0x850 <what_is_in_dirn+0x46>
     82e:	8e 31       	cpi	r24, 0x1E	; 30
     830:	09 f4       	brne	.+2      	; 0x834 <what_is_in_dirn+0x2a>
     832:	59 c0       	rjmp	.+178    	; 0x8e6 <what_is_in_dirn+0xdc>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0b c0       	rjmp	.+22     	; 0x850 <what_is_in_dirn+0x46>
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <what_is_in_dirn+0x36>
     83e:	55 c0       	rjmp	.+170    	; 0x8ea <what_is_in_dirn+0xe0>
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <what_is_in_dirn+0x46>
     846:	6e 31       	cpi	r22, 0x1E	; 30
     848:	09 f4       	brne	.+2      	; 0x84c <what_is_in_dirn+0x42>
     84a:	51 c0       	rjmp	.+162    	; 0x8ee <what_is_in_dirn+0xe4>
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	62 0f       	add	r22, r18
     852:	89 0f       	add	r24, r25
     854:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pacman_x>
     858:	89 13       	cpse	r24, r25
     85a:	05 c0       	rjmp	.+10     	; 0x866 <what_is_in_dirn+0x5c>
     85c:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <pacman_y>
     860:	69 17       	cp	r22, r25
     862:	09 f4       	brne	.+2      	; 0x866 <what_is_in_dirn+0x5c>
     864:	46 c0       	rjmp	.+140    	; 0x8f2 <what_is_in_dirn+0xe8>
     866:	a1 ed       	ldi	r26, 0xD1	; 209
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	ed ec       	ldi	r30, 0xCD	; 205
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2d 91       	ld	r18, X+
     872:	82 13       	cpse	r24, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <what_is_in_dirn+0x74>
     876:	20 81       	ld	r18, Z
     878:	62 17       	cp	r22, r18
     87a:	09 f4       	brne	.+2      	; 0x87e <what_is_in_dirn+0x74>
     87c:	3c c0       	rjmp	.+120    	; 0x8f6 <what_is_in_dirn+0xec>
     87e:	9f 5f       	subi	r25, 0xFF	; 255
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	a9 f7       	brne	.-22     	; 0x870 <what_is_in_dirn+0x66>
     886:	46 2f       	mov	r20, r22
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	fa 01       	movw	r30, r20
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e5 52       	subi	r30, 0x25	; 37
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	c0 80       	ld	r12, Z
     89e:	d1 80       	ldd	r13, Z+1	; 0x01
     8a0:	e2 80       	ldd	r14, Z+2	; 0x02
     8a2:	f3 80       	ldd	r15, Z+3	; 0x03
     8a4:	08 2e       	mov	r0, r24
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <what_is_in_dirn+0xa6>
     8a8:	f6 94       	lsr	r15
     8aa:	e7 94       	ror	r14
     8ac:	d7 94       	ror	r13
     8ae:	c7 94       	ror	r12
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <what_is_in_dirn+0x9e>
     8b4:	c0 fc       	sbrc	r12, 0
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <what_is_in_dirn+0xf0>
     8b8:	9f e1       	ldi	r25, 0x1F	; 31
     8ba:	94 9f       	mul	r25, r20
     8bc:	f0 01       	movw	r30, r0
     8be:	95 9f       	mul	r25, r21
     8c0:	f0 0d       	add	r31, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e2 0f       	add	r30, r18
     8c6:	f3 1f       	adc	r31, r19
     8c8:	ea 5c       	subi	r30, 0xCA	; 202
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	e4 91       	lpm	r30, Z
     8ce:	e0 32       	cpi	r30, 0x20	; 32
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
     8d2:	ee 32       	cpi	r30, 0x2E	; 46
     8d4:	b1 f0       	breq	.+44     	; 0x902 <__stack+0x3>
     8d6:	e0 35       	cpi	r30, 0x50	; 80
     8d8:	a1 f0       	breq	.+40     	; 0x902 <__stack+0x3>
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	17 c0       	rjmp	.+46     	; 0x90c <__stack+0xd>
     8de:	8e ef       	ldi	r24, 0xFE	; 254
     8e0:	15 c0       	rjmp	.+42     	; 0x90c <__stack+0xd>
     8e2:	8e ef       	ldi	r24, 0xFE	; 254
     8e4:	13 c0       	rjmp	.+38     	; 0x90c <__stack+0xd>
     8e6:	8e ef       	ldi	r24, 0xFE	; 254
     8e8:	11 c0       	rjmp	.+34     	; 0x90c <__stack+0xd>
     8ea:	8e ef       	ldi	r24, 0xFE	; 254
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <__stack+0xd>
     8ee:	8e ef       	ldi	r24, 0xFE	; 254
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
     8f2:	8d ef       	ldi	r24, 0xFD	; 253
     8f4:	0b c0       	rjmp	.+22     	; 0x90c <__stack+0xd>
     8f6:	89 2f       	mov	r24, r25
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
     8fa:	8c ef       	ldi	r24, 0xFC	; 252
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xd>
     902:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     906:	81 11       	cpse	r24, r1
     908:	fa cf       	rjmp	.-12     	; 0x8fe <what_is_in_dirn+0xf4>
     90a:	8b ef       	ldi	r24, 0xFB	; 251
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	08 95       	ret

00000916 <determine_dirns_ghost_can_move_in>:
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	08 2f       	mov	r16, r24
     928:	f6 2e       	mov	r15, r22
     92a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     92e:	e8 2e       	mov	r14, r24
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	cc 24       	eor	r12, r12
     938:	c3 94       	inc	r12
     93a:	d1 2c       	mov	r13, r1
     93c:	4c 2f       	mov	r20, r28
     93e:	6f 2d       	mov	r22, r15
     940:	80 2f       	mov	r24, r16
     942:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     946:	8e 3f       	cpi	r24, 0xFE	; 254
     948:	4c f4       	brge	.+18     	; 0x95c <determine_dirns_ghost_can_move_in+0x46>
     94a:	c6 01       	movw	r24, r12
     94c:	0c 2e       	mov	r0, r28
     94e:	02 c0       	rjmp	.+4      	; 0x954 <determine_dirns_ghost_can_move_in+0x3e>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <determine_dirns_ghost_can_move_in+0x3a>
     958:	18 2b       	or	r17, r24
     95a:	0c c0       	rjmp	.+24     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
     95c:	ee 20       	and	r14, r14
     95e:	51 f0       	breq	.+20     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	41 f4       	brne	.+16     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
     964:	c6 01       	movw	r24, r12
     966:	0c 2e       	mov	r0, r28
     968:	02 c0       	rjmp	.+4      	; 0x96e <determine_dirns_ghost_can_move_in+0x58>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	0a 94       	dec	r0
     970:	e2 f7       	brpl	.-8      	; 0x96a <determine_dirns_ghost_can_move_in+0x54>
     972:	18 2b       	or	r17, r24
     974:	21 96       	adiw	r28, 0x01	; 1
     976:	c4 30       	cpi	r28, 0x04	; 4
     978:	d1 05       	cpc	r29, r1
     97a:	01 f7       	brne	.-64     	; 0x93c <determine_dirns_ghost_can_move_in+0x26>
     97c:	81 2f       	mov	r24, r17
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <draw_pacman_at>:
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
     99e:	81 e2       	ldi	r24, 0x21	; 33
     9a0:	0e 94 42 10 	call	0x2084	; 0x2084 <set_display_attribute>
     9a4:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <pacman_direction>
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ea 56       	subi	r30, 0x6A	; 106
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
     9b4:	8f 93       	push	r24
     9b6:	80 81       	ld	r24, Z
     9b8:	8f 93       	push	r24
     9ba:	83 e1       	ldi	r24, 0x13	; 19
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     9c6:	0e 94 30 10 	call	0x2060	; 0x2060 <normal_display_mode>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	08 95       	ret

000009d4 <draw_ghost_at>:
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	18 2f       	mov	r17, r24
     9de:	06 2f       	mov	r16, r22
     9e0:	c4 2f       	mov	r28, r20
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	86 2f       	mov	r24, r22
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
     9f4:	e1 2f       	mov	r30, r17
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e2 56       	subi	r30, 0x62	; 98
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 42 10 	call	0x2084	; 0x2084 <set_display_attribute>
     a02:	cc 0f       	add	r28, r28
     a04:	dd 1f       	adc	r29, r29
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	c5 52       	subi	r28, 0x25	; 37
     a0c:	de 4f       	sbci	r29, 0xFE	; 254
     a0e:	88 81       	ld	r24, Y
     a10:	99 81       	ldd	r25, Y+1	; 0x01
     a12:	aa 81       	ldd	r26, Y+2	; 0x02
     a14:	bb 81       	ldd	r27, Y+3	; 0x03
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <draw_ghost_at+0x4c>
     a18:	b6 95       	lsr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	0a 95       	dec	r16
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <draw_ghost_at+0x44>
     a24:	80 ff       	sbrs	r24, 0
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <draw_ghost_at+0x5e>
     a28:	8e e2       	ldi	r24, 0x2E	; 46
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <draw_ghost_at+0x66>
     a32:	80 e2       	ldi	r24, 0x20	; 32
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     a3a:	0e 94 30 10 	call	0x2060	; 0x2060 <normal_display_mode>
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <erase_pixel_at>:
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	18 2f       	mov	r17, r24
     a50:	c6 2f       	mov	r28, r22
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
     a62:	cc 0f       	add	r28, r28
     a64:	dd 1f       	adc	r29, r29
     a66:	cc 0f       	add	r28, r28
     a68:	dd 1f       	adc	r29, r29
     a6a:	c5 52       	subi	r28, 0x25	; 37
     a6c:	de 4f       	sbci	r29, 0xFE	; 254
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	aa 81       	ldd	r26, Y+2	; 0x02
     a74:	bb 81       	ldd	r27, Y+3	; 0x03
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <erase_pixel_at+0x38>
     a78:	b6 95       	lsr	r27
     a7a:	a7 95       	ror	r26
     a7c:	97 95       	ror	r25
     a7e:	87 95       	ror	r24
     a80:	1a 95       	dec	r17
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <erase_pixel_at+0x30>
     a84:	80 ff       	sbrs	r24, 0
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <erase_pixel_at+0x4a>
     a88:	8e e2       	ldi	r24, 0x2E	; 46
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <erase_pixel_at+0x52>
     a92:	80 e2       	ldi	r24, 0x20	; 32
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	08 95       	ret

00000aa2 <get_lives>:
     aa2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
     aa6:	08 95       	ret

00000aa8 <reset_lives>:
		lives  = 0; 
	}
	
}
void reset_lives(void){
	lives = MAX_LIVES; 
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lives>
     aae:	08 95       	ret

00000ab0 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     ad4:	0e 94 39 10 	call	0x2072	; 0x2072 <clear_terminal>
	normal_display_mode();
     ad8:	0e 94 30 10 	call	0x2060	; 0x2060 <normal_display_mode>
	hide_cursor();
     adc:	0e 94 4f 10 	call	0x209e	; 0x209e <hide_cursor>
	move_cursor(1,1);	// Start at top left
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
     aec:	0f 2e       	mov	r0, r31
     aee:	f5 e5       	ldi	r31, 0x55	; 85
     af0:	6f 2e       	mov	r6, r31
     af2:	f1 e0       	ldi	r31, 0x01	; 1
     af4:	7f 2e       	mov	r7, r31
     af6:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     af8:	0f 2e       	mov	r0, r31
     afa:	fe e3       	ldi	r31, 0x3E	; 62
     afc:	2f 2e       	mov	r2, r31
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	3f 2e       	mov	r3, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	0f 2e       	mov	r0, r31
     b06:	f3 e1       	ldi	r31, 0x13	; 19
     b08:	4f 2e       	mov	r4, r31
     b0a:	f1 e0       	ldi	r31, 0x01	; 1
     b0c:	5f 2e       	mov	r5, r31
     b0e:	f0 2d       	mov	r31, r0
     b10:	b6 c0       	rjmp	.+364    	; 0xc7e <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     b12:	f6 01       	movw	r30, r12
     b14:	84 91       	lpm	r24, Z
			switch(wall_character) {
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	fc 01       	movw	r30, r24
     b1a:	b0 97       	sbiw	r30, 0x20	; 32
     b1c:	ed 35       	cpi	r30, 0x5D	; 93
     b1e:	f1 05       	cpc	r31, r1
     b20:	08 f0       	brcs	.+2      	; 0xb24 <initialise_game_level+0x74>
     b22:	96 c0       	rjmp	.+300    	; 0xc50 <initialise_game_level+0x1a0>
     b24:	e2 5c       	subi	r30, 0xC2	; 194
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     b2c:	9f 92       	push	r9
     b2e:	8f 92       	push	r8
     b30:	5f 92       	push	r5
     b32:	4f 92       	push	r4
     b34:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	8b c0       	rjmp	.+278    	; 0xc58 <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     b42:	bf 92       	push	r11
     b44:	af 92       	push	r10
     b46:	5f 92       	push	r5
     b48:	4f 92       	push	r4
     b4a:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	80 c0       	rjmp	.+256    	; 0xc58 <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	5f 92       	push	r5
     b5e:	4f 92       	push	r4
     b60:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	75 c0       	rjmp	.+234    	; 0xc58 <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     b6e:	1f 93       	push	r17
     b70:	0f 93       	push	r16
     b72:	5f 92       	push	r5
     b74:	4f 92       	push	r4
     b76:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	6a c0       	rjmp	.+212    	; 0xc58 <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     b84:	ff 92       	push	r15
     b86:	ef 92       	push	r14
     b88:	5f 92       	push	r5
     b8a:	4f 92       	push	r4
     b8c:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	5f c0       	rjmp	.+190    	; 0xc58 <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     b9a:	8a e2       	ldi	r24, 0x2A	; 42
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	5f 92       	push	r5
     ba4:	4f 92       	push	r4
     ba6:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	52 c0       	rjmp	.+164    	; 0xc58 <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     bb4:	8e e2       	ldi	r24, 0x2E	; 46
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	5f 92       	push	r5
     bbe:	4f 92       	push	r4
     bc0:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	45 c0       	rjmp	.+138    	; 0xc58 <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     bce:	82 e3       	ldi	r24, 0x32	; 50
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	5f 92       	push	r5
     bd8:	4f 92       	push	r4
     bda:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	38 c0       	rjmp	.+112    	; 0xc58 <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     be8:	86 e3       	ldi	r24, 0x36	; 54
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	5f 92       	push	r5
     bf2:	4f 92       	push	r4
     bf4:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	2b c0       	rjmp	.+86     	; 0xc58 <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     c02:	8a e3       	ldi	r24, 0x3A	; 58
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	9f 93       	push	r25
     c08:	8f 93       	push	r24
     c0a:	5f 92       	push	r5
     c0c:	4f 92       	push	r4
     c0e:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	1e c0       	rjmp	.+60     	; 0xc58 <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     c1c:	3f 92       	push	r3
     c1e:	2f 92       	push	r2
     c20:	5f 92       	push	r5
     c22:	4f 92       	push	r4
     c24:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	13 c0       	rjmp	.+38     	; 0xc58 <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     c32:	80 e2       	ldi	r24, 0x20	; 32
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     c3a:	0e c0       	rjmp	.+28     	; 0xc58 <initialise_game_level+0x1a8>
				case 'P':	printf("."); break;	// power-pellet initially just implemented as a pac-dot
     c3c:	8e e2       	ldi	r24, 0x2E	; 46
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     c44:	09 c0       	rjmp	.+18     	; 0xc58 <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     c46:	8e e2       	ldi	r24, 0x2E	; 46
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     c50:	88 e7       	ldi	r24, 0x78	; 120
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     c58:	ff ef       	ldi	r31, 0xFF	; 255
     c5a:	cf 1a       	sub	r12, r31
     c5c:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     c5e:	6c 14       	cp	r6, r12
     c60:	7d 04       	cpc	r7, r13
     c62:	09 f0       	breq	.+2      	; 0xc66 <initialise_game_level+0x1b6>
     c64:	56 cf       	rjmp	.-340    	; 0xb12 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     c66:	8a e0       	ldi	r24, 0x0A	; 10
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 1a 12 	call	0x2434	; 0x2434 <putchar>
     c6e:	2f e1       	ldi	r18, 0x1F	; 31
     c70:	62 0e       	add	r6, r18
     c72:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     c74:	86 e1       	ldi	r24, 0x16	; 22
     c76:	95 e0       	ldi	r25, 0x05	; 5
     c78:	86 15       	cp	r24, r6
     c7a:	97 05       	cpc	r25, r7
     c7c:	d9 f0       	breq	.+54     	; 0xcb4 <initialise_game_level+0x204>
     c7e:	63 01       	movw	r12, r6
     c80:	9f e1       	ldi	r25, 0x1F	; 31
     c82:	c9 1a       	sub	r12, r25
     c84:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c86:	0f 2e       	mov	r0, r31
     c88:	f6 e2       	ldi	r31, 0x26	; 38
     c8a:	ef 2e       	mov	r14, r31
     c8c:	f1 e0       	ldi	r31, 0x01	; 1
     c8e:	ff 2e       	mov	r15, r31
     c90:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c92:	02 e2       	ldi	r16, 0x22	; 34
     c94:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     c96:	ce e1       	ldi	r28, 0x1E	; 30
     c98:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     c9a:	0f 2e       	mov	r0, r31
     c9c:	fa e1       	ldi	r31, 0x1A	; 26
     c9e:	af 2e       	mov	r10, r31
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	bf 2e       	mov	r11, r31
     ca4:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     ca6:	0f 2e       	mov	r0, r31
     ca8:	f6 e1       	ldi	r31, 0x16	; 22
     caa:	8f 2e       	mov	r8, r31
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	9f 2e       	mov	r9, r31
     cb0:	f0 2d       	mov	r31, r0
     cb2:	2f cf       	rjmp	.-418    	; 0xb12 <initialise_game_level+0x62>
     cb4:	cb ed       	ldi	r28, 0xDB	; 219
     cb6:	d1 e0       	ldi	r29, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' || wall_character == 'P') {
				pacdots[y] |= (1UL<<x);
     cc0:	81 2c       	mov	r8, r1
     cc2:	91 2c       	mov	r9, r1
     cc4:	54 01       	movw	r10, r8
     cc6:	83 94       	inc	r8
     cc8:	de 01       	movw	r26, r28

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     cca:	18 82       	st	Y, r1
     ccc:	19 82       	std	Y+1, r1	; 0x01
     cce:	1a 82       	std	Y+2, r1	; 0x02
     cd0:	1b 82       	std	Y+3, r1	; 0x03
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	ea 5c       	subi	r30, 0xCA	; 202
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	e4 91       	lpm	r30, Z
			if(wall_character == '.' || wall_character == 'P') {
     ce2:	ee 32       	cpi	r30, 0x2E	; 46
     ce4:	11 f0       	breq	.+4      	; 0xcea <initialise_game_level+0x23a>
     ce6:	e0 35       	cpi	r30, 0x50	; 80
     ce8:	d1 f4       	brne	.+52     	; 0xd1e <initialise_game_level+0x26e>
				pacdots[y] |= (1UL<<x);
     cea:	4d 90       	ld	r4, X+
     cec:	5d 90       	ld	r5, X+
     cee:	6d 90       	ld	r6, X+
     cf0:	7c 90       	ld	r7, X
     cf2:	13 97       	sbiw	r26, 0x03	; 3
     cf4:	75 01       	movw	r14, r10
     cf6:	64 01       	movw	r12, r8
     cf8:	08 2e       	mov	r0, r24
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <initialise_game_level+0x254>
     cfc:	cc 0c       	add	r12, r12
     cfe:	dd 1c       	adc	r13, r13
     d00:	ee 1c       	adc	r14, r14
     d02:	ff 1c       	adc	r15, r15
     d04:	0a 94       	dec	r0
     d06:	d2 f7       	brpl	.-12     	; 0xcfc <initialise_game_level+0x24c>
     d08:	c4 28       	or	r12, r4
     d0a:	d5 28       	or	r13, r5
     d0c:	e6 28       	or	r14, r6
     d0e:	f7 28       	or	r15, r7
     d10:	cd 92       	st	X+, r12
     d12:	dd 92       	st	X+, r13
     d14:	ed 92       	st	X+, r14
     d16:	fc 92       	st	X, r15
     d18:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	01 96       	adiw	r24, 0x01	; 1
static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     d20:	8f 31       	cpi	r24, 0x1F	; 31
     d22:	91 05       	cpc	r25, r1
     d24:	c1 f6       	brne	.-80     	; 0xcd6 <initialise_game_level+0x226>
     d26:	21 5e       	subi	r18, 0xE1	; 225
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	24 96       	adiw	r28, 0x04	; 4
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d2c:	21 3c       	cpi	r18, 0xC1	; 193
     d2e:	e3 e0       	ldi	r30, 0x03	; 3
     d30:	3e 07       	cpc	r19, r30
     d32:	51 f6       	brne	.-108    	; 0xcc8 <initialise_game_level+0x218>
     d34:	50 93 da 01 	sts	0x01DA, r21	; 0x8001da <num_pacdots+0x1>
     d38:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     d3c:	8f e0       	ldi	r24, 0x0F	; 15
     d3e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     d42:	87 e1       	ldi	r24, 0x17	; 23
     d44:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     d4e:	67 e1       	ldi	r22, 0x17	; 23
     d50:	8f e0       	ldi	r24, 0x0F	; 15
     d52:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
     d56:	0f 2e       	mov	r0, r31
     d58:	f1 ed       	ldi	r31, 0xD1	; 209
     d5a:	af 2e       	mov	r10, r31
     d5c:	f1 e0       	ldi	r31, 0x01	; 1
     d5e:	bf 2e       	mov	r11, r31
     d60:	f0 2d       	mov	r31, r0
     d62:	0f 2e       	mov	r0, r31
     d64:	fd ec       	ldi	r31, 0xCD	; 205
     d66:	cf 2e       	mov	r12, r31
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	df 2e       	mov	r13, r31
     d6c:	f0 2d       	mov	r31, r0
     d6e:	0f 2e       	mov	r0, r31
     d70:	f9 ec       	ldi	r31, 0xC9	; 201
     d72:	ef 2e       	mov	r14, r31
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	ff 2e       	mov	r15, r31
     d78:	f0 2d       	mov	r31, r0
     d7a:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     d7e:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     d80:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     d82:	f5 01       	movw	r30, r10
     d84:	d1 93       	st	Z+, r29
     d86:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     d88:	f6 01       	movw	r30, r12
     d8a:	11 93       	st	Z+, r17
     d8c:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     d8e:	f7 01       	movw	r30, r14
     d90:	01 93       	st	Z+, r16
     d92:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     d94:	41 2f       	mov	r20, r17
     d96:	6d 2f       	mov	r22, r29
     d98:	8c 2f       	mov	r24, r28
     d9a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
     d9e:	cf 5f       	subi	r28, 0xFF	; 255
     da0:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     da2:	c4 30       	cpi	r28, 0x04	; 4
     da4:	71 f7       	brne	.-36     	; 0xd82 <initialise_game_level+0x2d2>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	5f 90       	pop	r5
     dc4:	4f 90       	pop	r4
     dc6:	3f 90       	pop	r3
     dc8:	2f 90       	pop	r2
     dca:	08 95       	ret

00000dcc <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     dcc:	0e 94 58 05 	call	0xab0	; 0xab0 <initialise_game_level>
	game_running = 1;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <game_running>
     dd6:	08 95       	ret

00000dd8 <move_pacman>:
}

int8_t move_pacman(void) {
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
	if(!game_running) {
     de8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <game_running>
     dec:	88 23       	and	r24, r24
     dee:	09 f4       	brne	.+2      	; 0xdf2 <move_pacman+0x1a>
     df0:	23 c1       	rjmp	.+582    	; 0x1038 <move_pacman+0x260>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     df2:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
     df6:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
     dfa:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <pacman_direction>
     dfe:	61 2f       	mov	r22, r17
     e00:	8d 2f       	mov	r24, r29
     e02:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     e06:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL)  {
     e08:	8e 3f       	cpi	r24, 0xFE	; 254
     e0a:	09 f4       	brne	.+2      	; 0xe0e <move_pacman+0x36>
     e0c:	17 c1       	rjmp	.+558    	; 0x103c <move_pacman+0x264>
		
		
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     e0e:	61 2f       	mov	r22, r17
     e10:	8d 2f       	mov	r24, r29
     e12:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	// Update the pac-man location
	
	 if (pacman_direction == DIRN_LEFT) {
     e16:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <pacman_direction>
     e1a:	81 11       	cpse	r24, r1
     e1c:	0f c0       	rjmp	.+30     	; 0xe3c <move_pacman+0x64>
		 pacman_x--;
     e1e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>

		 if (pacman_x == 0 && pacman_y == 15 ) {
     e28:	81 11       	cpse	r24, r1
     e2a:	25 c0       	rjmp	.+74     	; 0xe76 <move_pacman+0x9e>
     e2c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     e30:	8f 30       	cpi	r24, 0x0F	; 15
     e32:	09 f5       	brne	.+66     	; 0xe76 <move_pacman+0x9e>
			 pacman_x = 30 ;
     e34:	8e e1       	ldi	r24, 0x1E	; 30
     e36:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
     e3a:	1d c0       	rjmp	.+58     	; 0xe76 <move_pacman+0x9e>
		 }
		 
		 } else if (pacman_direction == DIRN_RIGHT) {
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	71 f4       	brne	.+28     	; 0xe5c <move_pacman+0x84>
		 pacman_x++;
     e40:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
		 if (pacman_x == 30 && pacman_y == 15 ) {
     e4a:	8e 31       	cpi	r24, 0x1E	; 30
     e4c:	a1 f4       	brne	.+40     	; 0xe76 <move_pacman+0x9e>
     e4e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     e52:	8f 30       	cpi	r24, 0x0F	; 15
     e54:	81 f4       	brne	.+32     	; 0xe76 <move_pacman+0x9e>
			 pacman_x = 0 ;
     e56:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <pacman_x>
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <move_pacman+0x9e>
		 }
	 }
		else if(pacman_direction == DIRN_UP) {
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	31 f4       	brne	.+12     	; 0xe6c <move_pacman+0x94>
		 pacman_y--;
     e60:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     e64:	81 50       	subi	r24, 0x01	; 1
     e66:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <move_pacman+0x9e>
		 } else {
		 pacman_y++;
     e6c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     e70:	8f 5f       	subi	r24, 0xFF	; 255
     e72:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	 }

	if(cell_contents >= 0) {
     e76:	cc 23       	and	r28, r28
     e78:	0c f1       	brlt	.+66     	; 0xebc <move_pacman+0xe4>
		
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     e7a:	0c 2f       	mov	r16, r28
     e7c:	0c 2e       	mov	r0, r28
     e7e:	00 0c       	add	r0, r0
     e80:	11 0b       	sbc	r17, r17
     e82:	f8 01       	movw	r30, r16
     e84:	e2 56       	subi	r30, 0x62	; 98
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	80 81       	ld	r24, Z
     e8a:	0e 94 42 10 	call	0x2084	; 0x2084 <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     e8e:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
     e92:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     e96:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		
		//Reset Ghost back to home.
		ghost_x[cell_contents] = GHOST_HOME_X_LEFT ;
     e9a:	f8 01       	movw	r30, r16
     e9c:	ef 52       	subi	r30, 0x2F	; 47
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	8c e0       	ldi	r24, 0x0C	; 12
     ea2:	80 83       	st	Z, r24
		ghost_y[cell_contents] = GHOST_HOME_Y ;
     ea4:	f8 01       	movw	r30, r16
     ea6:	e3 53       	subi	r30, 0x33	; 51
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	8f e0       	ldi	r24, 0x0F	; 15
     eac:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
     eae:	4f e0       	ldi	r20, 0x0F	; 15
     eb0:	6c e0       	ldi	r22, 0x0C	; 12
     eb2:	8c 2f       	mov	r24, r28
     eb4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	c1 c0       	rjmp	.+386    	; 0x103e <move_pacman+0x266>
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
		
		
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
     ebc:	cc 3f       	cpi	r28, 0xFC	; 252
     ebe:	09 f0       	breq	.+2      	; 0xec2 <move_pacman+0xea>
     ec0:	b3 c0       	rjmp	.+358    	; 0x1028 <move_pacman+0x250>
// count of remaining pac-dots.
// See initialise_pacdots() below for information on how the pacdots array
// is initialised.
static void eat_pacdot(void) {
	uint32_t maskval = 1UL << pacman_x; 
	pacdots[pacman_y] &= ~(maskval); 
     ec2:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pacman_y>
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	ee 0f       	add	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	e5 52       	subi	r30, 0x25	; 37
     ed2:	fe 4f       	sbci	r31, 0xFE	; 254
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	00 90 d7 01 	lds	r0, 0x01D7	; 0x8001d7 <pacman_x>
     ee0:	04 c0       	rjmp	.+8      	; 0xeea <move_pacman+0x112>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	aa 1f       	adc	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	0a 94       	dec	r0
     eec:	d2 f7       	brpl	.-12     	; 0xee2 <move_pacman+0x10a>
     eee:	80 95       	com	r24
     ef0:	90 95       	com	r25
     ef2:	a0 95       	com	r26
     ef4:	b0 95       	com	r27
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	62 81       	ldd	r22, Z+2	; 0x02
     efc:	73 81       	ldd	r23, Z+3	; 0x03
     efe:	84 23       	and	r24, r20
     f00:	95 23       	and	r25, r21
     f02:	a6 23       	and	r26, r22
     f04:	b7 23       	and	r27, r23
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	a2 83       	std	Z+2, r26	; 0x02
     f0c:	b3 83       	std	Z+3, r27	; 0x03
	num_pacdots--;
     f0e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <num_pacdots>
     f12:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <num_pacdots+0x1>
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <num_pacdots+0x1>
     f1c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <num_pacdots>
	add_to_score(10);
     f20:	8a e0       	ldi	r24, 0x0A	; 10
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <add_to_score>
	
	move_cursor (37, 8); 
     f28:	68 e0       	ldi	r22, 0x08	; 8
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	85 e2       	ldi	r24, 0x25	; 37
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf("%13s", "Score: \n"); 
     f34:	82 e4       	ldi	r24, 0x42	; 66
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	9f 93       	push	r25
     f3a:	8f 93       	push	r24
     f3c:	8b e4       	ldi	r24, 0x4B	; 75
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	9f 93       	push	r25
     f42:	8f 93       	push	r24
     f44:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
	move_cursor(37,9); 
     f48:	69 e0       	ldi	r22, 0x09	; 9
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	85 e2       	ldi	r24, 0x25	; 37
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf("%11lu\n", get_score());
     f54:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <get_score>
     f58:	9f 93       	push	r25
     f5a:	8f 93       	push	r24
     f5c:	7f 93       	push	r23
     f5e:	6f 93       	push	r22
     f60:	80 e5       	ldi	r24, 0x50	; 80
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	9f 93       	push	r25
     f66:	8f 93       	push	r24
     f68:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>

	if (get_score() > get_highscore()) {
     f6c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <get_score>
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
     f74:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <get_highscore>
     f78:	2d b7       	in	r18, 0x3d	; 61
     f7a:	3e b7       	in	r19, 0x3e	; 62
     f7c:	26 5f       	subi	r18, 0xF6	; 246
     f7e:	3f 4f       	sbci	r19, 0xFF	; 255
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	3e bf       	out	0x3e, r19	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	2d bf       	out	0x3d, r18	; 61
     f8a:	6c 15       	cp	r22, r12
     f8c:	7d 05       	cpc	r23, r13
     f8e:	8e 05       	cpc	r24, r14
     f90:	9f 05       	cpc	r25, r15
     f92:	20 f4       	brcc	.+8      	; 0xf9c <move_pacman+0x1c4>
		set_highscore(get_score()) ; 
     f94:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <get_score>
     f98:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <set_highscore>
	}
	
	move_cursor(37, 10) ;
     f9c:	6a e0       	ldi	r22, 0x0A	; 10
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	85 e2       	ldi	r24, 0x25	; 37
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf("%s", "High Score:\n");
     fa8:	87 e5       	ldi	r24, 0x57	; 87
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 21 12 	call	0x2442	; 0x2442 <puts>
	
	move_cursor(37,11); 
     fb0:	6b e0       	ldi	r22, 0x0B	; 11
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	85 e2       	ldi	r24, 0x25	; 37
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf("%11lu\n", get_highscore() );
     fbc:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <get_highscore>
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	7f 93       	push	r23
     fc6:	6f 93       	push	r22
     fc8:	80 e5       	ldi	r24, 0x50	; 80
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
	
	move_cursor(37, 13);
     fd4:	6d e0       	ldi	r22, 0x0D	; 13
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	85 e2       	ldi	r24, 0x25	; 37
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf(("Pacdots Remaining: %11d"), num_pacdots);
     fe0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <num_pacdots+0x1>
     fe4:	8f 93       	push	r24
     fe6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <num_pacdots>
     fea:	8f 93       	push	r24
     fec:	83 e6       	ldi	r24, 0x63	; 99
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
	
	move_cursor(37, 5 );
     ff8:	65 e0       	ldi	r22, 0x05	; 5
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	85 e2       	ldi	r24, 0x25	; 37
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
	printf(("Lives: %5d"), get_lives());
    1004:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    1008:	1f 92       	push	r1
    100a:	8f 93       	push	r24
    100c:	8b e7       	ldi	r24, 0x7B	; 123
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
    1018:	8d b7       	in	r24, 0x3d	; 61
    101a:	9e b7       	in	r25, 0x3e	; 62
    101c:	0e 96       	adiw	r24, 0x0e	; 14
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	9e bf       	out	0x3e, r25	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	8d bf       	out	0x3d, r24	; 61
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
    1028:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
    102c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    1030:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
	}
	return 1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	03 c0       	rjmp	.+6      	; 0x103e <move_pacman+0x266>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	01 c0       	rjmp	.+2      	; 0x103e <move_pacman+0x266>
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL)  {
		
		
		return 0;	// We can't move - wall is straight ahead
    103c:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	ff 90       	pop	r15
    1048:	ef 90       	pop	r14
    104a:	df 90       	pop	r13
    104c:	cf 90       	pop	r12
    104e:	08 95       	ret

00001050 <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
	if(!game_running) {
    1056:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    105a:	99 23       	and	r25, r25
    105c:	a1 f0       	breq	.+40     	; 0x1086 <change_pacman_direction+0x36>
    105e:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
    1060:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
    1064:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
    1068:	48 2f       	mov	r20, r24
    106a:	61 2f       	mov	r22, r17
    106c:	8d 2f       	mov	r24, r29
    106e:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
    1072:	8e 3f       	cpi	r24, 0xFE	; 254
    1074:	51 f0       	breq	.+20     	; 0x108a <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
    1076:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
    107a:	61 2f       	mov	r22, r17
    107c:	8d 2f       	mov	r24, r29
    107e:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		return 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	03 c0       	rjmp	.+6      	; 0x108c <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	01 c0       	rjmp	.+2      	; 0x108c <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
    108a:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	08 95       	ret

00001094 <move_ghost>:


void move_ghost(int8_t ghostnum) {
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
	if(!game_running) {
    10a0:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    10a4:	99 23       	and	r25, r25
    10a6:	09 f4       	brne	.+2      	; 0x10aa <move_ghost+0x16>
    10a8:	06 c2       	rjmp	.+1036   	; 0x14b6 <move_ghost+0x422>
    10aa:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	fc 01       	movw	r30, r24
    10b0:	ef 52       	subi	r30, 0x2F	; 47
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
    10b6:	fc 01       	movw	r30, r24
    10b8:	e3 53       	subi	r30, 0x33	; 51
    10ba:	fe 4f       	sbci	r31, 0xFE	; 254
    10bc:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
    10be:	fc 01       	movw	r30, r24
    10c0:	e7 53       	subi	r30, 0x37	; 55
    10c2:	fe 4f       	sbci	r31, 0xFE	; 254
    10c4:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
    10c6:	6f 2d       	mov	r22, r15
    10c8:	81 2f       	mov	r24, r17
    10ca:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
    10ce:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
    10d0:	88 23       	and	r24, r24
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <move_ghost+0x42>
    10d4:	f0 c1       	rjmp	.+992    	; 0x14b6 <move_ghost+0x422>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
    10d6:	6f 2d       	mov	r22, r15
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
    10de:	88 23       	and	r24, r24
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <move_ghost+0x50>
    10e2:	45 c1       	rjmp	.+650    	; 0x136e <move_ghost+0x2da>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
    10e4:	01 ff       	sbrs	r16, 1
    10e6:	43 c1       	rjmp	.+646    	; 0x136e <move_ghost+0x2da>
    10e8:	be c1       	rjmp	.+892    	; 0x1466 <move_ghost+0x3d2>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
    10ea:	00 91 d7 01 	lds	r16, 0x01D7	; 0x8001d7 <pacman_x>
    10ee:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
    10f0:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <pacman_y>
    10f4:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
    10f6:	6f 2d       	mov	r22, r15
    10f8:	81 2f       	mov	r24, r17
    10fa:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
    10fe:	88 23       	and	r24, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <move_ghost+0x70>
    1102:	d9 c1       	rjmp	.+946    	; 0x14b6 <move_ghost+0x422>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
    1104:	40 2f       	mov	r20, r16
    1106:	00 2e       	mov	r0, r16
    1108:	00 0c       	add	r0, r0
    110a:	55 0b       	sbc	r21, r21
    110c:	55 23       	and	r21, r21
    110e:	1c f4       	brge	.+6      	; 0x1116 <move_ghost+0x82>
    1110:	51 95       	neg	r21
    1112:	41 95       	neg	r20
    1114:	51 09       	sbc	r21, r1
    1116:	2d 2f       	mov	r18, r29
    1118:	0d 2e       	mov	r0, r29
    111a:	00 0c       	add	r0, r0
    111c:	33 0b       	sbc	r19, r19
    111e:	33 23       	and	r19, r19
    1120:	1c f4       	brge	.+6      	; 0x1128 <move_ghost+0x94>
    1122:	31 95       	neg	r19
    1124:	21 95       	neg	r18
    1126:	31 09       	sbc	r19, r1
    1128:	42 17       	cp	r20, r18
    112a:	53 07       	cpc	r21, r19
    112c:	4c f4       	brge	.+18     	; 0x1140 <move_ghost+0xac>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    112e:	dd 23       	and	r29, r29
    1130:	1c f4       	brge	.+6      	; 0x1138 <move_ghost+0xa4>
			if(dirn_options & (1 << DIRN_UP)) {
    1132:	81 ff       	sbrs	r24, 1
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <move_ghost+0xac>
    1136:	97 c1       	rjmp	.+814    	; 0x1466 <move_ghost+0x3d2>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    1138:	1d 16       	cp	r1, r29
    113a:	14 f4       	brge	.+4      	; 0x1140 <move_ghost+0xac>
			if(dirn_options & (1 << DIRN_DOWN)) {
    113c:	83 fd       	sbrc	r24, 3
    113e:	a7 c1       	rjmp	.+846    	; 0x148e <move_ghost+0x3fa>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    1140:	00 23       	and	r16, r16
    1142:	54 f4       	brge	.+20     	; 0x1158 <move_ghost+0xc4>
		if(dirn_options & (1 << DIRN_LEFT)) {
    1144:	80 fd       	sbrc	r24, 0
    1146:	68 c1       	rjmp	.+720    	; 0x1418 <move_ghost+0x384>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    1148:	dd 23       	and	r29, r29
    114a:	1c f4       	brge	.+6      	; 0x1152 <move_ghost+0xbe>
			if(dirn_options & (1 << DIRN_UP)) {
    114c:	81 ff       	sbrs	r24, 1
    114e:	60 c1       	rjmp	.+704    	; 0x1410 <move_ghost+0x37c>
    1150:	8a c1       	rjmp	.+788    	; 0x1466 <move_ghost+0x3d2>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1152:	83 fd       	sbrc	r24, 3
    1154:	9c c1       	rjmp	.+824    	; 0x148e <move_ghost+0x3fa>
    1156:	5c c1       	rjmp	.+696    	; 0x1410 <move_ghost+0x37c>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    1158:	82 fd       	sbrc	r24, 2
    115a:	71 c1       	rjmp	.+738    	; 0x143e <move_ghost+0x3aa>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    115c:	dd 23       	and	r29, r29
    115e:	1c f4       	brge	.+6      	; 0x1166 <move_ghost+0xd2>
			if(dirn_options & (1 << DIRN_UP)) {
    1160:	81 ff       	sbrs	r24, 1
    1162:	14 c1       	rjmp	.+552    	; 0x138c <move_ghost+0x2f8>
    1164:	80 c1       	rjmp	.+768    	; 0x1466 <move_ghost+0x3d2>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1166:	83 fd       	sbrc	r24, 3
    1168:	92 c1       	rjmp	.+804    	; 0x148e <move_ghost+0x3fa>
    116a:	10 c1       	rjmp	.+544    	; 0x138c <move_ghost+0x2f8>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1170:	ab 01       	movw	r20, r22
    1172:	08 2e       	mov	r0, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <move_ghost+0xe6>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <move_ghost+0xe2>
    117e:	40 fd       	sbrc	r20, 0
    1180:	a0 c0       	rjmp	.+320    	; 0x12c2 <move_ghost+0x22e>
    1182:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	91 05       	cpc	r25, r1
    1188:	99 f7       	brne	.-26     	; 0x1170 <move_ghost+0xdc>
    118a:	95 c1       	rjmp	.+810    	; 0x14b6 <move_ghost+0x422>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    118c:	00 2e       	mov	r0, r16
    118e:	00 0c       	add	r0, r0
    1190:	11 0b       	sbc	r17, r17
    1192:	4d 2f       	mov	r20, r29
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	c8 01       	movw	r24, r16
    1198:	0d 2e       	mov	r0, r29
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <move_ghost+0x10c>
    119c:	95 95       	asr	r25
    119e:	87 95       	ror	r24
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <move_ghost+0x108>
    11a4:	80 fd       	sbrc	r24, 0
    11a6:	94 c0       	rjmp	.+296    	; 0x12d0 <move_ghost+0x23c>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    11a8:	dc 0f       	add	r29, r28
    11aa:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    11ac:	2d 2f       	mov	r18, r29
    11ae:	0d 2e       	mov	r0, r29
    11b0:	00 0c       	add	r0, r0
    11b2:	33 0b       	sbc	r19, r19
    11b4:	c8 01       	movw	r24, r16
    11b6:	0d 2e       	mov	r0, r29
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <move_ghost+0x12a>
    11ba:	95 95       	asr	r25
    11bc:	87 95       	ror	r24
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <move_ghost+0x126>
    11c2:	80 fd       	sbrc	r24, 0
    11c4:	85 c0       	rjmp	.+266    	; 0x12d0 <move_ghost+0x23c>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    11c6:	2e 5f       	subi	r18, 0xFE	; 254
    11c8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ca:	23 70       	andi	r18, 0x03	; 3
    11cc:	30 78       	andi	r19, 0x80	; 128
    11ce:	33 23       	and	r19, r19
    11d0:	34 f4       	brge	.+12     	; 0x11de <move_ghost+0x14a>
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	31 09       	sbc	r19, r1
    11d6:	2c 6f       	ori	r18, 0xFC	; 252
    11d8:	3f 6f       	ori	r19, 0xFF	; 255
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <move_ghost+0x152>
    11e2:	15 95       	asr	r17
    11e4:	07 95       	ror	r16
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <move_ghost+0x14e>
    11ea:	00 fd       	sbrc	r16, 0
    11ec:	6c c0       	rjmp	.+216    	; 0x12c6 <move_ghost+0x232>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    11ee:	9a 01       	movw	r18, r20
    11f0:	2e 5f       	subi	r18, 0xFE	; 254
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	23 70       	andi	r18, 0x03	; 3
    11f6:	30 78       	andi	r19, 0x80	; 128
    11f8:	33 23       	and	r19, r19
    11fa:	34 f4       	brge	.+12     	; 0x1208 <move_ghost+0x174>
    11fc:	21 50       	subi	r18, 0x01	; 1
    11fe:	31 09       	sbc	r19, r1
    1200:	2c 6f       	ori	r18, 0xFC	; 252
    1202:	3f 6f       	ori	r19, 0xFF	; 255
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	d2 2f       	mov	r29, r18
    120a:	62 c0       	rjmp	.+196    	; 0x12d0 <move_ghost+0x23c>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    120c:	00 2e       	mov	r0, r16
    120e:	00 0c       	add	r0, r0
    1210:	11 0b       	sbc	r17, r17
    1212:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <pacman_direction>
    1216:	c8 01       	movw	r24, r16
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <move_ghost+0x18c>
    121c:	95 95       	asr	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <move_ghost+0x188>
    1224:	80 ff       	sbrs	r24, 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <move_ghost+0x198>
				// That direction is one of the valid options
				return pacman_direction;
    1228:	d2 2f       	mov	r29, r18
    122a:	52 c0       	rjmp	.+164    	; 0x12d0 <move_ghost+0x23c>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    122c:	0e 94 49 11 	call	0x2292	; 0x2292 <random>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	83 70       	andi	r24, 0x03	; 3
    1236:	99 27       	eor	r25, r25
    1238:	aa 27       	eor	r26, r26
    123a:	b0 78       	andi	r27, 0x80	; 128
    123c:	bb 23       	and	r27, r27
    123e:	54 f4       	brge	.+20     	; 0x1254 <move_ghost+0x1c0>
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	a1 09       	sbc	r26, r1
    1244:	b1 09       	sbc	r27, r1
    1246:	8c 6f       	ori	r24, 0xFC	; 252
    1248:	9f 6f       	ori	r25, 0xFF	; 255
    124a:	af 6f       	ori	r26, 0xFF	; 255
    124c:	bf 6f       	ori	r27, 0xFF	; 255
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	a1 1d       	adc	r26, r1
    1252:	b1 1d       	adc	r27, r1
    1254:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1256:	68 2f       	mov	r22, r24
    1258:	88 0f       	add	r24, r24
    125a:	77 0b       	sbc	r23, r23
    125c:	9b 01       	movw	r18, r22
    125e:	23 70       	andi	r18, 0x03	; 3
    1260:	30 78       	andi	r19, 0x80	; 128
    1262:	33 23       	and	r19, r19
    1264:	34 f4       	brge	.+12     	; 0x1272 <move_ghost+0x1de>
    1266:	21 50       	subi	r18, 0x01	; 1
    1268:	31 09       	sbc	r19, r1
    126a:	2c 6f       	ori	r18, 0xFC	; 252
    126c:	3f 6f       	ori	r19, 0xFF	; 255
    126e:	2f 5f       	subi	r18, 0xFF	; 255
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    1272:	c8 01       	movw	r24, r16
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <move_ghost+0x1e8>
    1278:	95 95       	asr	r25
    127a:	87 95       	ror	r24
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <move_ghost+0x1e4>
    1280:	80 fd       	sbrc	r24, 0
    1282:	23 c0       	rjmp	.+70     	; 0x12ca <move_ghost+0x236>
    1284:	6f 5f       	subi	r22, 0xFF	; 255
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	04 2e       	mov	r0, r20
    128a:	00 0c       	add	r0, r0
    128c:	55 0b       	sbc	r21, r21
    128e:	4c 5f       	subi	r20, 0xFC	; 252
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1292:	cb 01       	movw	r24, r22
    1294:	83 70       	andi	r24, 0x03	; 3
    1296:	90 78       	andi	r25, 0x80	; 128
    1298:	99 23       	and	r25, r25
    129a:	24 f4       	brge	.+8      	; 0x12a4 <move_ghost+0x210>
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	8c 6f       	ori	r24, 0xFC	; 252
    12a0:	9f 6f       	ori	r25, 0xFF	; 255
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    12a6:	f8 01       	movw	r30, r16
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <move_ghost+0x21a>
    12aa:	f5 95       	asr	r31
    12ac:	e7 95       	ror	r30
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <move_ghost+0x216>
    12b2:	e0 fd       	sbrc	r30, 0
    12b4:	0c c0       	rjmp	.+24     	; 0x12ce <move_ghost+0x23a>
    12b6:	6f 5f       	subi	r22, 0xFF	; 255
    12b8:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    12ba:	64 17       	cp	r22, r20
    12bc:	75 07       	cpc	r23, r21
    12be:	49 f7       	brne	.-46     	; 0x1292 <move_ghost+0x1fe>
    12c0:	fa c0       	rjmp	.+500    	; 0x14b6 <move_ghost+0x422>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    12c2:	d8 2f       	mov	r29, r24
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <move_ghost+0x23c>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    12c6:	d2 2f       	mov	r29, r18
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <move_ghost+0x23c>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    12ca:	d2 2f       	mov	r29, r18
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <move_ghost+0x23c>
    12ce:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    12d0:	dd 23       	and	r29, r29
    12d2:	0c f4       	brge	.+2      	; 0x12d6 <move_ghost+0x242>
    12d4:	f0 c0       	rjmp	.+480    	; 0x14b6 <move_ghost+0x422>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    12d6:	0c 2f       	mov	r16, r28
    12d8:	0c 2e       	mov	r0, r28
    12da:	00 0c       	add	r0, r0
    12dc:	11 0b       	sbc	r17, r17
    12de:	d8 01       	movw	r26, r16
    12e0:	a3 53       	subi	r26, 0x33	; 51
    12e2:	be 4f       	sbci	r27, 0xFE	; 254
    12e4:	f8 01       	movw	r30, r16
    12e6:	ef 52       	subi	r30, 0x2F	; 47
    12e8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ea:	6c 91       	ld	r22, X
    12ec:	80 81       	ld	r24, Z
    12ee:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    12f2:	f8 01       	movw	r30, r16
    12f4:	e7 53       	subi	r30, 0x37	; 55
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    12fa:	d1 30       	cpi	r29, 0x01	; 1
    12fc:	b9 f0       	breq	.+46     	; 0x132c <move_ghost+0x298>
    12fe:	1c f4       	brge	.+6      	; 0x1306 <move_ghost+0x272>
    1300:	dd 23       	and	r29, r29
    1302:	31 f0       	breq	.+12     	; 0x1310 <move_ghost+0x27c>
    1304:	20 c0       	rjmp	.+64     	; 0x1346 <move_ghost+0x2b2>
    1306:	d2 30       	cpi	r29, 0x02	; 2
    1308:	51 f0       	breq	.+20     	; 0x131e <move_ghost+0x28a>
    130a:	d3 30       	cpi	r29, 0x03	; 3
    130c:	b1 f0       	breq	.+44     	; 0x133a <move_ghost+0x2a6>
    130e:	1b c0       	rjmp	.+54     	; 0x1346 <move_ghost+0x2b2>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    1310:	f8 01       	movw	r30, r16
    1312:	ef 52       	subi	r30, 0x2F	; 47
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	80 81       	ld	r24, Z
    1318:	81 50       	subi	r24, 0x01	; 1
    131a:	80 83       	st	Z, r24
			break;
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <move_ghost+0x2b2>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    131e:	f8 01       	movw	r30, r16
    1320:	ef 52       	subi	r30, 0x2F	; 47
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	80 81       	ld	r24, Z
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	80 83       	st	Z, r24
			break;
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <move_ghost+0x2b2>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    132c:	f8 01       	movw	r30, r16
    132e:	e3 53       	subi	r30, 0x33	; 51
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	80 81       	ld	r24, Z
    1334:	81 50       	subi	r24, 0x01	; 1
    1336:	80 83       	st	Z, r24
			break;
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <move_ghost+0x2b2>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    133a:	f8 01       	movw	r30, r16
    133c:	e3 53       	subi	r30, 0x33	; 51
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	80 81       	ld	r24, Z
    1342:	8f 5f       	subi	r24, 0xFF	; 255
    1344:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    1346:	f8 01       	movw	r30, r16
    1348:	e3 53       	subi	r30, 0x33	; 51
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	40 81       	ld	r20, Z
    134e:	f8 01       	movw	r30, r16
    1350:	ef 52       	subi	r30, 0x2F	; 47
    1352:	fe 4f       	sbci	r31, 0xFE	; 254
    1354:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    1356:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    135a:	68 13       	cpse	r22, r24
    135c:	55 c0       	rjmp	.+170    	; 0x1408 <move_ghost+0x374>
    135e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
    1362:	48 13       	cpse	r20, r24
    1364:	51 c0       	rjmp	.+162    	; 0x1408 <move_ghost+0x374>
    1366:	19 c0       	rjmp	.+50     	; 0x139a <move_ghost+0x306>
	} else {
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
		
	}
	normal_display_mode();
    1368:	0e 94 30 10 	call	0x2060	; 0x2060 <normal_display_mode>
    136c:	a4 c0       	rjmp	.+328    	; 0x14b6 <move_ghost+0x422>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    136e:	c1 30       	cpi	r28, 0x01	; 1
    1370:	09 f4       	brne	.+2      	; 0x1374 <move_ghost+0x2e0>
    1372:	0c cf       	rjmp	.-488    	; 0x118c <move_ghost+0xf8>
    1374:	24 f4       	brge	.+8      	; 0x137e <move_ghost+0x2ea>
    1376:	cc 23       	and	r28, r28
    1378:	09 f4       	brne	.+2      	; 0x137c <move_ghost+0x2e8>
    137a:	b7 ce       	rjmp	.-658    	; 0x10ea <move_ghost+0x56>
    137c:	9c c0       	rjmp	.+312    	; 0x14b6 <move_ghost+0x422>
    137e:	c2 30       	cpi	r28, 0x02	; 2
    1380:	09 f4       	brne	.+2      	; 0x1384 <move_ghost+0x2f0>
    1382:	44 cf       	rjmp	.-376    	; 0x120c <move_ghost+0x178>
    1384:	c3 30       	cpi	r28, 0x03	; 3
    1386:	09 f4       	brne	.+2      	; 0x138a <move_ghost+0x2f6>
    1388:	01 cf       	rjmp	.-510    	; 0x118c <move_ghost+0xf8>
    138a:	95 c0       	rjmp	.+298    	; 0x14b6 <move_ghost+0x422>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    138c:	68 2f       	mov	r22, r24
    138e:	08 2e       	mov	r0, r24
    1390:	00 0c       	add	r0, r0
    1392:	77 0b       	sbc	r23, r23
    1394:	80 ff       	sbrs	r24, 0
    1396:	ea ce       	rjmp	.-556    	; 0x116c <move_ghost+0xd8>
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <move_ghost+0x384>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		// Ghost has just moved into the pac-man. Lose 1 life.
		lives--;
    139a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    139e:	81 50       	subi	r24, 0x01	; 1
    13a0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lives>
		move_cursor(37, 5 );
    13a4:	65 e0       	ldi	r22, 0x05	; 5
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	85 e2       	ldi	r24, 0x25	; 37
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
		printf(("Lives: %5d"), get_lives());
    13b0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    13b4:	1f 92       	push	r1
    13b6:	8f 93       	push	r24
    13b8:	8b e7       	ldi	r24, 0x7B	; 123
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
		
		// We draw the background colour for the
		//ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    13c4:	f8 01       	movw	r30, r16
    13c6:	e2 56       	subi	r30, 0x62	; 98
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	80 81       	ld	r24, Z
    13cc:	0e 94 42 10 	call	0x2084	; 0x2084 <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    13d0:	c8 01       	movw	r24, r16
    13d2:	83 53       	subi	r24, 0x33	; 51
    13d4:	9e 4f       	sbci	r25, 0xFE	; 254
    13d6:	7c 01       	movw	r14, r24
    13d8:	0f 52       	subi	r16, 0x2F	; 47
    13da:	1e 4f       	sbci	r17, 0xFE	; 254
    13dc:	fc 01       	movw	r30, r24
    13de:	60 81       	ld	r22, Z
    13e0:	f8 01       	movw	r30, r16
    13e2:	80 81       	ld	r24, Z
    13e4:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		//Reset Ghost back to home. 
		ghost_x[ghostnum] = GHOST_HOME_X_LEFT ; 
    13e8:	8c e0       	ldi	r24, 0x0C	; 12
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 83       	st	Z, r24
		ghost_y[ghostnum] = GHOST_HOME_Y ; 
    13ee:	8f e0       	ldi	r24, 0x0F	; 15
    13f0:	f7 01       	movw	r30, r14
    13f2:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(ghostnum, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
    13f4:	4f e0       	ldi	r20, 0x0F	; 15
    13f6:	6c e0       	ldi	r22, 0x0C	; 12
    13f8:	8c 2f       	mov	r24, r28
    13fa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	b0 cf       	rjmp	.-160    	; 0x1368 <move_ghost+0x2d4>
		
	} else {
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    1408:	8c 2f       	mov	r24, r28
    140a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
    140e:	ac cf       	rjmp	.-168    	; 0x1368 <move_ghost+0x2d4>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1410:	68 2f       	mov	r22, r24
    1412:	88 0f       	add	r24, r24
    1414:	77 0b       	sbc	r23, r23
    1416:	aa ce       	rjmp	.-684    	; 0x116c <move_ghost+0xd8>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1418:	0c 2f       	mov	r16, r28
    141a:	0c 2e       	mov	r0, r28
    141c:	00 0c       	add	r0, r0
    141e:	11 0b       	sbc	r17, r17
    1420:	d8 01       	movw	r26, r16
    1422:	a3 53       	subi	r26, 0x33	; 51
    1424:	be 4f       	sbci	r27, 0xFE	; 254
    1426:	f8 01       	movw	r30, r16
    1428:	ef 52       	subi	r30, 0x2F	; 47
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	6c 91       	ld	r22, X
    142e:	80 81       	ld	r24, Z
    1430:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1434:	f8 01       	movw	r30, r16
    1436:	e7 53       	subi	r30, 0x37	; 55
    1438:	fe 4f       	sbci	r31, 0xFE	; 254
    143a:	10 82       	st	Z, r1
    143c:	69 cf       	rjmp	.-302    	; 0x1310 <move_ghost+0x27c>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    143e:	0c 2f       	mov	r16, r28
    1440:	0c 2e       	mov	r0, r28
    1442:	00 0c       	add	r0, r0
    1444:	11 0b       	sbc	r17, r17
    1446:	d8 01       	movw	r26, r16
    1448:	a3 53       	subi	r26, 0x33	; 51
    144a:	be 4f       	sbci	r27, 0xFE	; 254
    144c:	f8 01       	movw	r30, r16
    144e:	ef 52       	subi	r30, 0x2F	; 47
    1450:	fe 4f       	sbci	r31, 0xFE	; 254
    1452:	6c 91       	ld	r22, X
    1454:	80 81       	ld	r24, Z
    1456:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    145a:	f8 01       	movw	r30, r16
    145c:	e7 53       	subi	r30, 0x37	; 55
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	80 83       	st	Z, r24
    1464:	5c cf       	rjmp	.-328    	; 0x131e <move_ghost+0x28a>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1466:	0c 2f       	mov	r16, r28
    1468:	0c 2e       	mov	r0, r28
    146a:	00 0c       	add	r0, r0
    146c:	11 0b       	sbc	r17, r17
    146e:	d8 01       	movw	r26, r16
    1470:	a3 53       	subi	r26, 0x33	; 51
    1472:	be 4f       	sbci	r27, 0xFE	; 254
    1474:	f8 01       	movw	r30, r16
    1476:	ef 52       	subi	r30, 0x2F	; 47
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	6c 91       	ld	r22, X
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1482:	f8 01       	movw	r30, r16
    1484:	e7 53       	subi	r30, 0x37	; 55
    1486:	fe 4f       	sbci	r31, 0xFE	; 254
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	80 83       	st	Z, r24
    148c:	4f cf       	rjmp	.-354    	; 0x132c <move_ghost+0x298>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    148e:	0c 2f       	mov	r16, r28
    1490:	0c 2e       	mov	r0, r28
    1492:	00 0c       	add	r0, r0
    1494:	11 0b       	sbc	r17, r17
    1496:	d8 01       	movw	r26, r16
    1498:	a3 53       	subi	r26, 0x33	; 51
    149a:	be 4f       	sbci	r27, 0xFE	; 254
    149c:	f8 01       	movw	r30, r16
    149e:	ef 52       	subi	r30, 0x2F	; 47
    14a0:	fe 4f       	sbci	r31, 0xFE	; 254
    14a2:	6c 91       	ld	r22, X
    14a4:	80 81       	ld	r24, Z
    14a6:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    14aa:	f8 01       	movw	r30, r16
    14ac:	e7 53       	subi	r30, 0x37	; 55
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	80 83       	st	Z, r24
    14b4:	42 cf       	rjmp	.-380    	; 0x133a <move_ghost+0x2a6>
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
		
	}
	normal_display_mode();
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	08 95       	ret

000014c4 <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    14ca:	91 11       	cpse	r25, r1
    14cc:	80 e0       	ldi	r24, 0x00	; 0
}
    14ce:	08 95       	ret

000014d0 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <num_pacdots>
    14d6:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <num_pacdots+0x1>
    14da:	23 2b       	or	r18, r19
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <is_level_complete+0x10>
    14de:	80 e0       	ldi	r24, 0x00	; 0
}
    14e0:	08 95       	ret

000014e2 <initialise_joystick>:
static uint8_t prev_dir =0; 
static uint32_t prev_time; 

void initialise_joystick(void){
	//Setup ADC
	ADMUX = (1 <<REFS0); 
    14e2:	80 e4       	ldi	r24, 0x40	; 64
    14e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 
    14e8:	86 e8       	ldi	r24, 0x86	; 134
    14ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    14ee:	08 95       	ret

000014f0 <joystick_dir>:
		; //wait
	}
	adc_y = ADC;  //read value 
}

uint8_t joystick_dir(void){
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 

}
static void get_ADCval(void){
	//x axis 
	ADMUX &= ~1; 
    14f4:	ec e7       	ldi	r30, 0x7C	; 124
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8e 7f       	andi	r24, 0xFE	; 254
    14fc:	80 83       	st	Z, r24
	//convert ADC 
	ADCSRA |= (1<<ADSC) ; 
    14fe:	ea e7       	ldi	r30, 0x7A	; 122
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 64       	ori	r24, 0x40	; 64
    1506:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){
    1508:	80 81       	ld	r24, Z
    150a:	86 fd       	sbrc	r24, 6
    150c:	fd cf       	rjmp	.-6      	; 0x1508 <joystick_dir+0x18>
		; //wait conversion. 
	}
	adc_x = ADC;  //read value 
    150e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1512:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    1516:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <adc_x+0x1>
    151a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <adc_x>
	
	//read y axis 
	ADMUX |= 1; 
    151e:	ec e7       	ldi	r30, 0x7C	; 124
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	81 60       	ori	r24, 0x01	; 1
    1526:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); 
    1528:	ea e7       	ldi	r30, 0x7A	; 122
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){
    1532:	90 81       	ld	r25, Z
    1534:	89 2f       	mov	r24, r25
    1536:	80 74       	andi	r24, 0x40	; 64
    1538:	96 fd       	sbrc	r25, 6
    153a:	fb cf       	rjmp	.-10     	; 0x1532 <joystick_dir+0x42>
		; //wait
	}
	adc_y = ADC;  //read value 
    153c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1540:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    1544:	50 93 5d 02 	sts	0x025D, r21	; 0x80025d <adc_y+0x1>
    1548:	40 93 5c 02 	sts	0x025C, r20	; 0x80025c <adc_y>
uint8_t joystick_dir(void){
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
    154c:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <adc_x>
    1550:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <adc_x+0x1>
    1554:	21 30       	cpi	r18, 0x01	; 1
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	39 07       	cpc	r19, r25
    155a:	08 f0       	brcs	.+2      	; 0x155e <joystick_dir+0x6e>
    155c:	59 c0       	rjmp	.+178    	; 0x1610 <joystick_dir+0x120>
		direction = 4 ; 
	} else if (adc_x < 257){
    155e:	21 30       	cpi	r18, 0x01	; 1
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	39 07       	cpc	r19, r25
    1564:	08 f4       	brcc	.+2      	; 0x1568 <joystick_dir+0x78>
    1566:	56 c0       	rjmp	.+172    	; 0x1614 <joystick_dir+0x124>
		direction = 3; 
	}else if (adc_y >768){
    1568:	41 30       	cpi	r20, 0x01	; 1
    156a:	93 e0       	ldi	r25, 0x03	; 3
    156c:	59 07       	cpc	r21, r25
    156e:	08 f0       	brcs	.+2      	; 0x1572 <joystick_dir+0x82>
    1570:	53 c0       	rjmp	.+166    	; 0x1618 <joystick_dir+0x128>
		direction =1; 
	}else if (adc_y <257){
    1572:	41 30       	cpi	r20, 0x01	; 1
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	59 07       	cpc	r21, r25
    1578:	08 f4       	brcc	.+2      	; 0x157c <joystick_dir+0x8c>
    157a:	50 c0       	rjmp	.+160    	; 0x161c <joystick_dir+0x12c>
		direction = 2; 
	}else {
		if (prev_dir == 3){
    157c:	d0 91 5b 02 	lds	r29, 0x025B	; 0x80025b <prev_dir>
    1580:	d3 30       	cpi	r29, 0x03	; 3
    1582:	31 f4       	brne	.+12     	; 0x1590 <joystick_dir+0xa0>
			// if adc_x < 386 then direction = direction, otherwise direction = middle
			direction = (adc_x <386 ? 3:-1) ; 
    1584:	22 38       	cpi	r18, 0x82	; 130
    1586:	31 40       	sbci	r19, 0x01	; 1
    1588:	08 f4       	brcc	.+2      	; 0x158c <joystick_dir+0x9c>
    158a:	51 c0       	rjmp	.+162    	; 0x162e <joystick_dir+0x13e>
    158c:	cf ef       	ldi	r28, 0xFF	; 255
    158e:	30 c0       	rjmp	.+96     	; 0x15f0 <joystick_dir+0x100>
		}
		else if(prev_dir == 1){
    1590:	d1 30       	cpi	r29, 0x01	; 1
    1592:	31 f4       	brne	.+12     	; 0x15a0 <joystick_dir+0xb0>
			direction = (adc_y > 641 ? 1:-1); 
    1594:	42 38       	cpi	r20, 0x82	; 130
    1596:	52 40       	sbci	r21, 0x02	; 2
    1598:	08 f0       	brcs	.+2      	; 0x159c <joystick_dir+0xac>
    159a:	49 c0       	rjmp	.+146    	; 0x162e <joystick_dir+0x13e>
    159c:	cf ef       	ldi	r28, 0xFF	; 255
    159e:	28 c0       	rjmp	.+80     	; 0x15f0 <joystick_dir+0x100>
		}else if(prev_dir ==2){
    15a0:	d2 30       	cpi	r29, 0x02	; 2
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <joystick_dir+0xc0>
			direction = (adc_y < 386 ? 2:-1); 
    15a4:	42 38       	cpi	r20, 0x82	; 130
    15a6:	51 40       	sbci	r21, 0x01	; 1
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <joystick_dir+0xbc>
    15aa:	41 c0       	rjmp	.+130    	; 0x162e <joystick_dir+0x13e>
    15ac:	cf ef       	ldi	r28, 0xFF	; 255
    15ae:	20 c0       	rjmp	.+64     	; 0x15f0 <joystick_dir+0x100>
		}else if (prev_dir == 4) {
    15b0:	d4 30       	cpi	r29, 0x04	; 4
    15b2:	d1 f5       	brne	.+116    	; 0x1628 <joystick_dir+0x138>
			direction =(adc_x > 641 ? 4:-1); 
    15b4:	22 38       	cpi	r18, 0x82	; 130
    15b6:	32 40       	sbci	r19, 0x02	; 2
    15b8:	d0 f5       	brcc	.+116    	; 0x162e <joystick_dir+0x13e>
    15ba:	cf ef       	ldi	r28, 0xFF	; 255
    15bc:	19 c0       	rjmp	.+50     	; 0x15f0 <joystick_dir+0x100>
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
    15be:	0e 94 70 10 	call	0x20e0	; 0x20e0 <get_current_time>
			if (current_time < prev_time + 300){
    15c2:	ab 01       	movw	r20, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	55 27       	eor	r21, r21
    15c8:	66 27       	eor	r22, r22
    15ca:	77 27       	eor	r23, r23
    15cc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <prev_time>
    15d0:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <prev_time+0x1>
    15d4:	a0 91 59 02 	lds	r26, 0x0259	; 0x800259 <prev_time+0x2>
    15d8:	b0 91 5a 02 	lds	r27, 0x025A	; 0x80025a <prev_time+0x3>
    15dc:	84 5d       	subi	r24, 0xD4	; 212
    15de:	9e 4f       	sbci	r25, 0xFE	; 254
    15e0:	af 4f       	sbci	r26, 0xFF	; 255
    15e2:	bf 4f       	sbci	r27, 0xFF	; 255
    15e4:	48 17       	cp	r20, r24
    15e6:	59 07       	cpc	r21, r25
    15e8:	6a 07       	cpc	r22, r26
    15ea:	7b 07       	cpc	r23, r27
    15ec:	78 f0       	brcs	.+30     	; 0x160c <joystick_dir+0x11c>
    15ee:	cd 2f       	mov	r28, r29
				return -1 ; 
			}
		}
		prev_time = get_current_time() ; 
    15f0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <get_current_time>
    15f4:	60 93 57 02 	sts	0x0257, r22	; 0x800257 <prev_time>
    15f8:	70 93 58 02 	sts	0x0258, r23	; 0x800258 <prev_time+0x1>
    15fc:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <prev_time+0x2>
    1600:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <prev_time+0x3>
		prev_dir = direction ; 
    1604:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <prev_dir>
    1608:	8c 2f       	mov	r24, r28
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <joystick_dir+0x144>
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
			if (current_time < prev_time + 300){
				return -1 ; 
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	12 c0       	rjmp	.+36     	; 0x1634 <joystick_dir+0x144>
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
		direction = 4 ; 
    1610:	c4 e0       	ldi	r28, 0x04	; 4
    1612:	05 c0       	rjmp	.+10     	; 0x161e <joystick_dir+0x12e>
	} else if (adc_x < 257){
		direction = 3; 
    1614:	c3 e0       	ldi	r28, 0x03	; 3
    1616:	03 c0       	rjmp	.+6      	; 0x161e <joystick_dir+0x12e>
	}else if (adc_y >768){
		direction =1; 
    1618:	c1 e0       	ldi	r28, 0x01	; 1
    161a:	01 c0       	rjmp	.+2      	; 0x161e <joystick_dir+0x12e>
	}else if (adc_y <257){
		direction = 2; 
    161c:	c2 e0       	ldi	r28, 0x02	; 2
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
    161e:	d0 91 5b 02 	lds	r29, 0x025B	; 0x80025b <prev_dir>
    1622:	cd 13       	cpse	r28, r29
    1624:	e5 cf       	rjmp	.-54     	; 0x15f0 <joystick_dir+0x100>
    1626:	cb cf       	rjmp	.-106    	; 0x15be <joystick_dir+0xce>
			direction =(adc_x > 641 ? 4:-1); 
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
    1628:	dd 23       	and	r29, r29
    162a:	21 f0       	breq	.+8      	; 0x1634 <joystick_dir+0x144>
    162c:	c8 cf       	rjmp	.-112    	; 0x15be <joystick_dir+0xce>
		if(prev_dir == direction){
    162e:	d0 91 5b 02 	lds	r29, 0x025B	; 0x80025b <prev_dir>
    1632:	c5 cf       	rjmp	.-118    	; 0x15be <joystick_dir+0xce>
		prev_dir = direction ; 
	}
	return direction ; 


    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	08 95       	ret

0000163a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <spi_setup_master>
    1640:	08 95       	ret

00001642 <ledmatrix_update_column>:
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	80 31       	cpi	r24, 0x10	; 16
    164c:	90 f4       	brcc	.+36     	; 0x1672 <ledmatrix_update_column+0x30>
    164e:	8b 01       	movw	r16, r22
    1650:	c8 2f       	mov	r28, r24
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    1658:	8c 2f       	mov	r24, r28
    165a:	8f 70       	andi	r24, 0x0F	; 15
    165c:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    1660:	e8 01       	movw	r28, r16
    1662:	08 5f       	subi	r16, 0xF8	; 248
    1664:	1f 4f       	sbci	r17, 0xFF	; 255
    1666:	89 91       	ld	r24, Y+
    1668:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    166c:	c0 17       	cp	r28, r16
    166e:	d1 07       	cpc	r29, r17
    1670:	d1 f7       	brne	.-12     	; 0x1666 <ledmatrix_update_column+0x24>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <ledmatrix_shift_display_left>:
    167c:	84 e0       	ldi	r24, 0x04	; 4
    167e:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    1688:	08 95       	ret

0000168a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    168a:	8f e0       	ldi	r24, 0x0F	; 15
    168c:	0e 94 19 10 	call	0x2032	; 0x2032 <spi_send_byte>
    1690:	08 95       	ret

00001692 <initialise_hardware>:
	if (num==0){
		reset_lives();
	}else {
		set_lives(num);
	}
	display_lives(); 
    1692:	0e 94 1d 0b 	call	0x163a	; 0x163a <ledmatrix_setup>
    1696:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <initialise_joystick>
    169a:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_button_interrupts>
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	7b e4       	ldi	r23, 0x4B	; 75
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <init_serial_stdio>
    16ac:	0e 94 58 10 	call	0x20b0	; 0x20b0 <init_timer0>
    16b0:	78 94       	sei
    16b2:	08 95       	ret

000016b4 <splash_screen>:
    16b4:	0e 94 39 10 	call	0x2072	; 0x2072 <clear_terminal>
    16b8:	6a e0       	ldi	r22, 0x0A	; 10
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	8a e0       	ldi	r24, 0x0A	; 10
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    16c4:	8c e8       	ldi	r24, 0x8C	; 140
    16c6:	95 e0       	ldi	r25, 0x05	; 5
    16c8:	9f 93       	push	r25
    16ca:	8f 93       	push	r24
    16cc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    16d0:	6c e0       	ldi	r22, 0x0C	; 12
    16d2:	70 e0       	ldi	r23, 0x00	; 0
    16d4:	8a e0       	ldi	r24, 0x0A	; 10
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    16dc:	89 e6       	ldi	r24, 0x69	; 105
    16de:	95 e0       	ldi	r25, 0x05	; 5
    16e0:	9f 93       	push	r25
    16e2:	8f 93       	push	r24
    16e4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    16e8:	6e e0       	ldi	r22, 0x0E	; 14
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	8a e0       	ldi	r24, 0x0A	; 10
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    16f4:	80 e5       	ldi	r24, 0x50	; 80
    16f6:	95 e0       	ldi	r25, 0x05	; 5
    16f8:	9f 93       	push	r25
    16fa:	8f 93       	push	r24
    16fc:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    1700:	0e 94 45 0b 	call	0x168a	; 0x168a <ledmatrix_clear>
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	60 ef       	ldi	r22, 0xF0	; 240
    1712:	82 ea       	ldi	r24, 0xA2	; 162
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <set_scrolling_display_text>
    171a:	10 c0       	rjmp	.+32     	; 0x173c <splash_screen+0x88>
    171c:	2f e7       	ldi	r18, 0x7F	; 127
    171e:	89 ea       	ldi	r24, 0xA9	; 169
    1720:	93 e0       	ldi	r25, 0x03	; 3
    1722:	21 50       	subi	r18, 0x01	; 1
    1724:	80 40       	sbci	r24, 0x00	; 0
    1726:	90 40       	sbci	r25, 0x00	; 0
    1728:	e1 f7       	brne	.-8      	; 0x1722 <splash_screen+0x6e>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <splash_screen+0x78>
    172c:	00 00       	nop
    172e:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	19 f0       	breq	.+6      	; 0x173c <splash_screen+0x88>
    1736:	0e 94 45 0b 	call	0x168a	; 0x168a <ledmatrix_clear>
    173a:	08 95       	ret
    173c:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <scroll_display>
    1740:	81 11       	cpse	r24, r1
    1742:	ec cf       	rjmp	.-40     	; 0x171c <splash_screen+0x68>
    1744:	e5 cf       	rjmp	.-54     	; 0x1710 <splash_screen+0x5c>

00001746 <handle_level_complete>:
    1746:	6a e0       	ldi	r22, 0x0A	; 10
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	83 e2       	ldi	r24, 0x23	; 35
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    1752:	81 e4       	ldi	r24, 0x41	; 65
    1754:	95 e0       	ldi	r25, 0x05	; 5
    1756:	9f 93       	push	r25
    1758:	8f 93       	push	r24
    175a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    175e:	6b e0       	ldi	r22, 0x0B	; 11
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	83 e2       	ldi	r24, 0x23	; 35
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	95 e0       	ldi	r25, 0x05	; 5
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    1776:	0e 94 57 0f 	call	0x1eae	; 0x1eae <clear_serial_input_buffer>
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1786:	8f 3f       	cpi	r24, 0xFF	; 255
    1788:	21 f4       	brne	.+8      	; 0x1792 <handle_level_complete+0x4c>
    178a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <serial_input_available>
    178e:	88 23       	and	r24, r24
    1790:	c1 f3       	breq	.-16     	; 0x1782 <handle_level_complete+0x3c>
    1792:	0e 94 57 0f 	call	0x1eae	; 0x1eae <clear_serial_input_buffer>
    1796:	08 95       	ret

00001798 <display_lives>:
    1798:	0e 94 51 05 	call	0xaa2	; 0xaa2 <get_lives>
    179c:	18 b8       	out	0x08, r1	; 8
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	11 f4       	brne	.+4      	; 0x17a6 <display_lives+0xe>
    17a2:	88 b9       	out	0x08, r24	; 8
    17a4:	08 95       	ret
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	19 f4       	brne	.+6      	; 0x17b0 <display_lives+0x18>
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	88 b9       	out	0x08, r24	; 8
    17ae:	08 95       	ret
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <display_lives+0x20>
    17b4:	87 e0       	ldi	r24, 0x07	; 7
    17b6:	88 b9       	out	0x08, r24	; 8
    17b8:	08 95       	ret

000017ba <handle_game_over>:
    17ba:	0e 94 cc 0b 	call	0x1798	; 0x1798 <display_lives>
    17be:	6e e0       	ldi	r22, 0x0E	; 14
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	83 e2       	ldi	r24, 0x23	; 35
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    17ca:	86 e1       	ldi	r24, 0x16	; 22
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	9f 93       	push	r25
    17d0:	8f 93       	push	r24
    17d2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    17d6:	60 e1       	ldi	r22, 0x10	; 16
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	83 e2       	ldi	r24, 0x23	; 35
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    17e2:	88 ef       	ldi	r24, 0xF8	; 248
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	9f 93       	push	r25
    17e8:	8f 93       	push	r24
    17ea:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    17fa:	8f 3f       	cpi	r24, 0xFF	; 255
    17fc:	e1 f3       	breq	.-8      	; 0x17f6 <handle_game_over+0x3c>
    17fe:	08 95       	ret

00001800 <new_game>:
    1800:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <paused>
    1804:	0e 94 e6 06 	call	0xdcc	; 0xdcc <initialise_game>
    1808:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <init_score>
    180c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <reset_lives>
    1810:	0e 94 cc 0b 	call	0x1798	; 0x1798 <display_lives>
    1814:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1818:	0e 94 57 0f 	call	0x1eae	; 0x1eae <clear_serial_input_buffer>
    181c:	08 95       	ret

0000181e <play_game>:
    181e:	2f 92       	push	r2
    1820:	3f 92       	push	r3
    1822:	4f 92       	push	r4
    1824:	5f 92       	push	r5
    1826:	6f 92       	push	r6
    1828:	7f 92       	push	r7
    182a:	8f 92       	push	r8
    182c:	9f 92       	push	r9
    182e:	af 92       	push	r10
    1830:	bf 92       	push	r11
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	60 97       	sbiw	r28, 0x10	; 16
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	0e 94 70 10 	call	0x20e0	; 0x20e0 <get_current_time>
    1856:	2b 01       	movw	r4, r22
    1858:	3c 01       	movw	r6, r24
    185a:	6d 87       	std	Y+13, r22	; 0x0d
    185c:	7e 87       	std	Y+14, r23	; 0x0e
    185e:	8f 87       	std	Y+15, r24	; 0x0f
    1860:	98 8b       	std	Y+16, r25	; 0x10
    1862:	69 87       	std	Y+9, r22	; 0x09
    1864:	7a 87       	std	Y+10, r23	; 0x0a
    1866:	8b 87       	std	Y+11, r24	; 0x0b
    1868:	9c 87       	std	Y+12, r25	; 0x0c
    186a:	6d 83       	std	Y+5, r22	; 0x05
    186c:	7e 83       	std	Y+6, r23	; 0x06
    186e:	8f 83       	std	Y+7, r24	; 0x07
    1870:	98 87       	std	Y+8, r25	; 0x08
    1872:	69 83       	std	Y+1, r22	; 0x01
    1874:	7a 83       	std	Y+2, r23	; 0x02
    1876:	8b 83       	std	Y+3, r24	; 0x03
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	91 2c       	mov	r9, r1
    187c:	0f 2e       	mov	r0, r31
    187e:	f9 e8       	ldi	r31, 0x89	; 137
    1880:	2f 2e       	mov	r2, r31
    1882:	f3 e0       	ldi	r31, 0x03	; 3
    1884:	3f 2e       	mov	r3, r31
    1886:	f0 2d       	mov	r31, r0
    1888:	88 24       	eor	r8, r8
    188a:	83 94       	inc	r8
    188c:	0f 2e       	mov	r0, r31
    188e:	f4 eb       	ldi	r31, 0xB4	; 180
    1890:	af 2e       	mov	r10, r31
    1892:	f1 e0       	ldi	r31, 0x01	; 1
    1894:	bf 2e       	mov	r11, r31
    1896:	f0 2d       	mov	r31, r0
    1898:	0e c1       	rjmp	.+540    	; 0x1ab6 <play_game+0x298>
    189a:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    189e:	18 2f       	mov	r17, r24
    18a0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <display_lives>
    18a4:	1f 3f       	cpi	r17, 0xFF	; 255
    18a6:	09 f0       	breq	.+2      	; 0x18aa <play_game+0x8c>
    18a8:	0f c1       	rjmp	.+542    	; 0x1ac8 <play_game+0x2aa>
    18aa:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <serial_input_available>
    18ae:	88 23       	and	r24, r24
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <play_game+0x96>
    18b2:	0c c1       	rjmp	.+536    	; 0x1acc <play_game+0x2ae>
    18b4:	f1 01       	movw	r30, r2
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	0e 94 a0 11 	call	0x2340	; 0x2340 <fgetc>
    18be:	08 2f       	mov	r16, r24
    18c0:	91 10       	cpse	r9, r1
    18c2:	03 c0       	rjmp	.+6      	; 0x18ca <play_game+0xac>
    18c4:	8b 31       	cpi	r24, 0x1B	; 27
    18c6:	59 f4       	brne	.+22     	; 0x18de <play_game+0xc0>
    18c8:	03 c1       	rjmp	.+518    	; 0x1ad0 <play_game+0x2b2>
    18ca:	f1 e0       	ldi	r31, 0x01	; 1
    18cc:	9f 12       	cpse	r9, r31
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <play_game+0xb8>
    18d0:	8b 35       	cpi	r24, 0x5B	; 91
    18d2:	29 f4       	brne	.+10     	; 0x18de <play_game+0xc0>
    18d4:	00 c1       	rjmp	.+512    	; 0x1ad6 <play_game+0x2b8>
    18d6:	22 e0       	ldi	r18, 0x02	; 2
    18d8:	92 16       	cp	r9, r18
    18da:	09 f4       	brne	.+2      	; 0x18de <play_game+0xc0>
    18dc:	01 c1       	rjmp	.+514    	; 0x1ae0 <play_game+0x2c2>
    18de:	80 2f       	mov	r24, r16
    18e0:	8f 7d       	andi	r24, 0xDF	; 223
    18e2:	8e 34       	cpi	r24, 0x4E	; 78
    18e4:	29 f4       	brne	.+10     	; 0x18f0 <play_game+0xd2>
    18e6:	0e 94 00 0c 	call	0x1800	; 0x1800 <new_game>
    18ea:	91 2c       	mov	r9, r1
    18ec:	0f ef       	ldi	r16, 0xFF	; 255
    18ee:	2e c0       	rjmp	.+92     	; 0x194c <play_game+0x12e>
    18f0:	0f 7d       	andi	r16, 0xDF	; 223
    18f2:	00 35       	cpi	r16, 0x50	; 80
    18f4:	49 f5       	brne	.+82     	; 0x1948 <play_game+0x12a>
    18f6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <paused>
    18fa:	98 2d       	mov	r25, r8
    18fc:	81 11       	cpse	r24, r1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <paused>
    1904:	81 11       	cpse	r24, r1
    1906:	11 c0       	rjmp	.+34     	; 0x192a <play_game+0x10c>
    1908:	64 e0       	ldi	r22, 0x04	; 4
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	85 e2       	ldi	r24, 0x25	; 37
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    1914:	8b ea       	ldi	r24, 0xAB	; 171
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	9f 93       	push	r25
    191a:	8f 93       	push	r24
    191c:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	91 2c       	mov	r9, r1
    1926:	0f ef       	ldi	r16, 0xFF	; 255
    1928:	11 c0       	rjmp	.+34     	; 0x194c <play_game+0x12e>
    192a:	64 e0       	ldi	r22, 0x04	; 4
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	85 e2       	ldi	r24, 0x25	; 37
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 1f 10 	call	0x203e	; 0x203e <move_cursor>
    1936:	bf 92       	push	r11
    1938:	af 92       	push	r10
    193a:	0e 94 de 11 	call	0x23bc	; 0x23bc <printf>
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	91 2c       	mov	r9, r1
    1944:	0f ef       	ldi	r16, 0xFF	; 255
    1946:	02 c0       	rjmp	.+4      	; 0x194c <play_game+0x12e>
    1948:	91 2c       	mov	r9, r1
    194a:	0f ef       	ldi	r16, 0xFF	; 255
    194c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <paused>
    1950:	81 11       	cpse	r24, r1
    1952:	b1 c0       	rjmp	.+354    	; 0x1ab6 <play_game+0x298>
    1954:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <joystick_dir>
    1958:	13 30       	cpi	r17, 0x03	; 3
    195a:	21 f0       	breq	.+8      	; 0x1964 <play_game+0x146>
    195c:	01 34       	cpi	r16, 0x41	; 65
    195e:	11 f0       	breq	.+4      	; 0x1964 <play_game+0x146>
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	21 f4       	brne	.+8      	; 0x196c <play_game+0x14e>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	0e 94 28 08 	call	0x1050	; 0x1050 <change_pacman_direction>
    196a:	1d c0       	rjmp	.+58     	; 0x19a6 <play_game+0x188>
    196c:	12 30       	cpi	r17, 0x02	; 2
    196e:	21 f0       	breq	.+8      	; 0x1978 <play_game+0x15a>
    1970:	07 35       	cpi	r16, 0x57	; 87
    1972:	11 f0       	breq	.+4      	; 0x1978 <play_game+0x15a>
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	21 f4       	brne	.+8      	; 0x1980 <play_game+0x162>
    1978:	88 2d       	mov	r24, r8
    197a:	0e 94 28 08 	call	0x1050	; 0x1050 <change_pacman_direction>
    197e:	13 c0       	rjmp	.+38     	; 0x19a6 <play_game+0x188>
    1980:	11 30       	cpi	r17, 0x01	; 1
    1982:	21 f0       	breq	.+8      	; 0x198c <play_game+0x16e>
    1984:	03 35       	cpi	r16, 0x53	; 83
    1986:	11 f0       	breq	.+4      	; 0x198c <play_game+0x16e>
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	21 f4       	brne	.+8      	; 0x1994 <play_game+0x176>
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	0e 94 28 08 	call	0x1050	; 0x1050 <change_pacman_direction>
    1992:	09 c0       	rjmp	.+18     	; 0x19a6 <play_game+0x188>
    1994:	11 23       	and	r17, r17
    1996:	21 f0       	breq	.+8      	; 0x19a0 <play_game+0x182>
    1998:	04 34       	cpi	r16, 0x44	; 68
    199a:	11 f0       	breq	.+4      	; 0x19a0 <play_game+0x182>
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	19 f4       	brne	.+6      	; 0x19a6 <play_game+0x188>
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	0e 94 28 08 	call	0x1050	; 0x1050 <change_pacman_direction>
    19a6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <get_current_time>
    19aa:	6b 01       	movw	r12, r22
    19ac:	7c 01       	movw	r14, r24
    19ae:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    19b2:	81 11       	cpse	r24, r1
    19b4:	20 c0       	rjmp	.+64     	; 0x19f6 <play_game+0x1d8>
    19b6:	d3 01       	movw	r26, r6
    19b8:	c2 01       	movw	r24, r4
    19ba:	80 57       	subi	r24, 0x70	; 112
    19bc:	9e 4f       	sbci	r25, 0xFE	; 254
    19be:	af 4f       	sbci	r26, 0xFF	; 255
    19c0:	bf 4f       	sbci	r27, 0xFF	; 255
    19c2:	c8 16       	cp	r12, r24
    19c4:	d9 06       	cpc	r13, r25
    19c6:	ea 06       	cpc	r14, r26
    19c8:	fb 06       	cpc	r15, r27
    19ca:	a8 f0       	brcs	.+42     	; 0x19f6 <play_game+0x1d8>
    19cc:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <move_pacman>
    19d0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <is_level_complete>
    19d4:	88 23       	and	r24, r24
    19d6:	69 f0       	breq	.+26     	; 0x19f2 <play_game+0x1d4>
    19d8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <handle_level_complete>
    19dc:	0e 94 58 05 	call	0xab0	; 0xab0 <initialise_game_level>
    19e0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <get_current_time>
    19e4:	2b 01       	movw	r4, r22
    19e6:	3c 01       	movw	r6, r24
    19e8:	69 83       	std	Y+1, r22	; 0x01
    19ea:	7a 83       	std	Y+2, r23	; 0x02
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <play_game+0x1d8>
    19f2:	26 01       	movw	r4, r12
    19f4:	37 01       	movw	r6, r14
    19f6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    19fa:	81 11       	cpse	r24, r1
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <play_game+0x208>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	ab 81       	ldd	r26, Y+3	; 0x03
    1a04:	bc 81       	ldd	r27, Y+4	; 0x04
    1a06:	8c 55       	subi	r24, 0x5C	; 92
    1a08:	9e 4f       	sbci	r25, 0xFE	; 254
    1a0a:	af 4f       	sbci	r26, 0xFF	; 255
    1a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0e:	c8 16       	cp	r12, r24
    1a10:	d9 06       	cpc	r13, r25
    1a12:	ea 06       	cpc	r14, r26
    1a14:	fb 06       	cpc	r15, r27
    1a16:	38 f0       	brcs	.+14     	; 0x1a26 <play_game+0x208>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	0e 94 4a 08 	call	0x1094	; 0x1094 <move_ghost>
    1a1e:	c9 82       	std	Y+1, r12	; 0x01
    1a20:	da 82       	std	Y+2, r13	; 0x02
    1a22:	eb 82       	std	Y+3, r14	; 0x03
    1a24:	fc 82       	std	Y+4, r15	; 0x04
    1a26:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	14 c0       	rjmp	.+40     	; 0x1a56 <play_game+0x238>
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	af 81       	ldd	r26, Y+7	; 0x07
    1a34:	b8 85       	ldd	r27, Y+8	; 0x08
    1a36:	8e 53       	subi	r24, 0x3E	; 62
    1a38:	9e 4f       	sbci	r25, 0xFE	; 254
    1a3a:	af 4f       	sbci	r26, 0xFF	; 255
    1a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3e:	c8 16       	cp	r12, r24
    1a40:	d9 06       	cpc	r13, r25
    1a42:	ea 06       	cpc	r14, r26
    1a44:	fb 06       	cpc	r15, r27
    1a46:	38 f0       	brcs	.+14     	; 0x1a56 <play_game+0x238>
    1a48:	88 2d       	mov	r24, r8
    1a4a:	0e 94 4a 08 	call	0x1094	; 0x1094 <move_ghost>
    1a4e:	cd 82       	std	Y+5, r12	; 0x05
    1a50:	de 82       	std	Y+6, r13	; 0x06
    1a52:	ef 82       	std	Y+7, r14	; 0x07
    1a54:	f8 86       	std	Y+8, r15	; 0x08
    1a56:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <play_game+0x268>
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	ab 85       	ldd	r26, Y+11	; 0x0b
    1a64:	bc 85       	ldd	r27, Y+12	; 0x0c
    1a66:	8c 50       	subi	r24, 0x0C	; 12
    1a68:	9e 4f       	sbci	r25, 0xFE	; 254
    1a6a:	af 4f       	sbci	r26, 0xFF	; 255
    1a6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6e:	c8 16       	cp	r12, r24
    1a70:	d9 06       	cpc	r13, r25
    1a72:	ea 06       	cpc	r14, r26
    1a74:	fb 06       	cpc	r15, r27
    1a76:	38 f0       	brcs	.+14     	; 0x1a86 <play_game+0x268>
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	0e 94 4a 08 	call	0x1094	; 0x1094 <move_ghost>
    1a7e:	c9 86       	std	Y+9, r12	; 0x09
    1a80:	da 86       	std	Y+10, r13	; 0x0a
    1a82:	eb 86       	std	Y+11, r14	; 0x0b
    1a84:	fc 86       	std	Y+12, r15	; 0x0c
    1a86:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    1a8a:	81 11       	cpse	r24, r1
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <play_game+0x298>
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	af 85       	ldd	r26, Y+15	; 0x0f
    1a94:	b8 89       	ldd	r27, Y+16	; 0x10
    1a96:	86 5c       	subi	r24, 0xC6	; 198
    1a98:	9d 4f       	sbci	r25, 0xFD	; 253
    1a9a:	af 4f       	sbci	r26, 0xFF	; 255
    1a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a9e:	c8 16       	cp	r12, r24
    1aa0:	d9 06       	cpc	r13, r25
    1aa2:	ea 06       	cpc	r14, r26
    1aa4:	fb 06       	cpc	r15, r27
    1aa6:	38 f0       	brcs	.+14     	; 0x1ab6 <play_game+0x298>
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	0e 94 4a 08 	call	0x1094	; 0x1094 <move_ghost>
    1aae:	cd 86       	std	Y+13, r12	; 0x0d
    1ab0:	de 86       	std	Y+14, r13	; 0x0e
    1ab2:	ef 86       	std	Y+15, r14	; 0x0f
    1ab4:	f8 8a       	std	Y+16, r15	; 0x10
    1ab6:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <is_game_over>
    1aba:	81 11       	cpse	r24, r1
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <play_game+0x2c6>
    1abe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <get_lives>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	ea ce       	rjmp	.-556    	; 0x189a <play_game+0x7c>
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <play_game+0x2c6>
    1ac8:	0f ef       	ldi	r16, 0xFF	; 255
    1aca:	40 cf       	rjmp	.-384    	; 0x194c <play_game+0x12e>
    1acc:	0f ef       	ldi	r16, 0xFF	; 255
    1ace:	3e cf       	rjmp	.-388    	; 0x194c <play_game+0x12e>
    1ad0:	98 2c       	mov	r9, r8
    1ad2:	0f ef       	ldi	r16, 0xFF	; 255
    1ad4:	3b cf       	rjmp	.-394    	; 0x194c <play_game+0x12e>
    1ad6:	68 94       	set
    1ad8:	99 24       	eor	r9, r9
    1ada:	91 f8       	bld	r9, 1
    1adc:	0f ef       	ldi	r16, 0xFF	; 255
    1ade:	36 cf       	rjmp	.-404    	; 0x194c <play_game+0x12e>
    1ae0:	91 2c       	mov	r9, r1
    1ae2:	34 cf       	rjmp	.-408    	; 0x194c <play_game+0x12e>
    1ae4:	60 96       	adiw	r28, 0x10	; 16
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	df 90       	pop	r13
    1afe:	cf 90       	pop	r12
    1b00:	bf 90       	pop	r11
    1b02:	af 90       	pop	r10
    1b04:	9f 90       	pop	r9
    1b06:	8f 90       	pop	r8
    1b08:	7f 90       	pop	r7
    1b0a:	6f 90       	pop	r6
    1b0c:	5f 90       	pop	r5
    1b0e:	4f 90       	pop	r4
    1b10:	3f 90       	pop	r3
    1b12:	2f 90       	pop	r2
    1b14:	08 95       	ret

00001b16 <main>:
    1b16:	0e 94 49 0b 	call	0x1692	; 0x1692 <initialise_hardware>
    1b1a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <splash_screen>
    1b1e:	0e 94 00 0c 	call	0x1800	; 0x1800 <new_game>
    1b22:	0e 94 0f 0c 	call	0x181e	; 0x181e <play_game>
    1b26:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <handle_game_over>
    1b2a:	f9 cf       	rjmp	.-14     	; 0x1b1e <main+0x8>

00001b2c <is_paused>:
	
}

uint8_t is_paused(void){
	return paused;
    1b2c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <paused>
    1b30:	08 95       	ret

00001b32 <init_score>:
uint32_t score;
uint32_t high_score;

 
void init_score(void) {
	score = 0;
    1b32:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <score>
    1b36:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <score+0x1>
    1b3a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <score+0x2>
    1b3e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <score+0x3>
    1b42:	08 95       	ret

00001b44 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1b44:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <score>
    1b48:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <score+0x1>
    1b4c:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <score+0x2>
    1b50:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <score+0x3>
    1b54:	48 0f       	add	r20, r24
    1b56:	59 1f       	adc	r21, r25
    1b58:	61 1d       	adc	r22, r1
    1b5a:	71 1d       	adc	r23, r1
    1b5c:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <score>
    1b60:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <score+0x1>
    1b64:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <score+0x2>
    1b68:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <score+0x3>
    1b6c:	08 95       	ret

00001b6e <get_score>:
}

uint32_t get_score(void) {
	return score;
    1b6e:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <score>
    1b72:	70 91 72 02 	lds	r23, 0x0272	; 0x800272 <score+0x1>
    1b76:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <score+0x2>
    1b7a:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <score+0x3>
}
    1b7e:	08 95       	ret

00001b80 <set_highscore>:

void set_highscore (uint32_t value) {
	high_score= value ; 
    1b80:	60 93 6d 02 	sts	0x026D, r22	; 0x80026d <high_score>
    1b84:	70 93 6e 02 	sts	0x026E, r23	; 0x80026e <high_score+0x1>
    1b88:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <high_score+0x2>
    1b8c:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <high_score+0x3>
    1b90:	08 95       	ret

00001b92 <get_highscore>:
}

uint32_t get_highscore(void){
		return high_score ; 	
    1b92:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <high_score>
    1b96:	70 91 6e 02 	lds	r23, 0x026E	; 0x80026e <high_score+0x1>
    1b9a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <high_score+0x2>
    1b9e:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <high_score+0x3>
    1ba2:	08 95       	ret

00001ba4 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1ba4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    1ba8:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <display_string+0x1>
    1bac:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <display_string>
	next_col_ptr = 0;
    1bb0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <next_col_ptr+0x1>
    1bb4:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <next_col_ptr>
	next_char_to_display = 0;
    1bb8:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <next_char_to_display+0x1>
    1bbc:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <next_char_to_display>
    1bc0:	08 95       	ret

00001bc2 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	28 97       	sbiw	r28, 0x08	; 8
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1bda:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <next_col_ptr>
    1bde:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <next_col_ptr+0x1>
    1be2:	30 97       	sbiw	r30, 0x00	; 0
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1be6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1be8:	10 ff       	sbrs	r17, 0
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1bec:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <next_col_ptr+0x1>
    1bf0:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1bf4:	00 e0       	ldi	r16, 0x00	; 0
    1bf6:	6b c0       	rjmp	.+214    	; 0x1cce <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	f0 93 67 02 	sts	0x0267, r31	; 0x800267 <next_col_ptr+0x1>
    1bfe:	e0 93 66 02 	sts	0x0266, r30	; 0x800266 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1c02:	00 e0       	ldi	r16, 0x00	; 0
    1c04:	64 c0       	rjmp	.+200    	; 0x1cce <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1c06:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <next_char_to_display>
    1c0a:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <next_char_to_display+0x1>
    1c0e:	30 97       	sbiw	r30, 0x00	; 0
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <scroll_display+0x52>
    1c12:	49 c0       	rjmp	.+146    	; 0x1ca6 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1c14:	cf 01       	movw	r24, r30
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <next_char_to_display+0x1>
    1c1c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <next_char_to_display>
    1c20:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1c22:	e1 11       	cpse	r30, r1
    1c24:	0a c0       	rjmp	.+20     	; 0x1c3a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1c26:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <next_char_to_display+0x1>
    1c2a:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <next_char_to_display>
			shift_countdown = 16;
    1c2e:	80 e1       	ldi	r24, 0x10	; 16
    1c30:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1c34:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	4a c0       	rjmp	.+148    	; 0x1cce <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1c3a:	8f e9       	ldi	r24, 0x9F	; 159
    1c3c:	8e 0f       	add	r24, r30
    1c3e:	8a 31       	cpi	r24, 0x1A	; 26
    1c40:	70 f4       	brcc	.+28     	; 0x1c5e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	ee 0f       	add	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	ea 51       	subi	r30, 0x1A	; 26
    1c4a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c4c:	85 91       	lpm	r24, Z+
    1c4e:	94 91       	lpm	r25, Z
    1c50:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <next_col_ptr+0x1>
    1c54:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1c58:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
    1c5c:	38 c0       	rjmp	.+112    	; 0x1cce <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1c5e:	8f eb       	ldi	r24, 0xBF	; 191
    1c60:	8e 0f       	add	r24, r30
    1c62:	8a 31       	cpi	r24, 0x1A	; 26
    1c64:	70 f4       	brcc	.+28     	; 0x1c82 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	ea 5d       	subi	r30, 0xDA	; 218
    1c6e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c70:	85 91       	lpm	r24, Z+
    1c72:	94 91       	lpm	r25, Z
    1c74:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <next_col_ptr+0x1>
    1c78:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1c7c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1c7e:	10 e0       	ldi	r17, 0x00	; 0
    1c80:	26 c0       	rjmp	.+76     	; 0x1cce <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1c82:	80 ed       	ldi	r24, 0xD0	; 208
    1c84:	8e 0f       	add	r24, r30
    1c86:	8a 30       	cpi	r24, 0x0A	; 10
    1c88:	00 f5       	brcc	.+64     	; 0x1cca <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	ec 5c       	subi	r30, 0xCC	; 204
    1c92:	fa 4f       	sbci	r31, 0xFA	; 250
    1c94:	85 91       	lpm	r24, Z+
    1c96:	94 91       	lpm	r25, Z
    1c98:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <next_col_ptr+0x1>
    1c9c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ca0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1ca6:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <display_string>
    1caa:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1cae:	01 e0       	ldi	r16, 0x01	; 1
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	09 f0       	breq	.+2      	; 0x1cb6 <scroll_display+0xf4>
    1cb4:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1cb6:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <next_char_to_display+0x1>
    1cba:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <next_char_to_display>
		display_string = 0;
    1cbe:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <display_string+0x1>
    1cc2:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1cc6:	10 e0       	ldi	r17, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1cca:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1cce:	0e 94 3e 0b 	call	0x167c	; 0x167c <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1cd2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	38 96       	adiw	r30, 0x08	; 8
    1cda:	ce 01       	movw	r24, r28
    1cdc:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1cde:	11 23       	and	r17, r17
    1ce0:	14 f4       	brge	.+4      	; 0x1ce6 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1ce2:	20 83       	st	Z, r18
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1ce6:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1ce8:	11 0f       	add	r17, r17
    1cea:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1cec:	e8 17       	cp	r30, r24
    1cee:	f9 07       	cpc	r31, r25
    1cf0:	b1 f7       	brne	.-20     	; 0x1cde <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1cf4:	be 01       	movw	r22, r28
    1cf6:	6f 5f       	subi	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	8f e0       	ldi	r24, 0x0F	; 15
    1cfc:	0e 94 21 0b 	call	0x1642	; 0x1642 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1d00:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <shift_countdown.1854>
    1d04:	88 23       	and	r24, r24
    1d06:	89 f0       	breq	.+34     	; 0x1d2a <scroll_display+0x168>
		shift_countdown--;
    1d08:	81 50       	subi	r24, 0x01	; 1
    1d0a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1d0e:	00 23       	and	r16, r16
    1d10:	11 f0       	breq	.+4      	; 0x1d16 <scroll_display+0x154>
    1d12:	88 23       	and	r24, r24
    1d14:	11 f0       	breq	.+4      	; 0x1d1a <scroll_display+0x158>
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <scroll_display+0x15e>
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <scroll_display+0x15e>
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	99 23       	and	r25, r25
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <scroll_display+0x16e>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1d2a:	00 23       	and	r16, r16
    1d2c:	a1 f3       	breq	.-24     	; 0x1d16 <scroll_display+0x154>
    1d2e:	f7 cf       	rjmp	.-18     	; 0x1d1e <scroll_display+0x15c>
	return !finished;
}
    1d30:	28 96       	adiw	r28, 0x08	; 8
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1d46:	cf 93       	push	r28
    1d48:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1d4a:	8a 30       	cpi	r24, 0x0A	; 10
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1d4e:	8d e0       	ldi	r24, 0x0D	; 13
    1d50:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1d54:	9f b7       	in	r25, 0x3f	; 63
    1d56:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1d5a:	99 23       	and	r25, r25
    1d5c:	29 f1       	breq	.+74     	; 0x1da8 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1d5e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1d62:	8f 3f       	cpi	r24, 0xFF	; 255
    1d64:	d1 f3       	breq	.-12     	; 0x1d5a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1d66:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1d68:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <out_insert_pos>
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	8e 0f       	add	r24, r30
    1d70:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <out_insert_pos>
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	e9 58       	subi	r30, 0x89	; 137
    1d78:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1d7c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1d86:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <out_insert_pos>
    1d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8c:	11 f4       	brne	.+4      	; 0x1d92 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1d8e:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1d92:	e1 ec       	ldi	r30, 0xC1	; 193
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	80 62       	ori	r24, 0x20	; 32
    1d9a:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1d9c:	99 23       	and	r25, r25
    1d9e:	39 f0       	breq	.+14     	; 0x1dae <uart_put_char+0x68>
		sei();
    1da0:	78 94       	sei
	}
	return 0;
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
}
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1db6:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1dba:	88 23       	and	r24, r24
    1dbc:	e1 f3       	breq	.-8      	; 0x1db6 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1dbe:	2f b7       	in	r18, 0x3f	; 63
    1dc0:	20 78       	andi	r18, 0x80	; 128
	cli();
    1dc2:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1dc4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <input_insert_pos>
    1dc8:	30 91 88 03 	lds	r19, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	83 1b       	sub	r24, r19
    1dd0:	91 09       	sbc	r25, r1
    1dd2:	5a f4       	brpl	.+22     	; 0x1dea <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1dd4:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <input_insert_pos>
    1dd8:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	e8 1b       	sub	r30, r24
    1de0:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1de2:	e9 57       	subi	r30, 0x79	; 121
    1de4:	fc 4f       	sbci	r31, 0xFC	; 252
    1de6:	80 81       	ld	r24, Z
    1de8:	0a c0       	rjmp	.+20     	; 0x1dfe <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1dea:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <input_insert_pos>
    1dee:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	e8 1b       	sub	r30, r24
    1df6:	f1 09       	sbc	r31, r1
    1df8:	e9 58       	subi	r30, 0x89	; 137
    1dfa:	fc 4f       	sbci	r31, 0xFC	; 252
    1dfc:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1dfe:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1e02:	91 50       	subi	r25, 0x01	; 1
    1e04:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1e08:	22 23       	and	r18, r18
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <uart_get_char+0x58>
		sei();
    1e0c:	78 94       	sei
	}	
	return c;
}
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	08 95       	ret

00001e12 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1e12:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1e16:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1e1a:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1e1e:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <bytes_in_input_buffer>
	input_overrun = 0;
    1e22:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1e26:	40 93 68 02 	sts	0x0268, r20	; 0x800268 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	aa 1f       	adc	r26, r26
    1e34:	bb 1f       	adc	r27, r27
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	aa 1f       	adc	r26, r26
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	9c 01       	movw	r18, r24
    1e40:	ad 01       	movw	r20, r26
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	72 e1       	ldi	r23, 0x12	; 18
    1e4e:	8a e7       	ldi	r24, 0x7A	; 122
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
    1e56:	ba 01       	movw	r22, r20
    1e58:	a9 01       	movw	r20, r18
    1e5a:	4f 5f       	subi	r20, 0xFF	; 255
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	6f 4f       	sbci	r22, 0xFF	; 255
    1e60:	7f 4f       	sbci	r23, 0xFF	; 255
    1e62:	db 01       	movw	r26, r22
    1e64:	ca 01       	movw	r24, r20
    1e66:	1a f4       	brpl	.+6      	; 0x1e6e <init_serial_stdio+0x5c>
    1e68:	01 96       	adiw	r24, 0x01	; 1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	b1 1d       	adc	r27, r1
    1e6e:	b5 95       	asr	r27
    1e70:	a7 95       	ror	r26
    1e72:	97 95       	ror	r25
    1e74:	87 95       	ror	r24
    1e76:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1e78:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    1e7c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1e80:	e1 ec       	ldi	r30, 0xC1	; 193
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	88 e1       	ldi	r24, 0x18	; 24
    1e86:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1e88:	80 81       	ld	r24, Z
    1e8a:	80 68       	ori	r24, 0x80	; 128
    1e8c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1e8e:	e9 e8       	ldi	r30, 0x89	; 137
    1e90:	f3 e0       	ldi	r31, 0x03	; 3
    1e92:	85 e0       	ldi	r24, 0x05	; 5
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	93 83       	std	Z+3, r25	; 0x03
    1e98:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	80 83       	st	Z, r24
    1e9e:	08 95       	ret

00001ea0 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1ea0:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	91 11       	cpse	r25, r1
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <serial_input_available+0xc>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
}
    1eac:	08 95       	ret

00001eae <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1eae:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1eb2:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <bytes_in_input_buffer>
    1eb6:	08 95       	ret

00001eb8 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	2f 93       	push	r18
    1ec4:	8f 93       	push	r24
    1ec6:	9f 93       	push	r25
    1ec8:	ef 93       	push	r30
    1eca:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1ecc:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1ed0:	88 23       	and	r24, r24
    1ed2:	29 f1       	breq	.+74     	; 0x1f1e <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1ed4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <out_insert_pos>
    1ed8:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	82 1b       	sub	r24, r18
    1ee0:	91 09       	sbc	r25, r1
    1ee2:	5a f4       	brpl	.+22     	; 0x1efa <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1ee4:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <out_insert_pos>
    1ee8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	e8 1b       	sub	r30, r24
    1ef0:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1ef2:	ea 58       	subi	r30, 0x8A	; 138
    1ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef6:	90 81       	ld	r25, Z
    1ef8:	0a c0       	rjmp	.+20     	; 0x1f0e <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1efa:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <out_insert_pos>
    1efe:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	e8 1b       	sub	r30, r24
    1f06:	f1 09       	sbc	r31, r1
    1f08:	e9 58       	subi	r30, 0x89	; 137
    1f0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0c:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1f0e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1f12:	81 50       	subi	r24, 0x01	; 1
    1f14:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1f18:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1f1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8f 7d       	andi	r24, 0xDF	; 223
    1f26:	80 83       	st	Z, r24
	}
}
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	cf 93       	push	r28
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1f60:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1f64:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <do_echo>
    1f68:	88 23       	and	r24, r24
    1f6a:	49 f0       	breq	.+18     	; 0x1f7e <__vector_20+0x42>
    1f6c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bytes_in_out_buffer>
    1f70:	8f 3f       	cpi	r24, 0xFF	; 255
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	8c 2f       	mov	r24, r28
    1f7a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1f7e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1f82:	80 31       	cpi	r24, 0x10	; 16
    1f84:	20 f0       	brcs	.+8      	; 0x1f8e <__vector_20+0x52>
		input_overrun = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <input_overrun>
    1f8c:	18 c0       	rjmp	.+48     	; 0x1fbe <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1f8e:	cd 30       	cpi	r28, 0x0D	; 13
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_20+0x58>
			c = '\n';
    1f92:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1f94:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <input_insert_pos>
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	8e 0f       	add	r24, r30
    1f9c:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <input_insert_pos>
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	e9 58       	subi	r30, 0x89	; 137
    1fa4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa6:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1fa8:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <bytes_in_input_buffer>
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1fb2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <input_insert_pos>
    1fb6:	80 31       	cpi	r24, 0x10	; 16
    1fb8:	11 f4       	brne	.+4      	; 0x1fbe <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1fba:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <input_insert_pos>
		}
	}
}
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	cf 91       	pop	r28
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	0f 90       	pop	r0
    1fde:	1f 90       	pop	r1
    1fe0:	18 95       	reti

00001fe2 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1fe2:	94 b1       	in	r25, 0x04	; 4
    1fe4:	90 6b       	ori	r25, 0xB0	; 176
    1fe6:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1fe8:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1fea:	90 e5       	ldi	r25, 0x50	; 80
    1fec:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1fee:	88 30       	cpi	r24, 0x08	; 8
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <spi_setup_master+0x18>
    1ff2:	80 32       	cpi	r24, 0x20	; 32
    1ff4:	11 f0       	breq	.+4      	; 0x1ffa <spi_setup_master+0x18>
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	19 f4       	brne	.+6      	; 0x2000 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	9d bd       	out	0x2d, r25	; 45
			break;
    1ffe:	01 c0       	rjmp	.+2      	; 0x2002 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2000:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2002:	80 32       	cpi	r24, 0x20	; 32
    2004:	69 f0       	breq	.+26     	; 0x2020 <spi_setup_master+0x3e>
    2006:	28 f4       	brcc	.+10     	; 0x2012 <spi_setup_master+0x30>
    2008:	88 30       	cpi	r24, 0x08	; 8
    200a:	71 f0       	breq	.+28     	; 0x2028 <spi_setup_master+0x46>
    200c:	80 31       	cpi	r24, 0x10	; 16
    200e:	61 f0       	breq	.+24     	; 0x2028 <spi_setup_master+0x46>
    2010:	0e c0       	rjmp	.+28     	; 0x202e <spi_setup_master+0x4c>
    2012:	80 34       	cpi	r24, 0x40	; 64
    2014:	29 f0       	breq	.+10     	; 0x2020 <spi_setup_master+0x3e>
    2016:	80 38       	cpi	r24, 0x80	; 128
    2018:	51 f4       	brne	.+20     	; 0x202e <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    201a:	8c b5       	in	r24, 0x2c	; 44
    201c:	81 60       	ori	r24, 0x01	; 1
    201e:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2020:	8c b5       	in	r24, 0x2c	; 44
    2022:	82 60       	ori	r24, 0x02	; 2
    2024:	8c bd       	out	0x2c, r24	; 44
			break;
    2026:	03 c0       	rjmp	.+6      	; 0x202e <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2028:	8c b5       	in	r24, 0x2c	; 44
    202a:	81 60       	ori	r24, 0x01	; 1
    202c:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    202e:	2c 98       	cbi	0x05, 4	; 5
    2030:	08 95       	ret

00002032 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2032:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2034:	0d b4       	in	r0, 0x2d	; 45
    2036:	07 fe       	sbrs	r0, 7
    2038:	fd cf       	rjmp	.-6      	; 0x2034 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    203a:	8e b5       	in	r24, 0x2e	; 46
    203c:	08 95       	ret

0000203e <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    203e:	9f 93       	push	r25
    2040:	8f 93       	push	r24
    2042:	7f 93       	push	r23
    2044:	6f 93       	push	r22
    2046:	89 e8       	ldi	r24, 0x89	; 137
    2048:	96 e0       	ldi	r25, 0x06	; 6
    204a:	9f 93       	push	r25
    204c:	8f 93       	push	r24
    204e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	08 95       	ret

00002060 <normal_display_mode>:
    2060:	84 e8       	ldi	r24, 0x84	; 132
    2062:	96 e0       	ldi	r25, 0x06	; 6
    2064:	9f 93       	push	r25
    2066:	8f 93       	push	r24
    2068:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	08 95       	ret

00002072 <clear_terminal>:
    2072:	8f e7       	ldi	r24, 0x7F	; 127
    2074:	96 e0       	ldi	r25, 0x06	; 6
    2076:	9f 93       	push	r25
    2078:	8f 93       	push	r24
    207a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	08 95       	ret

00002084 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    2084:	1f 92       	push	r1
    2086:	8f 93       	push	r24
    2088:	89 e7       	ldi	r24, 0x79	; 121
    208a:	96 e0       	ldi	r25, 0x06	; 6
    208c:	9f 93       	push	r25
    208e:	8f 93       	push	r24
    2090:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	08 95       	ret

0000209e <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    209e:	82 e7       	ldi	r24, 0x72	; 114
    20a0:	96 e0       	ldi	r25, 0x06	; 6
    20a2:	9f 93       	push	r25
    20a4:	8f 93       	push	r24
    20a6:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <printf_P>
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	08 95       	ret

000020b0 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    20b0:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <clockTicks>
    20b4:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <clockTicks+0x1>
    20b8:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <clockTicks+0x2>
    20bc:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    20c0:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    20c2:	8c e7       	ldi	r24, 0x7C	; 124
    20c4:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    20ce:	ee e6       	ldi	r30, 0x6E	; 110
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	82 60       	ori	r24, 0x02	; 2
    20d6:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    20d8:	85 b3       	in	r24, 0x15	; 21
    20da:	82 70       	andi	r24, 0x02	; 2
    20dc:	85 bb       	out	0x15, r24	; 21
    20de:	08 95       	ret

000020e0 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    20e0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    20e2:	f8 94       	cli
	returnValue = clockTicks;
    20e4:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <clockTicks>
    20e8:	70 91 6a 02 	lds	r23, 0x026A	; 0x80026a <clockTicks+0x1>
    20ec:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <clockTicks+0x2>
    20f0:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <clockTicks+0x3>
	if(interruptsOn) {
    20f4:	22 23       	and	r18, r18
    20f6:	0c f4       	brge	.+2      	; 0x20fa <get_current_time+0x1a>
		sei();
    20f8:	78 94       	sei
	}
	return returnValue;
}
    20fa:	08 95       	ret

000020fc <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    20fc:	1f 92       	push	r1
    20fe:	0f 92       	push	r0
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	0f 92       	push	r0
    2104:	11 24       	eor	r1, r1
    2106:	2f 93       	push	r18
    2108:	3f 93       	push	r19
    210a:	4f 93       	push	r20
    210c:	5f 93       	push	r21
    210e:	6f 93       	push	r22
    2110:	7f 93       	push	r23
    2112:	8f 93       	push	r24
    2114:	9f 93       	push	r25
    2116:	af 93       	push	r26
    2118:	bf 93       	push	r27
    211a:	ef 93       	push	r30
    211c:	ff 93       	push	r31
	/* Increment our clock tick count if pause status is 0 (i.e. Resumed) */
	if (is_paused() == 0){
    211e:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <is_paused>
    2122:	81 11       	cpse	r24, r1
    2124:	13 c0       	rjmp	.+38     	; 0x214c <__vector_16+0x50>
		clockTicks++;
    2126:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <clockTicks>
    212a:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <clockTicks+0x1>
    212e:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <clockTicks+0x2>
    2132:	b0 91 6c 02 	lds	r27, 0x026C	; 0x80026c <clockTicks+0x3>
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	a1 1d       	adc	r26, r1
    213a:	b1 1d       	adc	r27, r1
    213c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <clockTicks>
    2140:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <clockTicks+0x1>
    2144:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <clockTicks+0x2>
    2148:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <clockTicks+0x3>
	}
}
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	bf 91       	pop	r27
    2152:	af 91       	pop	r26
    2154:	9f 91       	pop	r25
    2156:	8f 91       	pop	r24
    2158:	7f 91       	pop	r23
    215a:	6f 91       	pop	r22
    215c:	5f 91       	pop	r21
    215e:	4f 91       	pop	r20
    2160:	3f 91       	pop	r19
    2162:	2f 91       	pop	r18
    2164:	0f 90       	pop	r0
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	0f 90       	pop	r0
    216a:	1f 90       	pop	r1
    216c:	18 95       	reti

0000216e <__divmodsi4>:
    216e:	05 2e       	mov	r0, r21
    2170:	97 fb       	bst	r25, 7
    2172:	1e f4       	brtc	.+6      	; 0x217a <__divmodsi4+0xc>
    2174:	00 94       	com	r0
    2176:	0e 94 ce 10 	call	0x219c	; 0x219c <__negsi2>
    217a:	57 fd       	sbrc	r21, 7
    217c:	07 d0       	rcall	.+14     	; 0x218c <__divmodsi4_neg2>
    217e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__udivmodsi4>
    2182:	07 fc       	sbrc	r0, 7
    2184:	03 d0       	rcall	.+6      	; 0x218c <__divmodsi4_neg2>
    2186:	4e f4       	brtc	.+18     	; 0x219a <__divmodsi4_exit>
    2188:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__negsi2>

0000218c <__divmodsi4_neg2>:
    218c:	50 95       	com	r21
    218e:	40 95       	com	r20
    2190:	30 95       	com	r19
    2192:	21 95       	neg	r18
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f 4f       	sbci	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255

0000219a <__divmodsi4_exit>:
    219a:	08 95       	ret

0000219c <__negsi2>:
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	08 95       	ret

000021ac <__tablejump2__>:
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	05 90       	lpm	r0, Z+
    21b2:	f4 91       	lpm	r31, Z
    21b4:	e0 2d       	mov	r30, r0
    21b6:	09 94       	ijmp

000021b8 <__udivmodsi4>:
    21b8:	a1 e2       	ldi	r26, 0x21	; 33
    21ba:	1a 2e       	mov	r1, r26
    21bc:	aa 1b       	sub	r26, r26
    21be:	bb 1b       	sub	r27, r27
    21c0:	fd 01       	movw	r30, r26
    21c2:	0d c0       	rjmp	.+26     	; 0x21de <__udivmodsi4_ep>

000021c4 <__udivmodsi4_loop>:
    21c4:	aa 1f       	adc	r26, r26
    21c6:	bb 1f       	adc	r27, r27
    21c8:	ee 1f       	adc	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	a2 17       	cp	r26, r18
    21ce:	b3 07       	cpc	r27, r19
    21d0:	e4 07       	cpc	r30, r20
    21d2:	f5 07       	cpc	r31, r21
    21d4:	20 f0       	brcs	.+8      	; 0x21de <__udivmodsi4_ep>
    21d6:	a2 1b       	sub	r26, r18
    21d8:	b3 0b       	sbc	r27, r19
    21da:	e4 0b       	sbc	r30, r20
    21dc:	f5 0b       	sbc	r31, r21

000021de <__udivmodsi4_ep>:
    21de:	66 1f       	adc	r22, r22
    21e0:	77 1f       	adc	r23, r23
    21e2:	88 1f       	adc	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	1a 94       	dec	r1
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <__udivmodsi4_loop>
    21ea:	60 95       	com	r22
    21ec:	70 95       	com	r23
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	9b 01       	movw	r18, r22
    21f4:	ac 01       	movw	r20, r24
    21f6:	bd 01       	movw	r22, r26
    21f8:	cf 01       	movw	r24, r30
    21fa:	08 95       	ret

000021fc <random_r>:
    21fc:	8f 92       	push	r8
    21fe:	9f 92       	push	r9
    2200:	af 92       	push	r10
    2202:	bf 92       	push	r11
    2204:	cf 92       	push	r12
    2206:	df 92       	push	r13
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	ec 01       	movw	r28, r24
    2212:	68 81       	ld	r22, Y
    2214:	79 81       	ldd	r23, Y+1	; 0x01
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	9b 81       	ldd	r25, Y+3	; 0x03
    221a:	61 15       	cp	r22, r1
    221c:	71 05       	cpc	r23, r1
    221e:	81 05       	cpc	r24, r1
    2220:	91 05       	cpc	r25, r1
    2222:	21 f4       	brne	.+8      	; 0x222c <random_r+0x30>
    2224:	64 e2       	ldi	r22, 0x24	; 36
    2226:	79 ed       	ldi	r23, 0xD9	; 217
    2228:	8b e5       	ldi	r24, 0x5B	; 91
    222a:	97 e0       	ldi	r25, 0x07	; 7
    222c:	2d e1       	ldi	r18, 0x1D	; 29
    222e:	33 ef       	ldi	r19, 0xF3	; 243
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
    2238:	49 01       	movw	r8, r18
    223a:	5a 01       	movw	r10, r20
    223c:	9b 01       	movw	r18, r22
    223e:	ac 01       	movw	r20, r24
    2240:	a7 ea       	ldi	r26, 0xA7	; 167
    2242:	b1 e4       	ldi	r27, 0x41	; 65
    2244:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__muluhisi3>
    2248:	6b 01       	movw	r12, r22
    224a:	7c 01       	movw	r14, r24
    224c:	ac ee       	ldi	r26, 0xEC	; 236
    224e:	b4 ef       	ldi	r27, 0xF4	; 244
    2250:	a5 01       	movw	r20, r10
    2252:	94 01       	movw	r18, r8
    2254:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__mulohisi3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8c 0d       	add	r24, r12
    225e:	9d 1d       	adc	r25, r13
    2260:	ae 1d       	adc	r26, r14
    2262:	bf 1d       	adc	r27, r15
    2264:	b7 ff       	sbrs	r27, 7
    2266:	03 c0       	rjmp	.+6      	; 0x226e <random_r+0x72>
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	a1 09       	sbc	r26, r1
    226c:	b0 48       	sbci	r27, 0x80	; 128
    226e:	88 83       	st	Y, r24
    2270:	99 83       	std	Y+1, r25	; 0x01
    2272:	aa 83       	std	Y+2, r26	; 0x02
    2274:	bb 83       	std	Y+3, r27	; 0x03
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	9f 77       	andi	r25, 0x7F	; 127
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	08 95       	ret

00002292 <random>:
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    22a6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    22aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    22ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    22b2:	61 15       	cp	r22, r1
    22b4:	71 05       	cpc	r23, r1
    22b6:	81 05       	cpc	r24, r1
    22b8:	91 05       	cpc	r25, r1
    22ba:	21 f4       	brne	.+8      	; 0x22c4 <random+0x32>
    22bc:	64 e2       	ldi	r22, 0x24	; 36
    22be:	79 ed       	ldi	r23, 0xD9	; 217
    22c0:	8b e5       	ldi	r24, 0x5B	; 91
    22c2:	97 e0       	ldi	r25, 0x07	; 7
    22c4:	2d e1       	ldi	r18, 0x1D	; 29
    22c6:	33 ef       	ldi	r19, 0xF3	; 243
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
    22d0:	49 01       	movw	r8, r18
    22d2:	5a 01       	movw	r10, r20
    22d4:	9b 01       	movw	r18, r22
    22d6:	ac 01       	movw	r20, r24
    22d8:	a7 ea       	ldi	r26, 0xA7	; 167
    22da:	b1 e4       	ldi	r27, 0x41	; 65
    22dc:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__muluhisi3>
    22e0:	6b 01       	movw	r12, r22
    22e2:	7c 01       	movw	r14, r24
    22e4:	ac ee       	ldi	r26, 0xEC	; 236
    22e6:	b4 ef       	ldi	r27, 0xF4	; 244
    22e8:	a5 01       	movw	r20, r10
    22ea:	94 01       	movw	r18, r8
    22ec:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__mulohisi3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8c 0d       	add	r24, r12
    22f6:	9d 1d       	adc	r25, r13
    22f8:	ae 1d       	adc	r26, r14
    22fa:	bf 1d       	adc	r27, r15
    22fc:	b7 ff       	sbrs	r27, 7
    22fe:	03 c0       	rjmp	.+6      	; 0x2306 <random+0x74>
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	a1 09       	sbc	r26, r1
    2304:	b0 48       	sbci	r27, 0x80	; 128
    2306:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    230a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    230e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2312:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	9f 77       	andi	r25, 0x7F	; 127
    231c:	ff 90       	pop	r15
    231e:	ef 90       	pop	r14
    2320:	df 90       	pop	r13
    2322:	cf 90       	pop	r12
    2324:	bf 90       	pop	r11
    2326:	af 90       	pop	r10
    2328:	9f 90       	pop	r9
    232a:	8f 90       	pop	r8
    232c:	08 95       	ret

0000232e <srandom>:
    232e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    2332:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    2336:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    233a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    233e:	08 95       	ret

00002340 <fgetc>:
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	ec 01       	movw	r28, r24
    2346:	2b 81       	ldd	r18, Y+3	; 0x03
    2348:	20 ff       	sbrs	r18, 0
    234a:	33 c0       	rjmp	.+102    	; 0x23b2 <fgetc+0x72>
    234c:	26 ff       	sbrs	r18, 6
    234e:	0a c0       	rjmp	.+20     	; 0x2364 <fgetc+0x24>
    2350:	2f 7b       	andi	r18, 0xBF	; 191
    2352:	2b 83       	std	Y+3, r18	; 0x03
    2354:	8e 81       	ldd	r24, Y+6	; 0x06
    2356:	9f 81       	ldd	r25, Y+7	; 0x07
    2358:	01 96       	adiw	r24, 0x01	; 1
    235a:	9f 83       	std	Y+7, r25	; 0x07
    235c:	8e 83       	std	Y+6, r24	; 0x06
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	29 c0       	rjmp	.+82     	; 0x23b6 <fgetc+0x76>
    2364:	22 ff       	sbrs	r18, 2
    2366:	0f c0       	rjmp	.+30     	; 0x2386 <fgetc+0x46>
    2368:	e8 81       	ld	r30, Y
    236a:	f9 81       	ldd	r31, Y+1	; 0x01
    236c:	80 81       	ld	r24, Z
    236e:	08 2e       	mov	r0, r24
    2370:	00 0c       	add	r0, r0
    2372:	99 0b       	sbc	r25, r25
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	19 f4       	brne	.+6      	; 0x237e <fgetc+0x3e>
    2378:	20 62       	ori	r18, 0x20	; 32
    237a:	2b 83       	std	Y+3, r18	; 0x03
    237c:	1a c0       	rjmp	.+52     	; 0x23b2 <fgetc+0x72>
    237e:	31 96       	adiw	r30, 0x01	; 1
    2380:	f9 83       	std	Y+1, r31	; 0x01
    2382:	e8 83       	st	Y, r30
    2384:	0e c0       	rjmp	.+28     	; 0x23a2 <fgetc+0x62>
    2386:	ea 85       	ldd	r30, Y+10	; 0x0a
    2388:	fb 85       	ldd	r31, Y+11	; 0x0b
    238a:	09 95       	icall
    238c:	97 ff       	sbrs	r25, 7
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <fgetc+0x62>
    2390:	2b 81       	ldd	r18, Y+3	; 0x03
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	11 f0       	breq	.+4      	; 0x239a <fgetc+0x5a>
    2396:	80 e2       	ldi	r24, 0x20	; 32
    2398:	01 c0       	rjmp	.+2      	; 0x239c <fgetc+0x5c>
    239a:	80 e1       	ldi	r24, 0x10	; 16
    239c:	82 2b       	or	r24, r18
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	08 c0       	rjmp	.+16     	; 0x23b2 <fgetc+0x72>
    23a2:	2e 81       	ldd	r18, Y+6	; 0x06
    23a4:	3f 81       	ldd	r19, Y+7	; 0x07
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	3f 83       	std	Y+7, r19	; 0x07
    23ac:	2e 83       	std	Y+6, r18	; 0x06
    23ae:	99 27       	eor	r25, r25
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <fgetc+0x76>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	9f ef       	ldi	r25, 0xFF	; 255
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	08 95       	ret

000023bc <printf>:
    23bc:	a0 e0       	ldi	r26, 0x00	; 0
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e4 ee       	ldi	r30, 0xE4	; 228
    23c2:	f1 e1       	ldi	r31, 0x11	; 17
    23c4:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x20>
    23c8:	ae 01       	movw	r20, r28
    23ca:	4b 5f       	subi	r20, 0xFB	; 251
    23cc:	5f 4f       	sbci	r21, 0xFF	; 255
    23ce:	fa 01       	movw	r30, r20
    23d0:	61 91       	ld	r22, Z+
    23d2:	71 91       	ld	r23, Z+
    23d4:	af 01       	movw	r20, r30
    23d6:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <__iob+0x2>
    23da:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <__iob+0x3>
    23de:	0e 94 51 12 	call	0x24a2	; 0x24a2 <vfprintf>
    23e2:	e2 e0       	ldi	r30, 0x02	; 2
    23e4:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x20>

000023e8 <printf_P>:
    23e8:	a0 e0       	ldi	r26, 0x00	; 0
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ea ef       	ldi	r30, 0xFA	; 250
    23ee:	f1 e1       	ldi	r31, 0x11	; 17
    23f0:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x1c>
    23f4:	ae 01       	movw	r20, r28
    23f6:	49 5f       	subi	r20, 0xF9	; 249
    23f8:	5f 4f       	sbci	r21, 0xFF	; 255
    23fa:	da 01       	movw	r26, r20
    23fc:	6d 91       	ld	r22, X+
    23fe:	7d 91       	ld	r23, X+
    2400:	ad 01       	movw	r20, r26
    2402:	09 e8       	ldi	r16, 0x89	; 137
    2404:	13 e0       	ldi	r17, 0x03	; 3
    2406:	f8 01       	movw	r30, r16
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	dc 01       	movw	r26, r24
    240e:	13 96       	adiw	r26, 0x03	; 3
    2410:	2c 91       	ld	r18, X
    2412:	13 97       	sbiw	r26, 0x03	; 3
    2414:	28 60       	ori	r18, 0x08	; 8
    2416:	13 96       	adiw	r26, 0x03	; 3
    2418:	2c 93       	st	X, r18
    241a:	0e 94 51 12 	call	0x24a2	; 0x24a2 <vfprintf>
    241e:	d8 01       	movw	r26, r16
    2420:	12 96       	adiw	r26, 0x02	; 2
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	13 97       	sbiw	r26, 0x03	; 3
    2428:	23 81       	ldd	r18, Z+3	; 0x03
    242a:	27 7f       	andi	r18, 0xF7	; 247
    242c:	23 83       	std	Z+3, r18	; 0x03
    242e:	e4 e0       	ldi	r30, 0x04	; 4
    2430:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x1c>

00002434 <putchar>:
    2434:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <__iob+0x2>
    2438:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <__iob+0x3>
    243c:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    2440:	08 95       	ret

00002442 <puts>:
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <__iob+0x2>
    244e:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <__iob+0x3>
    2452:	23 81       	ldd	r18, Z+3	; 0x03
    2454:	21 ff       	sbrs	r18, 1
    2456:	1b c0       	rjmp	.+54     	; 0x248e <puts+0x4c>
    2458:	8c 01       	movw	r16, r24
    245a:	d0 e0       	ldi	r29, 0x00	; 0
    245c:	c0 e0       	ldi	r28, 0x00	; 0
    245e:	f8 01       	movw	r30, r16
    2460:	81 91       	ld	r24, Z+
    2462:	8f 01       	movw	r16, r30
    2464:	60 91 8b 03 	lds	r22, 0x038B	; 0x80038b <__iob+0x2>
    2468:	70 91 8c 03 	lds	r23, 0x038C	; 0x80038c <__iob+0x3>
    246c:	db 01       	movw	r26, r22
    246e:	18 96       	adiw	r26, 0x08	; 8
    2470:	ed 91       	ld	r30, X+
    2472:	fc 91       	ld	r31, X
    2474:	19 97       	sbiw	r26, 0x09	; 9
    2476:	88 23       	and	r24, r24
    2478:	31 f0       	breq	.+12     	; 0x2486 <puts+0x44>
    247a:	09 95       	icall
    247c:	89 2b       	or	r24, r25
    247e:	79 f3       	breq	.-34     	; 0x245e <puts+0x1c>
    2480:	df ef       	ldi	r29, 0xFF	; 255
    2482:	cf ef       	ldi	r28, 0xFF	; 255
    2484:	ec cf       	rjmp	.-40     	; 0x245e <puts+0x1c>
    2486:	8a e0       	ldi	r24, 0x0A	; 10
    2488:	09 95       	icall
    248a:	89 2b       	or	r24, r25
    248c:	19 f0       	breq	.+6      	; 0x2494 <puts+0x52>
    248e:	8f ef       	ldi	r24, 0xFF	; 255
    2490:	9f ef       	ldi	r25, 0xFF	; 255
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <puts+0x56>
    2494:	8d 2f       	mov	r24, r29
    2496:	9c 2f       	mov	r25, r28
    2498:	df 91       	pop	r29
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	08 95       	ret

000024a2 <vfprintf>:
    24a2:	ab e0       	ldi	r26, 0x0B	; 11
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e7 e5       	ldi	r30, 0x57	; 87
    24a8:	f2 e1       	ldi	r31, 0x12	; 18
    24aa:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__>
    24ae:	6c 01       	movw	r12, r24
    24b0:	7b 01       	movw	r14, r22
    24b2:	8a 01       	movw	r16, r20
    24b4:	fc 01       	movw	r30, r24
    24b6:	17 82       	std	Z+7, r1	; 0x07
    24b8:	16 82       	std	Z+6, r1	; 0x06
    24ba:	83 81       	ldd	r24, Z+3	; 0x03
    24bc:	81 ff       	sbrs	r24, 1
    24be:	cc c1       	rjmp	.+920    	; 0x2858 <vfprintf+0x3b6>
    24c0:	ce 01       	movw	r24, r28
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	3c 01       	movw	r6, r24
    24c6:	f6 01       	movw	r30, r12
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	f7 01       	movw	r30, r14
    24cc:	93 fd       	sbrc	r25, 3
    24ce:	85 91       	lpm	r24, Z+
    24d0:	93 ff       	sbrs	r25, 3
    24d2:	81 91       	ld	r24, Z+
    24d4:	7f 01       	movw	r14, r30
    24d6:	88 23       	and	r24, r24
    24d8:	09 f4       	brne	.+2      	; 0x24dc <vfprintf+0x3a>
    24da:	ba c1       	rjmp	.+884    	; 0x2850 <vfprintf+0x3ae>
    24dc:	85 32       	cpi	r24, 0x25	; 37
    24de:	39 f4       	brne	.+14     	; 0x24ee <vfprintf+0x4c>
    24e0:	93 fd       	sbrc	r25, 3
    24e2:	85 91       	lpm	r24, Z+
    24e4:	93 ff       	sbrs	r25, 3
    24e6:	81 91       	ld	r24, Z+
    24e8:	7f 01       	movw	r14, r30
    24ea:	85 32       	cpi	r24, 0x25	; 37
    24ec:	29 f4       	brne	.+10     	; 0x24f8 <vfprintf+0x56>
    24ee:	b6 01       	movw	r22, r12
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    24f6:	e7 cf       	rjmp	.-50     	; 0x24c6 <vfprintf+0x24>
    24f8:	91 2c       	mov	r9, r1
    24fa:	21 2c       	mov	r2, r1
    24fc:	31 2c       	mov	r3, r1
    24fe:	ff e1       	ldi	r31, 0x1F	; 31
    2500:	f3 15       	cp	r31, r3
    2502:	d8 f0       	brcs	.+54     	; 0x253a <vfprintf+0x98>
    2504:	8b 32       	cpi	r24, 0x2B	; 43
    2506:	79 f0       	breq	.+30     	; 0x2526 <vfprintf+0x84>
    2508:	38 f4       	brcc	.+14     	; 0x2518 <vfprintf+0x76>
    250a:	80 32       	cpi	r24, 0x20	; 32
    250c:	79 f0       	breq	.+30     	; 0x252c <vfprintf+0x8a>
    250e:	83 32       	cpi	r24, 0x23	; 35
    2510:	a1 f4       	brne	.+40     	; 0x253a <vfprintf+0x98>
    2512:	23 2d       	mov	r18, r3
    2514:	20 61       	ori	r18, 0x10	; 16
    2516:	1d c0       	rjmp	.+58     	; 0x2552 <vfprintf+0xb0>
    2518:	8d 32       	cpi	r24, 0x2D	; 45
    251a:	61 f0       	breq	.+24     	; 0x2534 <vfprintf+0x92>
    251c:	80 33       	cpi	r24, 0x30	; 48
    251e:	69 f4       	brne	.+26     	; 0x253a <vfprintf+0x98>
    2520:	23 2d       	mov	r18, r3
    2522:	21 60       	ori	r18, 0x01	; 1
    2524:	16 c0       	rjmp	.+44     	; 0x2552 <vfprintf+0xb0>
    2526:	83 2d       	mov	r24, r3
    2528:	82 60       	ori	r24, 0x02	; 2
    252a:	38 2e       	mov	r3, r24
    252c:	e3 2d       	mov	r30, r3
    252e:	e4 60       	ori	r30, 0x04	; 4
    2530:	3e 2e       	mov	r3, r30
    2532:	2a c0       	rjmp	.+84     	; 0x2588 <vfprintf+0xe6>
    2534:	f3 2d       	mov	r31, r3
    2536:	f8 60       	ori	r31, 0x08	; 8
    2538:	1d c0       	rjmp	.+58     	; 0x2574 <vfprintf+0xd2>
    253a:	37 fc       	sbrc	r3, 7
    253c:	2d c0       	rjmp	.+90     	; 0x2598 <vfprintf+0xf6>
    253e:	20 ed       	ldi	r18, 0xD0	; 208
    2540:	28 0f       	add	r18, r24
    2542:	2a 30       	cpi	r18, 0x0A	; 10
    2544:	40 f0       	brcs	.+16     	; 0x2556 <vfprintf+0xb4>
    2546:	8e 32       	cpi	r24, 0x2E	; 46
    2548:	b9 f4       	brne	.+46     	; 0x2578 <vfprintf+0xd6>
    254a:	36 fc       	sbrc	r3, 6
    254c:	81 c1       	rjmp	.+770    	; 0x2850 <vfprintf+0x3ae>
    254e:	23 2d       	mov	r18, r3
    2550:	20 64       	ori	r18, 0x40	; 64
    2552:	32 2e       	mov	r3, r18
    2554:	19 c0       	rjmp	.+50     	; 0x2588 <vfprintf+0xe6>
    2556:	36 fe       	sbrs	r3, 6
    2558:	06 c0       	rjmp	.+12     	; 0x2566 <vfprintf+0xc4>
    255a:	8a e0       	ldi	r24, 0x0A	; 10
    255c:	98 9e       	mul	r9, r24
    255e:	20 0d       	add	r18, r0
    2560:	11 24       	eor	r1, r1
    2562:	92 2e       	mov	r9, r18
    2564:	11 c0       	rjmp	.+34     	; 0x2588 <vfprintf+0xe6>
    2566:	ea e0       	ldi	r30, 0x0A	; 10
    2568:	2e 9e       	mul	r2, r30
    256a:	20 0d       	add	r18, r0
    256c:	11 24       	eor	r1, r1
    256e:	22 2e       	mov	r2, r18
    2570:	f3 2d       	mov	r31, r3
    2572:	f0 62       	ori	r31, 0x20	; 32
    2574:	3f 2e       	mov	r3, r31
    2576:	08 c0       	rjmp	.+16     	; 0x2588 <vfprintf+0xe6>
    2578:	8c 36       	cpi	r24, 0x6C	; 108
    257a:	21 f4       	brne	.+8      	; 0x2584 <vfprintf+0xe2>
    257c:	83 2d       	mov	r24, r3
    257e:	80 68       	ori	r24, 0x80	; 128
    2580:	38 2e       	mov	r3, r24
    2582:	02 c0       	rjmp	.+4      	; 0x2588 <vfprintf+0xe6>
    2584:	88 36       	cpi	r24, 0x68	; 104
    2586:	41 f4       	brne	.+16     	; 0x2598 <vfprintf+0xf6>
    2588:	f7 01       	movw	r30, r14
    258a:	93 fd       	sbrc	r25, 3
    258c:	85 91       	lpm	r24, Z+
    258e:	93 ff       	sbrs	r25, 3
    2590:	81 91       	ld	r24, Z+
    2592:	7f 01       	movw	r14, r30
    2594:	81 11       	cpse	r24, r1
    2596:	b3 cf       	rjmp	.-154    	; 0x24fe <vfprintf+0x5c>
    2598:	98 2f       	mov	r25, r24
    259a:	9f 7d       	andi	r25, 0xDF	; 223
    259c:	95 54       	subi	r25, 0x45	; 69
    259e:	93 30       	cpi	r25, 0x03	; 3
    25a0:	28 f4       	brcc	.+10     	; 0x25ac <vfprintf+0x10a>
    25a2:	0c 5f       	subi	r16, 0xFC	; 252
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	9f e3       	ldi	r25, 0x3F	; 63
    25a8:	99 83       	std	Y+1, r25	; 0x01
    25aa:	0d c0       	rjmp	.+26     	; 0x25c6 <vfprintf+0x124>
    25ac:	83 36       	cpi	r24, 0x63	; 99
    25ae:	31 f0       	breq	.+12     	; 0x25bc <vfprintf+0x11a>
    25b0:	83 37       	cpi	r24, 0x73	; 115
    25b2:	71 f0       	breq	.+28     	; 0x25d0 <vfprintf+0x12e>
    25b4:	83 35       	cpi	r24, 0x53	; 83
    25b6:	09 f0       	breq	.+2      	; 0x25ba <vfprintf+0x118>
    25b8:	59 c0       	rjmp	.+178    	; 0x266c <vfprintf+0x1ca>
    25ba:	21 c0       	rjmp	.+66     	; 0x25fe <vfprintf+0x15c>
    25bc:	f8 01       	movw	r30, r16
    25be:	80 81       	ld	r24, Z
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	0e 5f       	subi	r16, 0xFE	; 254
    25c4:	1f 4f       	sbci	r17, 0xFF	; 255
    25c6:	88 24       	eor	r8, r8
    25c8:	83 94       	inc	r8
    25ca:	91 2c       	mov	r9, r1
    25cc:	53 01       	movw	r10, r6
    25ce:	13 c0       	rjmp	.+38     	; 0x25f6 <vfprintf+0x154>
    25d0:	28 01       	movw	r4, r16
    25d2:	f2 e0       	ldi	r31, 0x02	; 2
    25d4:	4f 0e       	add	r4, r31
    25d6:	51 1c       	adc	r5, r1
    25d8:	f8 01       	movw	r30, r16
    25da:	a0 80       	ld	r10, Z
    25dc:	b1 80       	ldd	r11, Z+1	; 0x01
    25de:	36 fe       	sbrs	r3, 6
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <vfprintf+0x146>
    25e2:	69 2d       	mov	r22, r9
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <vfprintf+0x14a>
    25e8:	6f ef       	ldi	r22, 0xFF	; 255
    25ea:	7f ef       	ldi	r23, 0xFF	; 255
    25ec:	c5 01       	movw	r24, r10
    25ee:	0e 94 3d 14 	call	0x287a	; 0x287a <strnlen>
    25f2:	4c 01       	movw	r8, r24
    25f4:	82 01       	movw	r16, r4
    25f6:	f3 2d       	mov	r31, r3
    25f8:	ff 77       	andi	r31, 0x7F	; 127
    25fa:	3f 2e       	mov	r3, r31
    25fc:	16 c0       	rjmp	.+44     	; 0x262a <vfprintf+0x188>
    25fe:	28 01       	movw	r4, r16
    2600:	22 e0       	ldi	r18, 0x02	; 2
    2602:	42 0e       	add	r4, r18
    2604:	51 1c       	adc	r5, r1
    2606:	f8 01       	movw	r30, r16
    2608:	a0 80       	ld	r10, Z
    260a:	b1 80       	ldd	r11, Z+1	; 0x01
    260c:	36 fe       	sbrs	r3, 6
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <vfprintf+0x174>
    2610:	69 2d       	mov	r22, r9
    2612:	70 e0       	ldi	r23, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <vfprintf+0x178>
    2616:	6f ef       	ldi	r22, 0xFF	; 255
    2618:	7f ef       	ldi	r23, 0xFF	; 255
    261a:	c5 01       	movw	r24, r10
    261c:	0e 94 32 14 	call	0x2864	; 0x2864 <strnlen_P>
    2620:	4c 01       	movw	r8, r24
    2622:	f3 2d       	mov	r31, r3
    2624:	f0 68       	ori	r31, 0x80	; 128
    2626:	3f 2e       	mov	r3, r31
    2628:	82 01       	movw	r16, r4
    262a:	33 fc       	sbrc	r3, 3
    262c:	1b c0       	rjmp	.+54     	; 0x2664 <vfprintf+0x1c2>
    262e:	82 2d       	mov	r24, r2
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	88 16       	cp	r8, r24
    2634:	99 06       	cpc	r9, r25
    2636:	b0 f4       	brcc	.+44     	; 0x2664 <vfprintf+0x1c2>
    2638:	b6 01       	movw	r22, r12
    263a:	80 e2       	ldi	r24, 0x20	; 32
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    2642:	2a 94       	dec	r2
    2644:	f4 cf       	rjmp	.-24     	; 0x262e <vfprintf+0x18c>
    2646:	f5 01       	movw	r30, r10
    2648:	37 fc       	sbrc	r3, 7
    264a:	85 91       	lpm	r24, Z+
    264c:	37 fe       	sbrs	r3, 7
    264e:	81 91       	ld	r24, Z+
    2650:	5f 01       	movw	r10, r30
    2652:	b6 01       	movw	r22, r12
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    265a:	21 10       	cpse	r2, r1
    265c:	2a 94       	dec	r2
    265e:	21 e0       	ldi	r18, 0x01	; 1
    2660:	82 1a       	sub	r8, r18
    2662:	91 08       	sbc	r9, r1
    2664:	81 14       	cp	r8, r1
    2666:	91 04       	cpc	r9, r1
    2668:	71 f7       	brne	.-36     	; 0x2646 <vfprintf+0x1a4>
    266a:	e8 c0       	rjmp	.+464    	; 0x283c <vfprintf+0x39a>
    266c:	84 36       	cpi	r24, 0x64	; 100
    266e:	11 f0       	breq	.+4      	; 0x2674 <vfprintf+0x1d2>
    2670:	89 36       	cpi	r24, 0x69	; 105
    2672:	41 f5       	brne	.+80     	; 0x26c4 <vfprintf+0x222>
    2674:	f8 01       	movw	r30, r16
    2676:	37 fe       	sbrs	r3, 7
    2678:	07 c0       	rjmp	.+14     	; 0x2688 <vfprintf+0x1e6>
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	0c 5f       	subi	r16, 0xFC	; 252
    2684:	1f 4f       	sbci	r17, 0xFF	; 255
    2686:	08 c0       	rjmp	.+16     	; 0x2698 <vfprintf+0x1f6>
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	07 2e       	mov	r0, r23
    268e:	00 0c       	add	r0, r0
    2690:	88 0b       	sbc	r24, r24
    2692:	99 0b       	sbc	r25, r25
    2694:	0e 5f       	subi	r16, 0xFE	; 254
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	f3 2d       	mov	r31, r3
    269a:	ff 76       	andi	r31, 0x6F	; 111
    269c:	3f 2e       	mov	r3, r31
    269e:	97 ff       	sbrs	r25, 7
    26a0:	09 c0       	rjmp	.+18     	; 0x26b4 <vfprintf+0x212>
    26a2:	90 95       	com	r25
    26a4:	80 95       	com	r24
    26a6:	70 95       	com	r23
    26a8:	61 95       	neg	r22
    26aa:	7f 4f       	sbci	r23, 0xFF	; 255
    26ac:	8f 4f       	sbci	r24, 0xFF	; 255
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	f0 68       	ori	r31, 0x80	; 128
    26b2:	3f 2e       	mov	r3, r31
    26b4:	2a e0       	ldi	r18, 0x0A	; 10
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	a3 01       	movw	r20, r6
    26ba:	0e 94 84 14 	call	0x2908	; 0x2908 <__ultoa_invert>
    26be:	88 2e       	mov	r8, r24
    26c0:	86 18       	sub	r8, r6
    26c2:	45 c0       	rjmp	.+138    	; 0x274e <vfprintf+0x2ac>
    26c4:	85 37       	cpi	r24, 0x75	; 117
    26c6:	31 f4       	brne	.+12     	; 0x26d4 <vfprintf+0x232>
    26c8:	23 2d       	mov	r18, r3
    26ca:	2f 7e       	andi	r18, 0xEF	; 239
    26cc:	b2 2e       	mov	r11, r18
    26ce:	2a e0       	ldi	r18, 0x0A	; 10
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	25 c0       	rjmp	.+74     	; 0x271e <vfprintf+0x27c>
    26d4:	93 2d       	mov	r25, r3
    26d6:	99 7f       	andi	r25, 0xF9	; 249
    26d8:	b9 2e       	mov	r11, r25
    26da:	8f 36       	cpi	r24, 0x6F	; 111
    26dc:	c1 f0       	breq	.+48     	; 0x270e <vfprintf+0x26c>
    26de:	18 f4       	brcc	.+6      	; 0x26e6 <vfprintf+0x244>
    26e0:	88 35       	cpi	r24, 0x58	; 88
    26e2:	79 f0       	breq	.+30     	; 0x2702 <vfprintf+0x260>
    26e4:	b5 c0       	rjmp	.+362    	; 0x2850 <vfprintf+0x3ae>
    26e6:	80 37       	cpi	r24, 0x70	; 112
    26e8:	19 f0       	breq	.+6      	; 0x26f0 <vfprintf+0x24e>
    26ea:	88 37       	cpi	r24, 0x78	; 120
    26ec:	21 f0       	breq	.+8      	; 0x26f6 <vfprintf+0x254>
    26ee:	b0 c0       	rjmp	.+352    	; 0x2850 <vfprintf+0x3ae>
    26f0:	e9 2f       	mov	r30, r25
    26f2:	e0 61       	ori	r30, 0x10	; 16
    26f4:	be 2e       	mov	r11, r30
    26f6:	b4 fe       	sbrs	r11, 4
    26f8:	0d c0       	rjmp	.+26     	; 0x2714 <vfprintf+0x272>
    26fa:	fb 2d       	mov	r31, r11
    26fc:	f4 60       	ori	r31, 0x04	; 4
    26fe:	bf 2e       	mov	r11, r31
    2700:	09 c0       	rjmp	.+18     	; 0x2714 <vfprintf+0x272>
    2702:	34 fe       	sbrs	r3, 4
    2704:	0a c0       	rjmp	.+20     	; 0x271a <vfprintf+0x278>
    2706:	29 2f       	mov	r18, r25
    2708:	26 60       	ori	r18, 0x06	; 6
    270a:	b2 2e       	mov	r11, r18
    270c:	06 c0       	rjmp	.+12     	; 0x271a <vfprintf+0x278>
    270e:	28 e0       	ldi	r18, 0x08	; 8
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	05 c0       	rjmp	.+10     	; 0x271e <vfprintf+0x27c>
    2714:	20 e1       	ldi	r18, 0x10	; 16
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	02 c0       	rjmp	.+4      	; 0x271e <vfprintf+0x27c>
    271a:	20 e1       	ldi	r18, 0x10	; 16
    271c:	32 e0       	ldi	r19, 0x02	; 2
    271e:	f8 01       	movw	r30, r16
    2720:	b7 fe       	sbrs	r11, 7
    2722:	07 c0       	rjmp	.+14     	; 0x2732 <vfprintf+0x290>
    2724:	60 81       	ld	r22, Z
    2726:	71 81       	ldd	r23, Z+1	; 0x01
    2728:	82 81       	ldd	r24, Z+2	; 0x02
    272a:	93 81       	ldd	r25, Z+3	; 0x03
    272c:	0c 5f       	subi	r16, 0xFC	; 252
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	06 c0       	rjmp	.+12     	; 0x273e <vfprintf+0x29c>
    2732:	60 81       	ld	r22, Z
    2734:	71 81       	ldd	r23, Z+1	; 0x01
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	0e 5f       	subi	r16, 0xFE	; 254
    273c:	1f 4f       	sbci	r17, 0xFF	; 255
    273e:	a3 01       	movw	r20, r6
    2740:	0e 94 84 14 	call	0x2908	; 0x2908 <__ultoa_invert>
    2744:	88 2e       	mov	r8, r24
    2746:	86 18       	sub	r8, r6
    2748:	fb 2d       	mov	r31, r11
    274a:	ff 77       	andi	r31, 0x7F	; 127
    274c:	3f 2e       	mov	r3, r31
    274e:	36 fe       	sbrs	r3, 6
    2750:	0d c0       	rjmp	.+26     	; 0x276c <vfprintf+0x2ca>
    2752:	23 2d       	mov	r18, r3
    2754:	2e 7f       	andi	r18, 0xFE	; 254
    2756:	a2 2e       	mov	r10, r18
    2758:	89 14       	cp	r8, r9
    275a:	58 f4       	brcc	.+22     	; 0x2772 <vfprintf+0x2d0>
    275c:	34 fe       	sbrs	r3, 4
    275e:	0b c0       	rjmp	.+22     	; 0x2776 <vfprintf+0x2d4>
    2760:	32 fc       	sbrc	r3, 2
    2762:	09 c0       	rjmp	.+18     	; 0x2776 <vfprintf+0x2d4>
    2764:	83 2d       	mov	r24, r3
    2766:	8e 7e       	andi	r24, 0xEE	; 238
    2768:	a8 2e       	mov	r10, r24
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <vfprintf+0x2d4>
    276c:	b8 2c       	mov	r11, r8
    276e:	a3 2c       	mov	r10, r3
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <vfprintf+0x2d6>
    2772:	b8 2c       	mov	r11, r8
    2774:	01 c0       	rjmp	.+2      	; 0x2778 <vfprintf+0x2d6>
    2776:	b9 2c       	mov	r11, r9
    2778:	a4 fe       	sbrs	r10, 4
    277a:	0f c0       	rjmp	.+30     	; 0x279a <vfprintf+0x2f8>
    277c:	fe 01       	movw	r30, r28
    277e:	e8 0d       	add	r30, r8
    2780:	f1 1d       	adc	r31, r1
    2782:	80 81       	ld	r24, Z
    2784:	80 33       	cpi	r24, 0x30	; 48
    2786:	21 f4       	brne	.+8      	; 0x2790 <vfprintf+0x2ee>
    2788:	9a 2d       	mov	r25, r10
    278a:	99 7e       	andi	r25, 0xE9	; 233
    278c:	a9 2e       	mov	r10, r25
    278e:	09 c0       	rjmp	.+18     	; 0x27a2 <vfprintf+0x300>
    2790:	a2 fe       	sbrs	r10, 2
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <vfprintf+0x2fe>
    2794:	b3 94       	inc	r11
    2796:	b3 94       	inc	r11
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <vfprintf+0x300>
    279a:	8a 2d       	mov	r24, r10
    279c:	86 78       	andi	r24, 0x86	; 134
    279e:	09 f0       	breq	.+2      	; 0x27a2 <vfprintf+0x300>
    27a0:	b3 94       	inc	r11
    27a2:	a3 fc       	sbrc	r10, 3
    27a4:	11 c0       	rjmp	.+34     	; 0x27c8 <vfprintf+0x326>
    27a6:	a0 fe       	sbrs	r10, 0
    27a8:	06 c0       	rjmp	.+12     	; 0x27b6 <vfprintf+0x314>
    27aa:	b2 14       	cp	r11, r2
    27ac:	88 f4       	brcc	.+34     	; 0x27d0 <vfprintf+0x32e>
    27ae:	28 0c       	add	r2, r8
    27b0:	92 2c       	mov	r9, r2
    27b2:	9b 18       	sub	r9, r11
    27b4:	0e c0       	rjmp	.+28     	; 0x27d2 <vfprintf+0x330>
    27b6:	b2 14       	cp	r11, r2
    27b8:	60 f4       	brcc	.+24     	; 0x27d2 <vfprintf+0x330>
    27ba:	b6 01       	movw	r22, r12
    27bc:	80 e2       	ldi	r24, 0x20	; 32
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    27c4:	b3 94       	inc	r11
    27c6:	f7 cf       	rjmp	.-18     	; 0x27b6 <vfprintf+0x314>
    27c8:	b2 14       	cp	r11, r2
    27ca:	18 f4       	brcc	.+6      	; 0x27d2 <vfprintf+0x330>
    27cc:	2b 18       	sub	r2, r11
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <vfprintf+0x332>
    27d0:	98 2c       	mov	r9, r8
    27d2:	21 2c       	mov	r2, r1
    27d4:	a4 fe       	sbrs	r10, 4
    27d6:	10 c0       	rjmp	.+32     	; 0x27f8 <vfprintf+0x356>
    27d8:	b6 01       	movw	r22, r12
    27da:	80 e3       	ldi	r24, 0x30	; 48
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    27e2:	a2 fe       	sbrs	r10, 2
    27e4:	17 c0       	rjmp	.+46     	; 0x2814 <vfprintf+0x372>
    27e6:	a1 fc       	sbrc	r10, 1
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <vfprintf+0x34e>
    27ea:	88 e7       	ldi	r24, 0x78	; 120
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <vfprintf+0x352>
    27f0:	88 e5       	ldi	r24, 0x58	; 88
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	b6 01       	movw	r22, r12
    27f6:	0c c0       	rjmp	.+24     	; 0x2810 <vfprintf+0x36e>
    27f8:	8a 2d       	mov	r24, r10
    27fa:	86 78       	andi	r24, 0x86	; 134
    27fc:	59 f0       	breq	.+22     	; 0x2814 <vfprintf+0x372>
    27fe:	a1 fe       	sbrs	r10, 1
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <vfprintf+0x364>
    2802:	8b e2       	ldi	r24, 0x2B	; 43
    2804:	01 c0       	rjmp	.+2      	; 0x2808 <vfprintf+0x366>
    2806:	80 e2       	ldi	r24, 0x20	; 32
    2808:	a7 fc       	sbrc	r10, 7
    280a:	8d e2       	ldi	r24, 0x2D	; 45
    280c:	b6 01       	movw	r22, r12
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    2814:	89 14       	cp	r8, r9
    2816:	38 f4       	brcc	.+14     	; 0x2826 <vfprintf+0x384>
    2818:	b6 01       	movw	r22, r12
    281a:	80 e3       	ldi	r24, 0x30	; 48
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    2822:	9a 94       	dec	r9
    2824:	f7 cf       	rjmp	.-18     	; 0x2814 <vfprintf+0x372>
    2826:	8a 94       	dec	r8
    2828:	f3 01       	movw	r30, r6
    282a:	e8 0d       	add	r30, r8
    282c:	f1 1d       	adc	r31, r1
    282e:	80 81       	ld	r24, Z
    2830:	b6 01       	movw	r22, r12
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    2838:	81 10       	cpse	r8, r1
    283a:	f5 cf       	rjmp	.-22     	; 0x2826 <vfprintf+0x384>
    283c:	22 20       	and	r2, r2
    283e:	09 f4       	brne	.+2      	; 0x2842 <vfprintf+0x3a0>
    2840:	42 ce       	rjmp	.-892    	; 0x24c6 <vfprintf+0x24>
    2842:	b6 01       	movw	r22, r12
    2844:	80 e2       	ldi	r24, 0x20	; 32
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 48 14 	call	0x2890	; 0x2890 <fputc>
    284c:	2a 94       	dec	r2
    284e:	f6 cf       	rjmp	.-20     	; 0x283c <vfprintf+0x39a>
    2850:	f6 01       	movw	r30, r12
    2852:	86 81       	ldd	r24, Z+6	; 0x06
    2854:	97 81       	ldd	r25, Z+7	; 0x07
    2856:	02 c0       	rjmp	.+4      	; 0x285c <vfprintf+0x3ba>
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	9f ef       	ldi	r25, 0xFF	; 255
    285c:	2b 96       	adiw	r28, 0x0b	; 11
    285e:	e2 e1       	ldi	r30, 0x12	; 18
    2860:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__>

00002864 <strnlen_P>:
    2864:	fc 01       	movw	r30, r24
    2866:	05 90       	lpm	r0, Z+
    2868:	61 50       	subi	r22, 0x01	; 1
    286a:	70 40       	sbci	r23, 0x00	; 0
    286c:	01 10       	cpse	r0, r1
    286e:	d8 f7       	brcc	.-10     	; 0x2866 <strnlen_P+0x2>
    2870:	80 95       	com	r24
    2872:	90 95       	com	r25
    2874:	8e 0f       	add	r24, r30
    2876:	9f 1f       	adc	r25, r31
    2878:	08 95       	ret

0000287a <strnlen>:
    287a:	fc 01       	movw	r30, r24
    287c:	61 50       	subi	r22, 0x01	; 1
    287e:	70 40       	sbci	r23, 0x00	; 0
    2880:	01 90       	ld	r0, Z+
    2882:	01 10       	cpse	r0, r1
    2884:	d8 f7       	brcc	.-10     	; 0x287c <strnlen+0x2>
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	8e 0f       	add	r24, r30
    288c:	9f 1f       	adc	r25, r31
    288e:	08 95       	ret

00002890 <fputc>:
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	fb 01       	movw	r30, r22
    289a:	23 81       	ldd	r18, Z+3	; 0x03
    289c:	21 fd       	sbrc	r18, 1
    289e:	03 c0       	rjmp	.+6      	; 0x28a6 <fputc+0x16>
    28a0:	8f ef       	ldi	r24, 0xFF	; 255
    28a2:	9f ef       	ldi	r25, 0xFF	; 255
    28a4:	2c c0       	rjmp	.+88     	; 0x28fe <fputc+0x6e>
    28a6:	22 ff       	sbrs	r18, 2
    28a8:	16 c0       	rjmp	.+44     	; 0x28d6 <fputc+0x46>
    28aa:	46 81       	ldd	r20, Z+6	; 0x06
    28ac:	57 81       	ldd	r21, Z+7	; 0x07
    28ae:	24 81       	ldd	r18, Z+4	; 0x04
    28b0:	35 81       	ldd	r19, Z+5	; 0x05
    28b2:	42 17       	cp	r20, r18
    28b4:	53 07       	cpc	r21, r19
    28b6:	44 f4       	brge	.+16     	; 0x28c8 <fputc+0x38>
    28b8:	a0 81       	ld	r26, Z
    28ba:	b1 81       	ldd	r27, Z+1	; 0x01
    28bc:	9d 01       	movw	r18, r26
    28be:	2f 5f       	subi	r18, 0xFF	; 255
    28c0:	3f 4f       	sbci	r19, 0xFF	; 255
    28c2:	31 83       	std	Z+1, r19	; 0x01
    28c4:	20 83       	st	Z, r18
    28c6:	8c 93       	st	X, r24
    28c8:	26 81       	ldd	r18, Z+6	; 0x06
    28ca:	37 81       	ldd	r19, Z+7	; 0x07
    28cc:	2f 5f       	subi	r18, 0xFF	; 255
    28ce:	3f 4f       	sbci	r19, 0xFF	; 255
    28d0:	37 83       	std	Z+7, r19	; 0x07
    28d2:	26 83       	std	Z+6, r18	; 0x06
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <fputc+0x6e>
    28d6:	8b 01       	movw	r16, r22
    28d8:	ec 01       	movw	r28, r24
    28da:	fb 01       	movw	r30, r22
    28dc:	00 84       	ldd	r0, Z+8	; 0x08
    28de:	f1 85       	ldd	r31, Z+9	; 0x09
    28e0:	e0 2d       	mov	r30, r0
    28e2:	09 95       	icall
    28e4:	89 2b       	or	r24, r25
    28e6:	e1 f6       	brne	.-72     	; 0x28a0 <fputc+0x10>
    28e8:	d8 01       	movw	r26, r16
    28ea:	16 96       	adiw	r26, 0x06	; 6
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	17 97       	sbiw	r26, 0x07	; 7
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	17 96       	adiw	r26, 0x07	; 7
    28f6:	9c 93       	st	X, r25
    28f8:	8e 93       	st	-X, r24
    28fa:	16 97       	sbiw	r26, 0x06	; 6
    28fc:	ce 01       	movw	r24, r28
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <__ultoa_invert>:
    2908:	fa 01       	movw	r30, r20
    290a:	aa 27       	eor	r26, r26
    290c:	28 30       	cpi	r18, 0x08	; 8
    290e:	51 f1       	breq	.+84     	; 0x2964 <__ultoa_invert+0x5c>
    2910:	20 31       	cpi	r18, 0x10	; 16
    2912:	81 f1       	breq	.+96     	; 0x2974 <__ultoa_invert+0x6c>
    2914:	e8 94       	clt
    2916:	6f 93       	push	r22
    2918:	6e 7f       	andi	r22, 0xFE	; 254
    291a:	6e 5f       	subi	r22, 0xFE	; 254
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
    291e:	8f 4f       	sbci	r24, 0xFF	; 255
    2920:	9f 4f       	sbci	r25, 0xFF	; 255
    2922:	af 4f       	sbci	r26, 0xFF	; 255
    2924:	b1 e0       	ldi	r27, 0x01	; 1
    2926:	3e d0       	rcall	.+124    	; 0x29a4 <__ultoa_invert+0x9c>
    2928:	b4 e0       	ldi	r27, 0x04	; 4
    292a:	3c d0       	rcall	.+120    	; 0x29a4 <__ultoa_invert+0x9c>
    292c:	67 0f       	add	r22, r23
    292e:	78 1f       	adc	r23, r24
    2930:	89 1f       	adc	r24, r25
    2932:	9a 1f       	adc	r25, r26
    2934:	a1 1d       	adc	r26, r1
    2936:	68 0f       	add	r22, r24
    2938:	79 1f       	adc	r23, r25
    293a:	8a 1f       	adc	r24, r26
    293c:	91 1d       	adc	r25, r1
    293e:	a1 1d       	adc	r26, r1
    2940:	6a 0f       	add	r22, r26
    2942:	71 1d       	adc	r23, r1
    2944:	81 1d       	adc	r24, r1
    2946:	91 1d       	adc	r25, r1
    2948:	a1 1d       	adc	r26, r1
    294a:	20 d0       	rcall	.+64     	; 0x298c <__ultoa_invert+0x84>
    294c:	09 f4       	brne	.+2      	; 0x2950 <__ultoa_invert+0x48>
    294e:	68 94       	set
    2950:	3f 91       	pop	r19
    2952:	2a e0       	ldi	r18, 0x0A	; 10
    2954:	26 9f       	mul	r18, r22
    2956:	11 24       	eor	r1, r1
    2958:	30 19       	sub	r19, r0
    295a:	30 5d       	subi	r19, 0xD0	; 208
    295c:	31 93       	st	Z+, r19
    295e:	de f6       	brtc	.-74     	; 0x2916 <__ultoa_invert+0xe>
    2960:	cf 01       	movw	r24, r30
    2962:	08 95       	ret
    2964:	46 2f       	mov	r20, r22
    2966:	47 70       	andi	r20, 0x07	; 7
    2968:	40 5d       	subi	r20, 0xD0	; 208
    296a:	41 93       	st	Z+, r20
    296c:	b3 e0       	ldi	r27, 0x03	; 3
    296e:	0f d0       	rcall	.+30     	; 0x298e <__ultoa_invert+0x86>
    2970:	c9 f7       	brne	.-14     	; 0x2964 <__ultoa_invert+0x5c>
    2972:	f6 cf       	rjmp	.-20     	; 0x2960 <__ultoa_invert+0x58>
    2974:	46 2f       	mov	r20, r22
    2976:	4f 70       	andi	r20, 0x0F	; 15
    2978:	40 5d       	subi	r20, 0xD0	; 208
    297a:	4a 33       	cpi	r20, 0x3A	; 58
    297c:	18 f0       	brcs	.+6      	; 0x2984 <__ultoa_invert+0x7c>
    297e:	49 5d       	subi	r20, 0xD9	; 217
    2980:	31 fd       	sbrc	r19, 1
    2982:	40 52       	subi	r20, 0x20	; 32
    2984:	41 93       	st	Z+, r20
    2986:	02 d0       	rcall	.+4      	; 0x298c <__ultoa_invert+0x84>
    2988:	a9 f7       	brne	.-22     	; 0x2974 <__ultoa_invert+0x6c>
    298a:	ea cf       	rjmp	.-44     	; 0x2960 <__ultoa_invert+0x58>
    298c:	b4 e0       	ldi	r27, 0x04	; 4
    298e:	a6 95       	lsr	r26
    2990:	97 95       	ror	r25
    2992:	87 95       	ror	r24
    2994:	77 95       	ror	r23
    2996:	67 95       	ror	r22
    2998:	ba 95       	dec	r27
    299a:	c9 f7       	brne	.-14     	; 0x298e <__ultoa_invert+0x86>
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	61 05       	cpc	r22, r1
    29a0:	71 05       	cpc	r23, r1
    29a2:	08 95       	ret
    29a4:	9b 01       	movw	r18, r22
    29a6:	ac 01       	movw	r20, r24
    29a8:	0a 2e       	mov	r0, r26
    29aa:	06 94       	lsr	r0
    29ac:	57 95       	ror	r21
    29ae:	47 95       	ror	r20
    29b0:	37 95       	ror	r19
    29b2:	27 95       	ror	r18
    29b4:	ba 95       	dec	r27
    29b6:	c9 f7       	brne	.-14     	; 0x29aa <__ultoa_invert+0xa2>
    29b8:	62 0f       	add	r22, r18
    29ba:	73 1f       	adc	r23, r19
    29bc:	84 1f       	adc	r24, r20
    29be:	95 1f       	adc	r25, r21
    29c0:	a0 1d       	adc	r26, r0
    29c2:	08 95       	ret

000029c4 <__muluhisi3>:
    29c4:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__umulhisi3>
    29c8:	a5 9f       	mul	r26, r21
    29ca:	90 0d       	add	r25, r0
    29cc:	b4 9f       	mul	r27, r20
    29ce:	90 0d       	add	r25, r0
    29d0:	a4 9f       	mul	r26, r20
    29d2:	80 0d       	add	r24, r0
    29d4:	91 1d       	adc	r25, r1
    29d6:	11 24       	eor	r1, r1
    29d8:	08 95       	ret

000029da <__mulshisi3>:
    29da:	b7 ff       	sbrs	r27, 7
    29dc:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__muluhisi3>

000029e0 <__mulohisi3>:
    29e0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <__muluhisi3>
    29e4:	82 1b       	sub	r24, r18
    29e6:	93 0b       	sbc	r25, r19
    29e8:	08 95       	ret

000029ea <__prologue_saves__>:
    29ea:	2f 92       	push	r2
    29ec:	3f 92       	push	r3
    29ee:	4f 92       	push	r4
    29f0:	5f 92       	push	r5
    29f2:	6f 92       	push	r6
    29f4:	7f 92       	push	r7
    29f6:	8f 92       	push	r8
    29f8:	9f 92       	push	r9
    29fa:	af 92       	push	r10
    29fc:	bf 92       	push	r11
    29fe:	cf 92       	push	r12
    2a00:	df 92       	push	r13
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	0f 93       	push	r16
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	ca 1b       	sub	r28, r26
    2a14:	db 0b       	sbc	r29, r27
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	09 94       	ijmp

00002a22 <__epilogue_restores__>:
    2a22:	2a 88       	ldd	r2, Y+18	; 0x12
    2a24:	39 88       	ldd	r3, Y+17	; 0x11
    2a26:	48 88       	ldd	r4, Y+16	; 0x10
    2a28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a34:	b9 84       	ldd	r11, Y+9	; 0x09
    2a36:	c8 84       	ldd	r12, Y+8	; 0x08
    2a38:	df 80       	ldd	r13, Y+7	; 0x07
    2a3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a40:	1b 81       	ldd	r17, Y+3	; 0x03
    2a42:	aa 81       	ldd	r26, Y+2	; 0x02
    2a44:	b9 81       	ldd	r27, Y+1	; 0x01
    2a46:	ce 0f       	add	r28, r30
    2a48:	d1 1d       	adc	r29, r1
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	ed 01       	movw	r28, r26
    2a56:	08 95       	ret

00002a58 <__umulhisi3>:
    2a58:	a2 9f       	mul	r26, r18
    2a5a:	b0 01       	movw	r22, r0
    2a5c:	b3 9f       	mul	r27, r19
    2a5e:	c0 01       	movw	r24, r0
    2a60:	a3 9f       	mul	r26, r19
    2a62:	70 0d       	add	r23, r0
    2a64:	81 1d       	adc	r24, r1
    2a66:	11 24       	eor	r1, r1
    2a68:	91 1d       	adc	r25, r1
    2a6a:	b2 9f       	mul	r27, r18
    2a6c:	70 0d       	add	r23, r0
    2a6e:	81 1d       	adc	r24, r1
    2a70:	11 24       	eor	r1, r1
    2a72:	91 1d       	adc	r25, r1
    2a74:	08 95       	ret

00002a76 <_exit>:
    2a76:	f8 94       	cli

00002a78 <__stop_program>:
    2a78:	ff cf       	rjmp	.-2      	; 0x2a78 <__stop_program>
