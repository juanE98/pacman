
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00002c9e  00002d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000249  008001c2  008001c2  00002df4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c5c  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000159f  00000000  00000000  00006e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021dc  00000000  00000000  00008423  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b90  00000000  00000000  0000a600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001120  00000000  00000000  0000b190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003085  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0000f335  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 03 	jmp	0x692	; 0x692 <__ctors_end>
       4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      10:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_5>
      18:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      20:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      28:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      30:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      3c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      40:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_16>
      44:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      50:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__vector_20>
      54:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_21>
      58:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      5c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      60:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      68:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      6c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      70:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      74:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      78:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      7c:	64 06       	cpc	r6, r20
      7e:	73 06       	cpc	r7, r19
      80:	73 06       	cpc	r7, r19
      82:	73 06       	cpc	r7, r19
      84:	73 06       	cpc	r7, r19
      86:	73 06       	cpc	r7, r19
      88:	73 06       	cpc	r7, r19
      8a:	73 06       	cpc	r7, r19
      8c:	73 06       	cpc	r7, r19
      8e:	73 06       	cpc	r7, r19
      90:	73 06       	cpc	r7, r19
      92:	59 06       	cpc	r5, r25
      94:	73 06       	cpc	r7, r19
      96:	e1 05       	cpc	r30, r1
      98:	6e 06       	cpc	r6, r30
      9a:	73 06       	cpc	r7, r19
      9c:	73 06       	cpc	r7, r19
      9e:	73 06       	cpc	r7, r19
      a0:	73 06       	cpc	r7, r19
      a2:	73 06       	cpc	r7, r19
      a4:	73 06       	cpc	r7, r19
      a6:	73 06       	cpc	r7, r19
      a8:	73 06       	cpc	r7, r19
      aa:	02 06       	cpc	r0, r18
      ac:	73 06       	cpc	r7, r19
      ae:	73 06       	cpc	r7, r19
      b0:	73 06       	cpc	r7, r19
      b2:	73 06       	cpc	r7, r19
      b4:	32 06       	cpc	r3, r18
      b6:	73 06       	cpc	r7, r19
      b8:	25 06       	cpc	r2, r21
      ba:	73 06       	cpc	r7, r19
      bc:	73 06       	cpc	r7, r19
      be:	73 06       	cpc	r7, r19
      c0:	73 06       	cpc	r7, r19
      c2:	73 06       	cpc	r7, r19
      c4:	73 06       	cpc	r7, r19
      c6:	73 06       	cpc	r7, r19
      c8:	f7 05       	cpc	r31, r7
      ca:	73 06       	cpc	r7, r19
      cc:	73 06       	cpc	r7, r19
      ce:	73 06       	cpc	r7, r19
      d0:	18 06       	cpc	r1, r24
      d2:	73 06       	cpc	r7, r19
      d4:	0d 06       	cpc	r0, r29
      d6:	73 06       	cpc	r7, r19
      d8:	73 06       	cpc	r7, r19
      da:	73 06       	cpc	r7, r19
      dc:	69 06       	cpc	r6, r25
      de:	73 06       	cpc	r7, r19
      e0:	73 06       	cpc	r7, r19
      e2:	73 06       	cpc	r7, r19
      e4:	73 06       	cpc	r7, r19
      e6:	73 06       	cpc	r7, r19
      e8:	73 06       	cpc	r7, r19
      ea:	73 06       	cpc	r7, r19
      ec:	73 06       	cpc	r7, r19
      ee:	73 06       	cpc	r7, r19
      f0:	73 06       	cpc	r7, r19
      f2:	73 06       	cpc	r7, r19
      f4:	73 06       	cpc	r7, r19
      f6:	73 06       	cpc	r7, r19
      f8:	3f 06       	cpc	r3, r31
      fa:	73 06       	cpc	r7, r19
      fc:	73 06       	cpc	r7, r19
      fe:	73 06       	cpc	r7, r19
     100:	73 06       	cpc	r7, r19
     102:	73 06       	cpc	r7, r19
     104:	73 06       	cpc	r7, r19
     106:	73 06       	cpc	r7, r19
     108:	73 06       	cpc	r7, r19
     10a:	73 06       	cpc	r7, r19
     10c:	73 06       	cpc	r7, r19
     10e:	73 06       	cpc	r7, r19
     110:	73 06       	cpc	r7, r19
     112:	73 06       	cpc	r7, r19
     114:	73 06       	cpc	r7, r19
     116:	73 06       	cpc	r7, r19
     118:	73 06       	cpc	r7, r19
     11a:	73 06       	cpc	r7, r19
     11c:	73 06       	cpc	r7, r19
     11e:	73 06       	cpc	r7, r19
     120:	73 06       	cpc	r7, r19
     122:	73 06       	cpc	r7, r19
     124:	73 06       	cpc	r7, r19
     126:	73 06       	cpc	r7, r19
     128:	4c 06       	cpc	r4, r28
     12a:	73 06       	cpc	r7, r19
     12c:	73 06       	cpc	r7, r19
     12e:	73 06       	cpc	r7, r19
     130:	73 06       	cpc	r7, r19
     132:	73 06       	cpc	r7, r19
     134:	ec 05       	cpc	r30, r12

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2326>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2324>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2316>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2314>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2283>:
     550:	53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a 20     Student Number: 
     560:	34 34 33 31 37 39 36 32 00                          44317962.

00000569 <__c.2281>:
     569:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
     579:	20 62 79 20 3c 4a 75 61 6e 20 45 73 70 61 72 65      by <Juan Espare
     589:	73 3e 00                                            s>.

0000058c <__c.2279>:
     58c:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000594 <numbers>:
     594:	ff 05 fc 05 f8 05 f4 05 f0 05 ec 05 e8 05 e4 05     ................
     5a4:	e0 05 dc 05                                         ....

000005a8 <letters>:
     5a8:	6e 06 6a 06 66 06 62 06 5e 06 5a 06 56 06 52 06     n.j.f.b.^.Z.V.R.
     5b8:	4f 06 4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06     O.K.G.C.>.:.6.2.
     5c8:	2d 06 29 06 25 06 20 06 1c 06 17 06 12 06 0d 06     -.).%. .........
     5d8:	08 06 03 06                                         ....

000005dc <cols_9>:
     5dc:	64 92 92 7d                                         d..}

000005e0 <cols_8>:
     5e0:	6c 92 92 6d                                         l..m

000005e4 <cols_7>:
     5e4:	80 9e a0 c1                                         ....

000005e8 <cols_6>:
     5e8:	7c 92 92 4d                                         |..M

000005ec <cols_5>:
     5ec:	e4 a2 a2 9d                                         ....

000005f0 <cols_4>:
     5f0:	18 28 48 ff                                         .(H.

000005f4 <cols_3>:
     5f4:	44 92 92 6d                                         D..m

000005f8 <cols_2>:
     5f8:	46 8a 92 63                                         F..c

000005fc <cols_1>:
     5fc:	42 fe 03                                            B..

000005ff <cols_0>:
     5ff:	7c 92 a2 7d                                         |..}

00000603 <cols_Z>:
     603:	86 8a 92 a2 c3                                      .....

00000608 <cols_Y>:
     608:	e0 10 0e 10 e1                                      .....

0000060d <cols_X>:
     60d:	c6 28 10 28 c7                                      .(.(.

00000612 <cols_W>:
     612:	fc 02 1c 02 fd                                      .....

00000617 <cols_V>:
     617:	f8 04 02 04 f9                                      .....

0000061c <cols_U>:
     61c:	fc 02 02 fd                                         ....

00000620 <cols_T>:
     620:	80 80 fe 80 81                                      .....

00000625 <cols_S>:
     625:	64 92 92 4d                                         d..M

00000629 <cols_R>:
     629:	fe 90 98 67                                         ...g

0000062d <cols_Q>:
     62d:	7c 82 8a 7c 03                                      |..|.

00000632 <cols_P>:
     632:	fe 90 90 61                                         ...a

00000636 <cols_O>:
     636:	7c 82 82 7d                                         |..}

0000063a <cols_N>:
     63a:	fe 20 10 ff                                         . ..

0000063e <cols_M>:
     63e:	fe 40 30 40 ff                                      .@0@.

00000643 <cols_L>:
     643:	fe 02 02 03                                         ....

00000647 <cols_K>:
     647:	fe 10 28 c7                                         ..(.

0000064b <cols_J>:
     64b:	04 02 02 fd                                         ....

0000064f <cols_I>:
     64f:	82 fe 83                                            ...

00000652 <cols_H>:
     652:	fe 10 10 ff                                         ....

00000656 <cols_G>:
     656:	7c 82 92 5d                                         |..]

0000065a <cols_F>:
     65a:	fe 90 90 81                                         ....

0000065e <cols_E>:
     65e:	fe 92 92 83                                         ....

00000662 <cols_D>:
     662:	fe 82 82 7d                                         ...}

00000666 <cols_C>:
     666:	7c 82 82 45                                         |..E

0000066a <cols_B>:
     66a:	fe 92 92 6d                                         ...m

0000066e <cols_A>:
     66e:	7e 90 90 7f                                         ~...

00000672 <__c.2082>:
     672:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000679 <__c.2078>:
     679:	1b 5b 25 64 6d 00                                   .[%dm.

0000067f <__c.2068>:
     67f:	1b 5b 32 4a 00                                      .[2J.

00000684 <__c.2058>:
     684:	1b 5b 30 6d 00                                      .[0m.

00000689 <__c.2033>:
     689:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000692 <__ctors_end>:
     692:	11 24       	eor	r1, r1
     694:	1f be       	out	0x3f, r1	; 63
     696:	cf ef       	ldi	r28, 0xFF	; 255
     698:	d8 e0       	ldi	r29, 0x08	; 8
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61

0000069e <__do_copy_data>:
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	ee e9       	ldi	r30, 0x9E	; 158
     6a6:	fc e2       	ldi	r31, 0x2C	; 44
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__do_copy_data+0x10>
     6aa:	05 90       	lpm	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	a2 3c       	cpi	r26, 0xC2	; 194
     6b0:	b1 07       	cpc	r27, r17
     6b2:	d9 f7       	brne	.-10     	; 0x6aa <__do_copy_data+0xc>

000006b4 <__do_clear_bss>:
     6b4:	24 e0       	ldi	r18, 0x04	; 4
     6b6:	a2 ec       	ldi	r26, 0xC2	; 194
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
     6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
     6be:	ab 30       	cpi	r26, 0x0B	; 11
     6c0:	b2 07       	cpc	r27, r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
     6c4:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <main>
     6c8:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <_exit>

000006cc <__bad_interrupt>:
     6cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6d0:	e8 e6       	ldi	r30, 0x68	; 104
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6da:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6dc:	ec e6       	ldi	r30, 0x6C	; 108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 60       	ori	r24, 0x0F	; 15
     6e4:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6e6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
     6ea:	08 95       	ret

000006ec <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6ec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
     6f0:	18 16       	cp	r1, r24
     6f2:	3c f5       	brge	.+78     	; 0x742 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6f8:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6fa:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6fc:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	b4 f0       	brlt	.+44     	; 0x730 <button_pushed+0x44>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     70a:	f9 01       	movw	r30, r18
     70c:	ed 53       	subi	r30, 0x3D	; 61
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	40 81       	ld	r20, Z
     712:	f9 01       	movw	r30, r18
     714:	ee 53       	subi	r30, 0x3E	; 62
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	29 2f       	mov	r18, r25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <__data_end>
     724:	04 2e       	mov	r0, r20
     726:	00 0c       	add	r0, r0
     728:	55 0b       	sbc	r21, r21
     72a:	24 17       	cp	r18, r20
     72c:	35 07       	cpc	r19, r21
     72e:	6c f3       	brlt	.-38     	; 0x70a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     730:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__data_end>
		
		if(interrupts_were_enabled) {
     73a:	66 23       	and	r22, r22
     73c:	1c f4       	brge	.+6      	; 0x744 <button_pushed+0x58>
			// Turn them back on again
			sei();
     73e:	78 94       	sei
     740:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     742:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     744:	08 95       	ret

00000746 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     764:	43 b1       	in	r20, 0x03	; 3
     766:	4f 70       	andi	r20, 0x0F	; 15
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     76c:	64 2f       	mov	r22, r20
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__data_end>
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	04 f5       	brge	.+64     	; 0x7b8 <__vector_5+0x72>
     778:	9b 01       	movw	r18, r22
     77a:	08 2e       	mov	r0, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_5+0x3c>
     77e:	35 95       	asr	r19
     780:	27 95       	ror	r18
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <__vector_5+0x38>
     786:	20 ff       	sbrs	r18, 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     78a:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	08 2e       	mov	r0, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x52>
     794:	35 95       	asr	r19
     796:	27 95       	ror	r18
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <__vector_5+0x4e>
     79c:	20 fd       	sbrc	r18, 0
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7a0:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <__data_end>
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	2e 0f       	add	r18, r30
     7a8:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <__data_end>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 0b       	sbc	r31, r31
     7b2:	ed 53       	subi	r30, 0x3D	; 61
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f6       	brne	.-80     	; 0x770 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7c0:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <last_button_state>
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <is_ghost_home>:

void set_lives(int8_t num){
	lives += num; 
	//cap max lives 
	if(lives > MAX_LIVES){
		lives = MAX_LIVES; 
     7e2:	6f 30       	cpi	r22, 0x0F	; 15
     7e4:	39 f4       	brne	.+14     	; 0x7f4 <is_ghost_home+0x12>
     7e6:	94 ef       	ldi	r25, 0xF4	; 244
     7e8:	98 0f       	add	r25, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	97 30       	cpi	r25, 0x07	; 7
     7ee:	60 f0       	brcs	.+24     	; 0x808 <is_ghost_home+0x26>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
     7f4:	6e 30       	cpi	r22, 0x0E	; 14
     7f6:	39 f4       	brne	.+14     	; 0x806 <is_ghost_home+0x24>
     7f8:	92 ef       	ldi	r25, 0xF2	; 242
     7fa:	98 0f       	add	r25, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	93 30       	cpi	r25, 0x03	; 3
     800:	18 f0       	brcs	.+6      	; 0x808 <is_ghost_home+0x26>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret

0000080a <what_is_in_dirn>:
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <what_is_in_dirn+0x30>
     816:	28 f0       	brcs	.+10     	; 0x822 <what_is_in_dirn+0x18>
     818:	42 30       	cpi	r20, 0x02	; 2
     81a:	49 f0       	breq	.+18     	; 0x82e <what_is_in_dirn+0x24>
     81c:	43 30       	cpi	r20, 0x03	; 3
     81e:	99 f0       	breq	.+38     	; 0x846 <what_is_in_dirn+0x3c>
     820:	73 c0       	rjmp	.+230    	; 0x908 <__stack+0x9>
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <what_is_in_dirn+0x1e>
     826:	72 c0       	rjmp	.+228    	; 0x90c <__stack+0xd>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	11 c0       	rjmp	.+34     	; 0x850 <what_is_in_dirn+0x46>
     82e:	8e 31       	cpi	r24, 0x1E	; 30
     830:	09 f4       	brne	.+2      	; 0x834 <what_is_in_dirn+0x2a>
     832:	6e c0       	rjmp	.+220    	; 0x910 <__stack+0x11>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0b c0       	rjmp	.+22     	; 0x850 <what_is_in_dirn+0x46>
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <what_is_in_dirn+0x36>
     83e:	6a c0       	rjmp	.+212    	; 0x914 <__stack+0x15>
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <what_is_in_dirn+0x46>
     846:	6e 31       	cpi	r22, 0x1E	; 30
     848:	09 f4       	brne	.+2      	; 0x84c <what_is_in_dirn+0x42>
     84a:	66 c0       	rjmp	.+204    	; 0x918 <__stack+0x19>
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	62 0f       	add	r22, r18
     852:	89 0f       	add	r24, r25
     854:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pacman_x>
     858:	89 13       	cpse	r24, r25
     85a:	05 c0       	rjmp	.+10     	; 0x866 <what_is_in_dirn+0x5c>
     85c:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <pacman_y>
     860:	69 17       	cp	r22, r25
     862:	09 f4       	brne	.+2      	; 0x866 <what_is_in_dirn+0x5c>
     864:	5b c0       	rjmp	.+182    	; 0x91c <__stack+0x1d>
     866:	a1 ed       	ldi	r26, 0xD1	; 209
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	ed ec       	ldi	r30, 0xCD	; 205
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2d 91       	ld	r18, X+
     872:	82 13       	cpse	r24, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <what_is_in_dirn+0x74>
     876:	20 81       	ld	r18, Z
     878:	62 17       	cp	r22, r18
     87a:	09 f4       	brne	.+2      	; 0x87e <what_is_in_dirn+0x74>
     87c:	51 c0       	rjmp	.+162    	; 0x920 <__stack+0x21>
     87e:	9f 5f       	subi	r25, 0xFF	; 255
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	a9 f7       	brne	.-22     	; 0x870 <what_is_in_dirn+0x66>
     886:	46 2f       	mov	r20, r22
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	fa 01       	movw	r30, r20
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e9 5a       	subi	r30, 0xA9	; 169
     89a:	fd 4f       	sbci	r31, 0xFD	; 253
     89c:	c0 80       	ld	r12, Z
     89e:	d1 80       	ldd	r13, Z+1	; 0x01
     8a0:	e2 80       	ldd	r14, Z+2	; 0x02
     8a2:	f3 80       	ldd	r15, Z+3	; 0x03
     8a4:	08 2e       	mov	r0, r24
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <what_is_in_dirn+0xa6>
     8a8:	f6 94       	lsr	r15
     8aa:	e7 94       	ror	r14
     8ac:	d7 94       	ror	r13
     8ae:	c7 94       	ror	r12
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <what_is_in_dirn+0x9e>
     8b4:	c0 fc       	sbrc	r12, 0
     8b6:	36 c0       	rjmp	.+108    	; 0x924 <__stack+0x25>
     8b8:	fa 01       	movw	r30, r20
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e5 52       	subi	r30, 0x25	; 37
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	c0 80       	ld	r12, Z
     8c8:	d1 80       	ldd	r13, Z+1	; 0x01
     8ca:	e2 80       	ldd	r14, Z+2	; 0x02
     8cc:	f3 80       	ldd	r15, Z+3	; 0x03
     8ce:	08 2e       	mov	r0, r24
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <what_is_in_dirn+0xd0>
     8d2:	f6 94       	lsr	r15
     8d4:	e7 94       	ror	r14
     8d6:	d7 94       	ror	r13
     8d8:	c7 94       	ror	r12
     8da:	0a 94       	dec	r0
     8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <what_is_in_dirn+0xc8>
     8de:	c0 fc       	sbrc	r12, 0
     8e0:	23 c0       	rjmp	.+70     	; 0x928 <__stack+0x29>
     8e2:	9f e1       	ldi	r25, 0x1F	; 31
     8e4:	94 9f       	mul	r25, r20
     8e6:	f0 01       	movw	r30, r0
     8e8:	95 9f       	mul	r25, r21
     8ea:	f0 0d       	add	r31, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	e2 0f       	add	r30, r18
     8f0:	f3 1f       	adc	r31, r19
     8f2:	ea 5c       	subi	r30, 0xCA	; 202
     8f4:	fe 4f       	sbci	r31, 0xFE	; 254
     8f6:	e4 91       	lpm	r30, Z
     8f8:	e0 32       	cpi	r30, 0x20	; 32
     8fa:	d1 f0       	breq	.+52     	; 0x930 <__stack+0x31>
     8fc:	ee 32       	cpi	r30, 0x2E	; 46
     8fe:	c1 f0       	breq	.+48     	; 0x930 <__stack+0x31>
     900:	e0 35       	cpi	r30, 0x50	; 80
     902:	b1 f0       	breq	.+44     	; 0x930 <__stack+0x31>
     904:	8e ef       	ldi	r24, 0xFE	; 254
     906:	19 c0       	rjmp	.+50     	; 0x93a <__stack+0x3b>
     908:	8e ef       	ldi	r24, 0xFE	; 254
     90a:	17 c0       	rjmp	.+46     	; 0x93a <__stack+0x3b>
     90c:	8e ef       	ldi	r24, 0xFE	; 254
     90e:	15 c0       	rjmp	.+42     	; 0x93a <__stack+0x3b>
     910:	8e ef       	ldi	r24, 0xFE	; 254
     912:	13 c0       	rjmp	.+38     	; 0x93a <__stack+0x3b>
     914:	8e ef       	ldi	r24, 0xFE	; 254
     916:	11 c0       	rjmp	.+34     	; 0x93a <__stack+0x3b>
     918:	8e ef       	ldi	r24, 0xFE	; 254
     91a:	0f c0       	rjmp	.+30     	; 0x93a <__stack+0x3b>
     91c:	8d ef       	ldi	r24, 0xFD	; 253
     91e:	0d c0       	rjmp	.+26     	; 0x93a <__stack+0x3b>
     920:	89 2f       	mov	r24, r25
     922:	0b c0       	rjmp	.+22     	; 0x93a <__stack+0x3b>
     924:	8c ef       	ldi	r24, 0xFC	; 252
     926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0x3b>
     928:	89 ef       	ldi	r24, 0xF9	; 249
     92a:	07 c0       	rjmp	.+14     	; 0x93a <__stack+0x3b>
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x3b>
     930:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     934:	81 11       	cpse	r24, r1
     936:	fa cf       	rjmp	.-12     	; 0x92c <__stack+0x2d>
     938:	8b ef       	ldi	r24, 0xFB	; 251
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <determine_dirns_ghost_can_move_in>:
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	08 2f       	mov	r16, r24
     956:	f6 2e       	mov	r15, r22
     958:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     95c:	e8 2e       	mov	r14, r24
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	d0 e0       	ldi	r29, 0x00	; 0
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	cc 24       	eor	r12, r12
     966:	c3 94       	inc	r12
     968:	d1 2c       	mov	r13, r1
     96a:	4c 2f       	mov	r20, r28
     96c:	6f 2d       	mov	r22, r15
     96e:	80 2f       	mov	r24, r16
     970:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     974:	8e 3f       	cpi	r24, 0xFE	; 254
     976:	4c f4       	brge	.+18     	; 0x98a <determine_dirns_ghost_can_move_in+0x46>
     978:	c6 01       	movw	r24, r12
     97a:	0c 2e       	mov	r0, r28
     97c:	02 c0       	rjmp	.+4      	; 0x982 <determine_dirns_ghost_can_move_in+0x3e>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <determine_dirns_ghost_can_move_in+0x3a>
     986:	18 2b       	or	r17, r24
     988:	0c c0       	rjmp	.+24     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     98a:	ee 20       	and	r14, r14
     98c:	51 f0       	breq	.+20     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     98e:	8f 3f       	cpi	r24, 0xFF	; 255
     990:	41 f4       	brne	.+16     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     992:	c6 01       	movw	r24, r12
     994:	0c 2e       	mov	r0, r28
     996:	02 c0       	rjmp	.+4      	; 0x99c <determine_dirns_ghost_can_move_in+0x58>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <determine_dirns_ghost_can_move_in+0x54>
     9a0:	18 2b       	or	r17, r24
     9a2:	21 96       	adiw	r28, 0x01	; 1
     9a4:	c4 30       	cpi	r28, 0x04	; 4
     9a6:	d1 05       	cpc	r29, r1
     9a8:	01 f7       	brne	.-64     	; 0x96a <determine_dirns_ghost_can_move_in+0x26>
     9aa:	81 2f       	mov	r24, r17
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	08 95       	ret

000009be <draw_pacman_at>:
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
     9cc:	81 e2       	ldi	r24, 0x21	; 33
     9ce:	0e 94 54 11 	call	0x22a8	; 0x22a8 <set_display_attribute>
     9d2:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <pacman_direction>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	ea 56       	subi	r30, 0x6A	; 106
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	8f 93       	push	r24
     9e4:	80 81       	ld	r24, Z
     9e6:	8f 93       	push	r24
     9e8:	83 e1       	ldi	r24, 0x13	; 19
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     9f4:	0e 94 42 11 	call	0x2284	; 0x2284 <normal_display_mode>
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	08 95       	ret

00000a02 <draw_ghost_at>:
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	18 2f       	mov	r17, r24
     a0c:	06 2f       	mov	r16, r22
     a0e:	c4 2f       	mov	r28, r20
     a10:	d0 e0       	ldi	r29, 0x00	; 0
     a12:	86 2f       	mov	r24, r22
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
     a22:	e1 2f       	mov	r30, r17
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e2 56       	subi	r30, 0x62	; 98
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <set_display_attribute>
     a30:	fe 01       	movw	r30, r28
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e9 5a       	subi	r30, 0xA9	; 169
     a3c:	fd 4f       	sbci	r31, 0xFD	; 253
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	a2 81       	ldd	r26, Z+2	; 0x02
     a44:	b3 81       	ldd	r27, Z+3	; 0x03
     a46:	00 2e       	mov	r0, r16
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <draw_ghost_at+0x50>
     a4a:	b6 95       	lsr	r27
     a4c:	a7 95       	ror	r26
     a4e:	97 95       	ror	r25
     a50:	87 95       	ror	r24
     a52:	0a 94       	dec	r0
     a54:	d2 f7       	brpl	.-12     	; 0xa4a <draw_ghost_at+0x48>
     a56:	80 ff       	sbrs	r24, 0
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <draw_ghost_at+0x62>
     a5a:	8e e2       	ldi	r24, 0x2E	; 46
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     a62:	1c c0       	rjmp	.+56     	; 0xa9c <draw_ghost_at+0x9a>
     a64:	cc 0f       	add	r28, r28
     a66:	dd 1f       	adc	r29, r29
     a68:	cc 0f       	add	r28, r28
     a6a:	dd 1f       	adc	r29, r29
     a6c:	c5 52       	subi	r28, 0x25	; 37
     a6e:	de 4f       	sbci	r29, 0xFE	; 254
     a70:	88 81       	ld	r24, Y
     a72:	99 81       	ldd	r25, Y+1	; 0x01
     a74:	aa 81       	ldd	r26, Y+2	; 0x02
     a76:	bb 81       	ldd	r27, Y+3	; 0x03
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <draw_ghost_at+0x80>
     a7a:	b6 95       	lsr	r27
     a7c:	a7 95       	ror	r26
     a7e:	97 95       	ror	r25
     a80:	87 95       	ror	r24
     a82:	0a 95       	dec	r16
     a84:	d2 f7       	brpl	.-12     	; 0xa7a <draw_ghost_at+0x78>
     a86:	80 ff       	sbrs	r24, 0
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <draw_ghost_at+0x92>
     a8a:	80 e5       	ldi	r24, 0x50	; 80
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <draw_ghost_at+0x9a>
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     a9c:	0e 94 42 11 	call	0x2284	; 0x2284 <normal_display_mode>
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <erase_pixel_at>:
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	18 2f       	mov	r17, r24
     ab2:	c6 2f       	mov	r28, r22
     ab4:	d0 e0       	ldi	r29, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	be 01       	movw	r22, r28
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
     ac4:	fe 01       	movw	r30, r28
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e9 5a       	subi	r30, 0xA9	; 169
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
     ada:	01 2e       	mov	r0, r17
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <erase_pixel_at+0x3c>
     ade:	b6 95       	lsr	r27
     ae0:	a7 95       	ror	r26
     ae2:	97 95       	ror	r25
     ae4:	87 95       	ror	r24
     ae6:	0a 94       	dec	r0
     ae8:	d2 f7       	brpl	.-12     	; 0xade <erase_pixel_at+0x34>
     aea:	80 ff       	sbrs	r24, 0
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <erase_pixel_at+0x4e>
     aee:	8e e2       	ldi	r24, 0x2E	; 46
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     af6:	1c c0       	rjmp	.+56     	; 0xb30 <erase_pixel_at+0x86>
     af8:	cc 0f       	add	r28, r28
     afa:	dd 1f       	adc	r29, r29
     afc:	cc 0f       	add	r28, r28
     afe:	dd 1f       	adc	r29, r29
     b00:	c5 52       	subi	r28, 0x25	; 37
     b02:	de 4f       	sbci	r29, 0xFE	; 254
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	aa 81       	ldd	r26, Y+2	; 0x02
     b0a:	bb 81       	ldd	r27, Y+3	; 0x03
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <erase_pixel_at+0x6c>
     b0e:	b6 95       	lsr	r27
     b10:	a7 95       	ror	r26
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	1a 95       	dec	r17
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <erase_pixel_at+0x64>
     b1a:	80 ff       	sbrs	r24, 0
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <erase_pixel_at+0x7e>
     b1e:	80 e5       	ldi	r24, 0x50	; 80
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <erase_pixel_at+0x86>
     b28:	80 e2       	ldi	r24, 0x20	; 32
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <get_lives>:
     b38:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
     b3c:	08 95       	ret

00000b3e <reset_lives>:
		lives  = 0; 
	}
	
}
void reset_lives(void){
	lives = MAX_LIVES; 
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lives>
     b44:	08 95       	ret

00000b46 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     b6a:	0e 94 4b 11 	call	0x2296	; 0x2296 <clear_terminal>
	normal_display_mode();
     b6e:	0e 94 42 11 	call	0x2284	; 0x2284 <normal_display_mode>
	hide_cursor();
     b72:	0e 94 61 11 	call	0x22c2	; 0x22c2 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
     b82:	0f 2e       	mov	r0, r31
     b84:	f5 e5       	ldi	r31, 0x55	; 85
     b86:	6f 2e       	mov	r6, r31
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	7f 2e       	mov	r7, r31
     b8c:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     b8e:	0f 2e       	mov	r0, r31
     b90:	fe e3       	ldi	r31, 0x3E	; 62
     b92:	2f 2e       	mov	r2, r31
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	3f 2e       	mov	r3, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f3 e1       	ldi	r31, 0x13	; 19
     b9e:	4f 2e       	mov	r4, r31
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	5f 2e       	mov	r5, r31
     ba4:	f0 2d       	mov	r31, r0
     ba6:	b6 c0       	rjmp	.+364    	; 0xd14 <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     ba8:	f6 01       	movw	r30, r12
     baa:	84 91       	lpm	r24, Z
			switch(wall_character) {
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	b0 97       	sbiw	r30, 0x20	; 32
     bb2:	ed 35       	cpi	r30, 0x5D	; 93
     bb4:	f1 05       	cpc	r31, r1
     bb6:	08 f0       	brcs	.+2      	; 0xbba <initialise_game_level+0x74>
     bb8:	96 c0       	rjmp	.+300    	; 0xce6 <initialise_game_level+0x1a0>
     bba:	e2 5c       	subi	r30, 0xC2	; 194
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     bc2:	9f 92       	push	r9
     bc4:	8f 92       	push	r8
     bc6:	5f 92       	push	r5
     bc8:	4f 92       	push	r4
     bca:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	8b c0       	rjmp	.+278    	; 0xcee <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     bd8:	bf 92       	push	r11
     bda:	af 92       	push	r10
     bdc:	5f 92       	push	r5
     bde:	4f 92       	push	r4
     be0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	80 c0       	rjmp	.+256    	; 0xcee <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	5f 92       	push	r5
     bf4:	4f 92       	push	r4
     bf6:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	75 c0       	rjmp	.+234    	; 0xcee <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c04:	1f 93       	push	r17
     c06:	0f 93       	push	r16
     c08:	5f 92       	push	r5
     c0a:	4f 92       	push	r4
     c0c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	6a c0       	rjmp	.+212    	; 0xcee <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c1a:	ff 92       	push	r15
     c1c:	ef 92       	push	r14
     c1e:	5f 92       	push	r5
     c20:	4f 92       	push	r4
     c22:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	5f c0       	rjmp	.+190    	; 0xcee <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     c30:	8a e2       	ldi	r24, 0x2A	; 42
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	5f 92       	push	r5
     c3a:	4f 92       	push	r4
     c3c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	52 c0       	rjmp	.+164    	; 0xcee <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     c4a:	8e e2       	ldi	r24, 0x2E	; 46
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	5f 92       	push	r5
     c54:	4f 92       	push	r4
     c56:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	45 c0       	rjmp	.+138    	; 0xcee <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     c64:	82 e3       	ldi	r24, 0x32	; 50
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	5f 92       	push	r5
     c6e:	4f 92       	push	r4
     c70:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	38 c0       	rjmp	.+112    	; 0xcee <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     c7e:	86 e3       	ldi	r24, 0x36	; 54
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	5f 92       	push	r5
     c88:	4f 92       	push	r4
     c8a:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	2b c0       	rjmp	.+86     	; 0xcee <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     c98:	8a e3       	ldi	r24, 0x3A	; 58
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	5f 92       	push	r5
     ca2:	4f 92       	push	r4
     ca4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	1e c0       	rjmp	.+60     	; 0xcee <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     cb2:	3f 92       	push	r3
     cb4:	2f 92       	push	r2
     cb6:	5f 92       	push	r5
     cb8:	4f 92       	push	r4
     cba:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     cd0:	0e c0       	rjmp	.+28     	; 0xcee <initialise_game_level+0x1a8>
				case 'P':	printf("P"); break;	// power-pellet initially just implemented as a pac-dot
     cd2:	80 e5       	ldi	r24, 0x50	; 80
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     cda:	09 c0       	rjmp	.+18     	; 0xcee <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     cdc:	8e e2       	ldi	r24, 0x2E	; 46
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     ce6:	88 e7       	ldi	r24, 0x78	; 120
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	cf 1a       	sub	r12, r31
     cf2:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     cf4:	6c 14       	cp	r6, r12
     cf6:	7d 04       	cpc	r7, r13
     cf8:	09 f0       	breq	.+2      	; 0xcfc <initialise_game_level+0x1b6>
     cfa:	56 cf       	rjmp	.-340    	; 0xba8 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 2c 13 	call	0x2658	; 0x2658 <putchar>
     d04:	2f e1       	ldi	r18, 0x1F	; 31
     d06:	62 0e       	add	r6, r18
     d08:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d0a:	86 e1       	ldi	r24, 0x16	; 22
     d0c:	95 e0       	ldi	r25, 0x05	; 5
     d0e:	86 15       	cp	r24, r6
     d10:	97 05       	cpc	r25, r7
     d12:	d9 f0       	breq	.+54     	; 0xd4a <initialise_game_level+0x204>
     d14:	63 01       	movw	r12, r6
     d16:	9f e1       	ldi	r25, 0x1F	; 31
     d18:	c9 1a       	sub	r12, r25
     d1a:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     d1c:	0f 2e       	mov	r0, r31
     d1e:	f6 e2       	ldi	r31, 0x26	; 38
     d20:	ef 2e       	mov	r14, r31
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	ff 2e       	mov	r15, r31
     d26:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     d28:	02 e2       	ldi	r16, 0x22	; 34
     d2a:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     d2c:	ce e1       	ldi	r28, 0x1E	; 30
     d2e:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     d30:	0f 2e       	mov	r0, r31
     d32:	fa e1       	ldi	r31, 0x1A	; 26
     d34:	af 2e       	mov	r10, r31
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	bf 2e       	mov	r11, r31
     d3a:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f6 e1       	ldi	r31, 0x16	; 22
     d40:	8f 2e       	mov	r8, r31
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	9f 2e       	mov	r9, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	2f cf       	rjmp	.-418    	; 0xba8 <initialise_game_level+0x62>
     d4a:	07 e5       	ldi	r16, 0x57	; 87
     d4c:	12 e0       	ldi	r17, 0x02	; 2
     d4e:	6b ed       	ldi	r22, 0xDB	; 219
     d50:	71 e0       	ldi	r23, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' ) {
				pacdots[y] |= (1UL<<x);
				num_pacdots++;
			}else if (wall_character =='P'){
				pellets[y] |= (1UL<<x); 
     d5a:	c1 2c       	mov	r12, r1
     d5c:	d1 2c       	mov	r13, r1
     d5e:	76 01       	movw	r14, r12
     d60:	c3 94       	inc	r12
     d62:	d8 01       	movw	r26, r16

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     d64:	f8 01       	movw	r30, r16
     d66:	10 82       	st	Z, r1
     d68:	11 82       	std	Z+1, r1	; 0x01
     d6a:	12 82       	std	Z+2, r1	; 0x02
     d6c:	13 82       	std	Z+3, r1	; 0x03
     d6e:	eb 01       	movw	r28, r22
		pellets[y] = 0; 
     d70:	18 82       	st	Y, r1
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	1a 82       	std	Y+2, r1	; 0x02
     d76:	1b 82       	std	Y+3, r1	; 0x03
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	ea 5c       	subi	r30, 0xCA	; 202
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	e4 91       	lpm	r30, Z
			if(wall_character == '.' ) {
     d88:	ee 32       	cpi	r30, 0x2E	; 46
     d8a:	d9 f4       	brne	.+54     	; 0xdc2 <initialise_game_level+0x27c>
				pacdots[y] |= (1UL<<x);
     d8c:	4d 90       	ld	r4, X+
     d8e:	5d 90       	ld	r5, X+
     d90:	6d 90       	ld	r6, X+
     d92:	7c 90       	ld	r7, X
     d94:	13 97       	sbiw	r26, 0x03	; 3
     d96:	46 01       	movw	r8, r12
     d98:	57 01       	movw	r10, r14
     d9a:	08 2e       	mov	r0, r24
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <initialise_game_level+0x260>
     d9e:	88 0c       	add	r8, r8
     da0:	99 1c       	adc	r9, r9
     da2:	aa 1c       	adc	r10, r10
     da4:	bb 1c       	adc	r11, r11
     da6:	0a 94       	dec	r0
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <initialise_game_level+0x258>
     daa:	84 28       	or	r8, r4
     dac:	95 28       	or	r9, r5
     dae:	a6 28       	or	r10, r6
     db0:	b7 28       	or	r11, r7
     db2:	8d 92       	st	X+, r8
     db4:	9d 92       	st	X+, r9
     db6:	ad 92       	st	X+, r10
     db8:	bc 92       	st	X, r11
     dba:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	18 c0       	rjmp	.+48     	; 0xdf2 <initialise_game_level+0x2ac>
			}else if (wall_character =='P'){
     dc2:	e0 35       	cpi	r30, 0x50	; 80
     dc4:	b1 f4       	brne	.+44     	; 0xdf2 <initialise_game_level+0x2ac>
				pellets[y] |= (1UL<<x); 
     dc6:	48 80       	ld	r4, Y
     dc8:	59 80       	ldd	r5, Y+1	; 0x01
     dca:	6a 80       	ldd	r6, Y+2	; 0x02
     dcc:	7b 80       	ldd	r7, Y+3	; 0x03
     dce:	46 01       	movw	r8, r12
     dd0:	57 01       	movw	r10, r14
     dd2:	08 2e       	mov	r0, r24
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <initialise_game_level+0x298>
     dd6:	88 0c       	add	r8, r8
     dd8:	99 1c       	adc	r9, r9
     dda:	aa 1c       	adc	r10, r10
     ddc:	bb 1c       	adc	r11, r11
     dde:	0a 94       	dec	r0
     de0:	d2 f7       	brpl	.-12     	; 0xdd6 <initialise_game_level+0x290>
     de2:	84 28       	or	r8, r4
     de4:	95 28       	or	r9, r5
     de6:	a6 28       	or	r10, r6
     de8:	b7 28       	or	r11, r7
     dea:	88 82       	st	Y, r8
     dec:	99 82       	std	Y+1, r9	; 0x01
     dee:	aa 82       	std	Y+2, r10	; 0x02
     df0:	bb 82       	std	Y+3, r11	; 0x03
     df2:	01 96       	adiw	r24, 0x01	; 1
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		pellets[y] = 0; 
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     df4:	8f 31       	cpi	r24, 0x1F	; 31
     df6:	91 05       	cpc	r25, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <initialise_game_level+0x2b6>
     dfa:	c0 cf       	rjmp	.-128    	; 0xd7c <initialise_game_level+0x236>
     dfc:	21 5e       	subi	r18, 0xE1	; 225
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	0c 5f       	subi	r16, 0xFC	; 252
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	6c 5f       	subi	r22, 0xFC	; 252
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     e08:	21 3c       	cpi	r18, 0xC1	; 193
     e0a:	f3 e0       	ldi	r31, 0x03	; 3
     e0c:	3f 07       	cpc	r19, r31
     e0e:	09 f0       	breq	.+2      	; 0xe12 <initialise_game_level+0x2cc>
     e10:	a8 cf       	rjmp	.-176    	; 0xd62 <initialise_game_level+0x21c>
     e12:	50 93 da 01 	sts	0x01DA, r21	; 0x8001da <num_pacdots+0x1>
     e16:	40 93 d9 01 	sts	0x01D9, r20	; 0x8001d9 <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     e1a:	8f e0       	ldi	r24, 0x0F	; 15
     e1c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     e20:	87 e1       	ldi	r24, 0x17	; 23
     e22:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     e2c:	67 e1       	ldi	r22, 0x17	; 23
     e2e:	8f e0       	ldi	r24, 0x0F	; 15
     e30:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
     e34:	0f 2e       	mov	r0, r31
     e36:	f1 ed       	ldi	r31, 0xD1	; 209
     e38:	af 2e       	mov	r10, r31
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	bf 2e       	mov	r11, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	0f 2e       	mov	r0, r31
     e42:	fd ec       	ldi	r31, 0xCD	; 205
     e44:	cf 2e       	mov	r12, r31
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	df 2e       	mov	r13, r31
     e4a:	f0 2d       	mov	r31, r0
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f9 ec       	ldi	r31, 0xC9	; 201
     e50:	ef 2e       	mov	r14, r31
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	ff 2e       	mov	r15, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     e5a:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     e5c:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     e5e:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     e60:	f5 01       	movw	r30, r10
     e62:	d1 93       	st	Z+, r29
     e64:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     e66:	f6 01       	movw	r30, r12
     e68:	11 93       	st	Z+, r17
     e6a:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     e6c:	f7 01       	movw	r30, r14
     e6e:	01 93       	st	Z+, r16
     e70:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     e72:	41 2f       	mov	r20, r17
     e74:	6d 2f       	mov	r22, r29
     e76:	8c 2f       	mov	r24, r28
     e78:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
     e7c:	cf 5f       	subi	r28, 0xFF	; 255
     e7e:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     e80:	c4 30       	cpi	r28, 0x04	; 4
     e82:	71 f7       	brne	.-36     	; 0xe60 <initialise_game_level+0x31a>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	9f 90       	pop	r9
     e9a:	8f 90       	pop	r8
     e9c:	7f 90       	pop	r7
     e9e:	6f 90       	pop	r6
     ea0:	5f 90       	pop	r5
     ea2:	4f 90       	pop	r4
     ea4:	3f 90       	pop	r3
     ea6:	2f 90       	pop	r2
     ea8:	08 95       	ret

00000eaa <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     eaa:	0e 94 a3 05 	call	0xb46	; 0xb46 <initialise_game_level>
	game_running = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <game_running>
     eb4:	08 95       	ret

00000eb6 <move_pacman>:
}

int8_t move_pacman(void) {
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
	if(!game_running) {
     ec6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <game_running>
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <move_pacman+0x1a>
     ece:	c6 c1       	rjmp	.+908    	; 0x125c <move_pacman+0x3a6>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     ed0:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
     ed4:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
     ed8:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <pacman_direction>
     edc:	61 2f       	mov	r22, r17
     ede:	8d 2f       	mov	r24, r29
     ee0:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     ee4:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL)  {
     ee6:	8e 3f       	cpi	r24, 0xFE	; 254
     ee8:	09 f4       	brne	.+2      	; 0xeec <move_pacman+0x36>
     eea:	ba c1       	rjmp	.+884    	; 0x1260 <move_pacman+0x3aa>
		
		
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     eec:	61 2f       	mov	r22, r17
     eee:	8d 2f       	mov	r24, r29
     ef0:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	// Update the pac-man location
	
	 if (pacman_direction == DIRN_LEFT) {
     ef4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <pacman_direction>
     ef8:	81 11       	cpse	r24, r1
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <move_pacman+0x64>
		 pacman_x--;
     efc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>

		 if (pacman_x == 0 && pacman_y == 15 ) {
     f06:	81 11       	cpse	r24, r1
     f08:	25 c0       	rjmp	.+74     	; 0xf54 <move_pacman+0x9e>
     f0a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f0e:	8f 30       	cpi	r24, 0x0F	; 15
     f10:	09 f5       	brne	.+66     	; 0xf54 <move_pacman+0x9e>
			 pacman_x = 30 ;
     f12:	8e e1       	ldi	r24, 0x1E	; 30
     f14:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
     f18:	1d c0       	rjmp	.+58     	; 0xf54 <move_pacman+0x9e>
		 }
		 
		 } else if (pacman_direction == DIRN_RIGHT) {
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	71 f4       	brne	.+28     	; 0xf3a <move_pacman+0x84>
		 pacman_x++;
     f1e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
		 if (pacman_x == 30 && pacman_y == 15 ) {
     f28:	8e 31       	cpi	r24, 0x1E	; 30
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <move_pacman+0x9e>
     f2c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f30:	8f 30       	cpi	r24, 0x0F	; 15
     f32:	81 f4       	brne	.+32     	; 0xf54 <move_pacman+0x9e>
			 pacman_x = 0 ;
     f34:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <pacman_x>
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <move_pacman+0x9e>
		 }
	 }
		else if(pacman_direction == DIRN_UP) {
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	31 f4       	brne	.+12     	; 0xf4a <move_pacman+0x94>
		 pacman_y--;
     f3e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <move_pacman+0x9e>
		 } else {
		 pacman_y++;
     f4a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	 }

	if(cell_contents >= 0) {
     f54:	cc 23       	and	r28, r28
     f56:	d4 f1       	brlt	.+116    	; 0xfcc <move_pacman+0x116>
		
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     f58:	0c 2f       	mov	r16, r28
     f5a:	0c 2e       	mov	r0, r28
     f5c:	00 0c       	add	r0, r0
     f5e:	11 0b       	sbc	r17, r17
     f60:	f8 01       	movw	r30, r16
     f62:	e2 56       	subi	r30, 0x62	; 98
     f64:	fe 4f       	sbci	r31, 0xFE	; 254
     f66:	80 81       	ld	r24, Z
     f68:	0e 94 54 11 	call	0x22a8	; 0x22a8 <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     f6c:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
     f70:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f74:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		lives--; 
     f78:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
     f7c:	81 50       	subi	r24, 0x01	; 1
     f7e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lives>
		move_cursor(37, 5 );
     f82:	65 e0       	ldi	r22, 0x05	; 5
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	85 e2       	ldi	r24, 0x25	; 37
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
		printf(("Lives: %5d"), get_lives());
     f8e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
     f92:	1f 92       	push	r1
     f94:	8f 93       	push	r24
     f96:	82 e4       	ldi	r24, 0x42	; 66
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
		//Reset Ghost back to home.
		ghost_x[cell_contents] = GHOST_HOME_X_LEFT ;
     fa2:	f8 01       	movw	r30, r16
     fa4:	ef 52       	subi	r30, 0x2F	; 47
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	8c e0       	ldi	r24, 0x0C	; 12
     faa:	80 83       	st	Z, r24
		ghost_y[cell_contents] = GHOST_HOME_Y ;
     fac:	f8 01       	movw	r30, r16
     fae:	e3 53       	subi	r30, 0x33	; 51
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	8f e0       	ldi	r24, 0x0F	; 15
     fb4:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
     fb6:	4f e0       	ldi	r20, 0x0F	; 15
     fb8:	6c e0       	ldi	r22, 0x0C	; 12
     fba:	8c 2f       	mov	r24, r28
     fbc:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	4b c1       	rjmp	.+662    	; 0x1262 <move_pacman+0x3ac>
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
		
		
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
     fcc:	cc 3f       	cpi	r28, 0xFC	; 252
     fce:	09 f0       	breq	.+2      	; 0xfd2 <move_pacman+0x11c>
     fd0:	b4 c0       	rjmp	.+360    	; 0x113a <move_pacman+0x284>
// count of remaining pac-dots.
// See initialise_pacdots() below for information on how the pacdots array
// is initialised.
static void eat_pacdot(void) {
	uint32_t maskval = 1UL << pacman_x; 
	pacdots[pacman_y] &= ~(maskval); 
     fd2:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pacman_y>
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	ee 0f       	add	r30, r30
     fda:	ff 1f       	adc	r31, r31
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	e9 5a       	subi	r30, 0xA9	; 169
     fe2:	fd 4f       	sbci	r31, 0xFD	; 253
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	00 90 d7 01 	lds	r0, 0x01D7	; 0x8001d7 <pacman_x>
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <move_pacman+0x144>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <move_pacman+0x13c>
     ffe:	80 95       	com	r24
    1000:	90 95       	com	r25
    1002:	a0 95       	com	r26
    1004:	b0 95       	com	r27
    1006:	40 81       	ld	r20, Z
    1008:	51 81       	ldd	r21, Z+1	; 0x01
    100a:	62 81       	ldd	r22, Z+2	; 0x02
    100c:	73 81       	ldd	r23, Z+3	; 0x03
    100e:	84 23       	and	r24, r20
    1010:	95 23       	and	r25, r21
    1012:	a6 23       	and	r26, r22
    1014:	b7 23       	and	r27, r23
    1016:	80 83       	st	Z, r24
    1018:	91 83       	std	Z+1, r25	; 0x01
    101a:	a2 83       	std	Z+2, r26	; 0x02
    101c:	b3 83       	std	Z+3, r27	; 0x03
	num_pacdots--;
    101e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <num_pacdots>
    1022:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <num_pacdots+0x1>
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <num_pacdots+0x1>
    102c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <num_pacdots>
	add_to_score(10);
    1030:	8a e0       	ldi	r24, 0x0A	; 10
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <add_to_score>
	
	move_cursor (37, 8); 
    1038:	68 e0       	ldi	r22, 0x08	; 8
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	85 e2       	ldi	r24, 0x25	; 37
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%13s", "Score: \n"); 
    1044:	8d e4       	ldi	r24, 0x4D	; 77
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	86 e5       	ldi	r24, 0x56	; 86
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
	move_cursor(37,9); 
    1058:	69 e0       	ldi	r22, 0x09	; 9
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	85 e2       	ldi	r24, 0x25	; 37
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%11lu\n", get_score());
    1064:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	7f 93       	push	r23
    106e:	6f 93       	push	r22
    1070:	8b e5       	ldi	r24, 0x5B	; 91
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	9f 93       	push	r25
    1076:	8f 93       	push	r24
    1078:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>

	if (get_score() > get_highscore()) {
    107c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    1080:	6b 01       	movw	r12, r22
    1082:	7c 01       	movw	r14, r24
    1084:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <get_highscore>
    1088:	2d b7       	in	r18, 0x3d	; 61
    108a:	3e b7       	in	r19, 0x3e	; 62
    108c:	26 5f       	subi	r18, 0xF6	; 246
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	3e bf       	out	0x3e, r19	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	2d bf       	out	0x3d, r18	; 61
    109a:	6c 15       	cp	r22, r12
    109c:	7d 05       	cpc	r23, r13
    109e:	8e 05       	cpc	r24, r14
    10a0:	9f 05       	cpc	r25, r15
    10a2:	20 f4       	brcc	.+8      	; 0x10ac <move_pacman+0x1f6>
		set_highscore(get_score()) ; 
    10a4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    10a8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <set_highscore>
	}
	
	move_cursor(37, 10) ;
    10ac:	6a e0       	ldi	r22, 0x0A	; 10
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	85 e2       	ldi	r24, 0x25	; 37
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%s", "High Score:\n");
    10b8:	82 e6       	ldi	r24, 0x62	; 98
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 33 13 	call	0x2666	; 0x2666 <puts>
	
	move_cursor(37,11); 
    10c0:	6b e0       	ldi	r22, 0x0B	; 11
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	85 e2       	ldi	r24, 0x25	; 37
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%11lu\n", get_highscore() );
    10cc:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <get_highscore>
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	7f 93       	push	r23
    10d6:	6f 93       	push	r22
    10d8:	8b e5       	ldi	r24, 0x5B	; 91
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	9f 93       	push	r25
    10de:	8f 93       	push	r24
    10e0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
	
	move_cursor(37, 13);
    10e4:	6d e0       	ldi	r22, 0x0D	; 13
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	85 e2       	ldi	r24, 0x25	; 37
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf(("Pacdots Remaining: %11d"), num_pacdots);
    10f0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <num_pacdots+0x1>
    10f4:	8f 93       	push	r24
    10f6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <num_pacdots>
    10fa:	8f 93       	push	r24
    10fc:	8e e6       	ldi	r24, 0x6E	; 110
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	9f 93       	push	r25
    1102:	8f 93       	push	r24
    1104:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
	
	move_cursor(37, 5 );
    1108:	65 e0       	ldi	r22, 0x05	; 5
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	85 e2       	ldi	r24, 0x25	; 37
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf(("Lives: %5d"), get_lives());
    1114:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    1118:	1f 92       	push	r1
    111a:	8f 93       	push	r24
    111c:	82 e4       	ldi	r24, 0x42	; 66
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
    1128:	8d b7       	in	r24, 0x3d	; 61
    112a:	9e b7       	in	r25, 0x3e	; 62
    112c:	0e 96       	adiw	r24, 0x0e	; 14
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	9e bf       	out	0x3e, r25	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	8d bf       	out	0x3d, r24	; 61
    1138:	89 c0       	rjmp	.+274    	; 0x124c <move_pacman+0x396>
		
		
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
    113a:	c9 3f       	cpi	r28, 0xF9	; 249
    113c:	09 f0       	breq	.+2      	; 0x1140 <move_pacman+0x28a>
    113e:	86 c0       	rjmp	.+268    	; 0x124c <move_pacman+0x396>
	printf(("Lives: %5d"), get_lives());
	
}
static void eat_pellet(void){
	uint32_t maskval = 1UL << pacman_x;
	pellets[pacman_y] &= ~(maskval);
    1140:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pacman_y>
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	ee 0f       	add	r30, r30
    114c:	ff 1f       	adc	r31, r31
    114e:	e5 52       	subi	r30, 0x25	; 37
    1150:	fe 4f       	sbci	r31, 0xFE	; 254
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	00 90 d7 01 	lds	r0, 0x01D7	; 0x8001d7 <pacman_x>
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <move_pacman+0x2b2>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	0a 94       	dec	r0
    116a:	d2 f7       	brpl	.-12     	; 0x1160 <move_pacman+0x2aa>
    116c:	80 95       	com	r24
    116e:	90 95       	com	r25
    1170:	a0 95       	com	r26
    1172:	b0 95       	com	r27
    1174:	40 81       	ld	r20, Z
    1176:	51 81       	ldd	r21, Z+1	; 0x01
    1178:	62 81       	ldd	r22, Z+2	; 0x02
    117a:	73 81       	ldd	r23, Z+3	; 0x03
    117c:	84 23       	and	r24, r20
    117e:	95 23       	and	r25, r21
    1180:	a6 23       	and	r26, r22
    1182:	b7 23       	and	r27, r23
    1184:	80 83       	st	Z, r24
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	a2 83       	std	Z+2, r26	; 0x02
    118a:	b3 83       	std	Z+3, r27	; 0x03
	add_to_score(50);
    118c:	82 e3       	ldi	r24, 0x32	; 50
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <add_to_score>
	move_cursor (37, 8);
    1194:	68 e0       	ldi	r22, 0x08	; 8
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	85 e2       	ldi	r24, 0x25	; 37
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%13s", "Score: \n");
    11a0:	8d e4       	ldi	r24, 0x4D	; 77
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	9f 93       	push	r25
    11a6:	8f 93       	push	r24
    11a8:	86 e5       	ldi	r24, 0x56	; 86
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	9f 93       	push	r25
    11ae:	8f 93       	push	r24
    11b0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
	move_cursor(37,9);
    11b4:	69 e0       	ldi	r22, 0x09	; 9
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	85 e2       	ldi	r24, 0x25	; 37
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%11lu\n", get_score());
    11c0:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	7f 93       	push	r23
    11ca:	6f 93       	push	r22
    11cc:	8b e5       	ldi	r24, 0x5B	; 91
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	9f 93       	push	r25
    11d2:	8f 93       	push	r24
    11d4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
	if (get_score() > get_highscore()) {
    11d8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    11dc:	6b 01       	movw	r12, r22
    11de:	7c 01       	movw	r14, r24
    11e0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <get_highscore>
    11e4:	2d b7       	in	r18, 0x3d	; 61
    11e6:	3e b7       	in	r19, 0x3e	; 62
    11e8:	26 5f       	subi	r18, 0xF6	; 246
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	3e bf       	out	0x3e, r19	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	2d bf       	out	0x3d, r18	; 61
    11f6:	6c 15       	cp	r22, r12
    11f8:	7d 05       	cpc	r23, r13
    11fa:	8e 05       	cpc	r24, r14
    11fc:	9f 05       	cpc	r25, r15
    11fe:	20 f4       	brcc	.+8      	; 0x1208 <move_pacman+0x352>
		set_highscore(get_score()) ;
    1200:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <get_score>
    1204:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <set_highscore>
	}
	move_cursor(37, 10) ;
    1208:	6a e0       	ldi	r22, 0x0A	; 10
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	85 e2       	ldi	r24, 0x25	; 37
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%s", "High Score:\n");
    1214:	82 e6       	ldi	r24, 0x62	; 98
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	0e 94 33 13 	call	0x2666	; 0x2666 <puts>
	move_cursor(37,11);
    121c:	6b e0       	ldi	r22, 0x0B	; 11
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	85 e2       	ldi	r24, 0x25	; 37
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
	printf("%11lu\n", get_highscore() );
    1228:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <get_highscore>
    122c:	9f 93       	push	r25
    122e:	8f 93       	push	r24
    1230:	7f 93       	push	r23
    1232:	6f 93       	push	r22
    1234:	8b e5       	ldi	r24, 0x5B	; 91
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
    124c:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
    1250:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    1254:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
	}
	return 1;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	03 c0       	rjmp	.+6      	; 0x1262 <move_pacman+0x3ac>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <move_pacman+0x3ac>
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL)  {
		
		
		return 0;	// We can't move - wall is straight ahead
    1260:	80 e0       	ldi	r24, 0x00	; 0
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	08 95       	ret

00001274 <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
	if(!game_running) {
    127a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    127e:	99 23       	and	r25, r25
    1280:	a1 f0       	breq	.+40     	; 0x12aa <change_pacman_direction+0x36>
    1282:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
    1284:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
    1288:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
    128c:	48 2f       	mov	r20, r24
    128e:	61 2f       	mov	r22, r17
    1290:	8d 2f       	mov	r24, r29
    1292:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
    1296:	8e 3f       	cpi	r24, 0xFE	; 254
    1298:	51 f0       	breq	.+20     	; 0x12ae <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
    129a:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
    129e:	61 2f       	mov	r22, r17
    12a0:	8d 2f       	mov	r24, r29
    12a2:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		return 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	08 95       	ret

000012b8 <move_ghost>:


void move_ghost(int8_t ghostnum) {
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
	if(!game_running) {
    12c4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    12c8:	99 23       	and	r25, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <move_ghost+0x16>
    12cc:	06 c2       	rjmp	.+1036   	; 0x16da <move_ghost+0x422>
    12ce:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	ef 52       	subi	r30, 0x2F	; 47
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
    12da:	fc 01       	movw	r30, r24
    12dc:	e3 53       	subi	r30, 0x33	; 51
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
    12e2:	fc 01       	movw	r30, r24
    12e4:	e7 53       	subi	r30, 0x37	; 55
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
    12ea:	6f 2d       	mov	r22, r15
    12ec:	81 2f       	mov	r24, r17
    12ee:	0e 94 a2 04 	call	0x944	; 0x944 <determine_dirns_ghost_can_move_in>
    12f2:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
    12f4:	88 23       	and	r24, r24
    12f6:	09 f4       	brne	.+2      	; 0x12fa <move_ghost+0x42>
    12f8:	f0 c1       	rjmp	.+992    	; 0x16da <move_ghost+0x422>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
    12fa:	6f 2d       	mov	r22, r15
    12fc:	81 2f       	mov	r24, r17
    12fe:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <move_ghost+0x50>
    1306:	45 c1       	rjmp	.+650    	; 0x1592 <move_ghost+0x2da>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
    1308:	01 ff       	sbrs	r16, 1
    130a:	43 c1       	rjmp	.+646    	; 0x1592 <move_ghost+0x2da>
    130c:	be c1       	rjmp	.+892    	; 0x168a <move_ghost+0x3d2>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
    130e:	00 91 d7 01 	lds	r16, 0x01D7	; 0x8001d7 <pacman_x>
    1312:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
    1314:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <pacman_y>
    1318:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
    131a:	6f 2d       	mov	r22, r15
    131c:	81 2f       	mov	r24, r17
    131e:	0e 94 a2 04 	call	0x944	; 0x944 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
    1322:	88 23       	and	r24, r24
    1324:	09 f4       	brne	.+2      	; 0x1328 <move_ghost+0x70>
    1326:	d9 c1       	rjmp	.+946    	; 0x16da <move_ghost+0x422>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
    1328:	40 2f       	mov	r20, r16
    132a:	00 2e       	mov	r0, r16
    132c:	00 0c       	add	r0, r0
    132e:	55 0b       	sbc	r21, r21
    1330:	55 23       	and	r21, r21
    1332:	1c f4       	brge	.+6      	; 0x133a <move_ghost+0x82>
    1334:	51 95       	neg	r21
    1336:	41 95       	neg	r20
    1338:	51 09       	sbc	r21, r1
    133a:	2d 2f       	mov	r18, r29
    133c:	0d 2e       	mov	r0, r29
    133e:	00 0c       	add	r0, r0
    1340:	33 0b       	sbc	r19, r19
    1342:	33 23       	and	r19, r19
    1344:	1c f4       	brge	.+6      	; 0x134c <move_ghost+0x94>
    1346:	31 95       	neg	r19
    1348:	21 95       	neg	r18
    134a:	31 09       	sbc	r19, r1
    134c:	42 17       	cp	r20, r18
    134e:	53 07       	cpc	r21, r19
    1350:	4c f4       	brge	.+18     	; 0x1364 <move_ghost+0xac>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    1352:	dd 23       	and	r29, r29
    1354:	1c f4       	brge	.+6      	; 0x135c <move_ghost+0xa4>
			if(dirn_options & (1 << DIRN_UP)) {
    1356:	81 ff       	sbrs	r24, 1
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <move_ghost+0xac>
    135a:	97 c1       	rjmp	.+814    	; 0x168a <move_ghost+0x3d2>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    135c:	1d 16       	cp	r1, r29
    135e:	14 f4       	brge	.+4      	; 0x1364 <move_ghost+0xac>
			if(dirn_options & (1 << DIRN_DOWN)) {
    1360:	83 fd       	sbrc	r24, 3
    1362:	a7 c1       	rjmp	.+846    	; 0x16b2 <move_ghost+0x3fa>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    1364:	00 23       	and	r16, r16
    1366:	54 f4       	brge	.+20     	; 0x137c <move_ghost+0xc4>
		if(dirn_options & (1 << DIRN_LEFT)) {
    1368:	80 fd       	sbrc	r24, 0
    136a:	68 c1       	rjmp	.+720    	; 0x163c <move_ghost+0x384>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    136c:	dd 23       	and	r29, r29
    136e:	1c f4       	brge	.+6      	; 0x1376 <move_ghost+0xbe>
			if(dirn_options & (1 << DIRN_UP)) {
    1370:	81 ff       	sbrs	r24, 1
    1372:	60 c1       	rjmp	.+704    	; 0x1634 <move_ghost+0x37c>
    1374:	8a c1       	rjmp	.+788    	; 0x168a <move_ghost+0x3d2>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1376:	83 fd       	sbrc	r24, 3
    1378:	9c c1       	rjmp	.+824    	; 0x16b2 <move_ghost+0x3fa>
    137a:	5c c1       	rjmp	.+696    	; 0x1634 <move_ghost+0x37c>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    137c:	82 fd       	sbrc	r24, 2
    137e:	71 c1       	rjmp	.+738    	; 0x1662 <move_ghost+0x3aa>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    1380:	dd 23       	and	r29, r29
    1382:	1c f4       	brge	.+6      	; 0x138a <move_ghost+0xd2>
			if(dirn_options & (1 << DIRN_UP)) {
    1384:	81 ff       	sbrs	r24, 1
    1386:	14 c1       	rjmp	.+552    	; 0x15b0 <move_ghost+0x2f8>
    1388:	80 c1       	rjmp	.+768    	; 0x168a <move_ghost+0x3d2>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    138a:	83 fd       	sbrc	r24, 3
    138c:	92 c1       	rjmp	.+804    	; 0x16b2 <move_ghost+0x3fa>
    138e:	10 c1       	rjmp	.+544    	; 0x15b0 <move_ghost+0x2f8>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1394:	ab 01       	movw	r20, r22
    1396:	08 2e       	mov	r0, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <move_ghost+0xe6>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <move_ghost+0xe2>
    13a2:	40 fd       	sbrc	r20, 0
    13a4:	a0 c0       	rjmp	.+320    	; 0x14e6 <move_ghost+0x22e>
    13a6:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	91 05       	cpc	r25, r1
    13ac:	99 f7       	brne	.-26     	; 0x1394 <move_ghost+0xdc>
    13ae:	95 c1       	rjmp	.+810    	; 0x16da <move_ghost+0x422>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    13b0:	00 2e       	mov	r0, r16
    13b2:	00 0c       	add	r0, r0
    13b4:	11 0b       	sbc	r17, r17
    13b6:	4d 2f       	mov	r20, r29
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	c8 01       	movw	r24, r16
    13bc:	0d 2e       	mov	r0, r29
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <move_ghost+0x10c>
    13c0:	95 95       	asr	r25
    13c2:	87 95       	ror	r24
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <move_ghost+0x108>
    13c8:	80 fd       	sbrc	r24, 0
    13ca:	94 c0       	rjmp	.+296    	; 0x14f4 <move_ghost+0x23c>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    13cc:	dc 0f       	add	r29, r28
    13ce:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    13d0:	2d 2f       	mov	r18, r29
    13d2:	0d 2e       	mov	r0, r29
    13d4:	00 0c       	add	r0, r0
    13d6:	33 0b       	sbc	r19, r19
    13d8:	c8 01       	movw	r24, r16
    13da:	0d 2e       	mov	r0, r29
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <move_ghost+0x12a>
    13de:	95 95       	asr	r25
    13e0:	87 95       	ror	r24
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <move_ghost+0x126>
    13e6:	80 fd       	sbrc	r24, 0
    13e8:	85 c0       	rjmp	.+266    	; 0x14f4 <move_ghost+0x23c>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    13ea:	2e 5f       	subi	r18, 0xFE	; 254
    13ec:	3f 4f       	sbci	r19, 0xFF	; 255
    13ee:	23 70       	andi	r18, 0x03	; 3
    13f0:	30 78       	andi	r19, 0x80	; 128
    13f2:	33 23       	and	r19, r19
    13f4:	34 f4       	brge	.+12     	; 0x1402 <move_ghost+0x14a>
    13f6:	21 50       	subi	r18, 0x01	; 1
    13f8:	31 09       	sbc	r19, r1
    13fa:	2c 6f       	ori	r18, 0xFC	; 252
    13fc:	3f 6f       	ori	r19, 0xFF	; 255
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <move_ghost+0x152>
    1406:	15 95       	asr	r17
    1408:	07 95       	ror	r16
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <move_ghost+0x14e>
    140e:	00 fd       	sbrc	r16, 0
    1410:	6c c0       	rjmp	.+216    	; 0x14ea <move_ghost+0x232>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    1412:	9a 01       	movw	r18, r20
    1414:	2e 5f       	subi	r18, 0xFE	; 254
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	23 70       	andi	r18, 0x03	; 3
    141a:	30 78       	andi	r19, 0x80	; 128
    141c:	33 23       	and	r19, r19
    141e:	34 f4       	brge	.+12     	; 0x142c <move_ghost+0x174>
    1420:	21 50       	subi	r18, 0x01	; 1
    1422:	31 09       	sbc	r19, r1
    1424:	2c 6f       	ori	r18, 0xFC	; 252
    1426:	3f 6f       	ori	r19, 0xFF	; 255
    1428:	2f 5f       	subi	r18, 0xFF	; 255
    142a:	3f 4f       	sbci	r19, 0xFF	; 255
    142c:	d2 2f       	mov	r29, r18
    142e:	62 c0       	rjmp	.+196    	; 0x14f4 <move_ghost+0x23c>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    1430:	00 2e       	mov	r0, r16
    1432:	00 0c       	add	r0, r0
    1434:	11 0b       	sbc	r17, r17
    1436:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <pacman_direction>
    143a:	c8 01       	movw	r24, r16
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <move_ghost+0x18c>
    1440:	95 95       	asr	r25
    1442:	87 95       	ror	r24
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <move_ghost+0x188>
    1448:	80 ff       	sbrs	r24, 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <move_ghost+0x198>
				// That direction is one of the valid options
				return pacman_direction;
    144c:	d2 2f       	mov	r29, r18
    144e:	52 c0       	rjmp	.+164    	; 0x14f4 <move_ghost+0x23c>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    1450:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <random>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	99 27       	eor	r25, r25
    145c:	aa 27       	eor	r26, r26
    145e:	b0 78       	andi	r27, 0x80	; 128
    1460:	bb 23       	and	r27, r27
    1462:	54 f4       	brge	.+20     	; 0x1478 <move_ghost+0x1c0>
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	a1 09       	sbc	r26, r1
    1468:	b1 09       	sbc	r27, r1
    146a:	8c 6f       	ori	r24, 0xFC	; 252
    146c:	9f 6f       	ori	r25, 0xFF	; 255
    146e:	af 6f       	ori	r26, 0xFF	; 255
    1470:	bf 6f       	ori	r27, 0xFF	; 255
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	a1 1d       	adc	r26, r1
    1476:	b1 1d       	adc	r27, r1
    1478:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    147a:	68 2f       	mov	r22, r24
    147c:	88 0f       	add	r24, r24
    147e:	77 0b       	sbc	r23, r23
    1480:	9b 01       	movw	r18, r22
    1482:	23 70       	andi	r18, 0x03	; 3
    1484:	30 78       	andi	r19, 0x80	; 128
    1486:	33 23       	and	r19, r19
    1488:	34 f4       	brge	.+12     	; 0x1496 <move_ghost+0x1de>
    148a:	21 50       	subi	r18, 0x01	; 1
    148c:	31 09       	sbc	r19, r1
    148e:	2c 6f       	ori	r18, 0xFC	; 252
    1490:	3f 6f       	ori	r19, 0xFF	; 255
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    1496:	c8 01       	movw	r24, r16
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <move_ghost+0x1e8>
    149c:	95 95       	asr	r25
    149e:	87 95       	ror	r24
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <move_ghost+0x1e4>
    14a4:	80 fd       	sbrc	r24, 0
    14a6:	23 c0       	rjmp	.+70     	; 0x14ee <move_ghost+0x236>
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	04 2e       	mov	r0, r20
    14ae:	00 0c       	add	r0, r0
    14b0:	55 0b       	sbc	r21, r21
    14b2:	4c 5f       	subi	r20, 0xFC	; 252
    14b4:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    14b6:	cb 01       	movw	r24, r22
    14b8:	83 70       	andi	r24, 0x03	; 3
    14ba:	90 78       	andi	r25, 0x80	; 128
    14bc:	99 23       	and	r25, r25
    14be:	24 f4       	brge	.+8      	; 0x14c8 <move_ghost+0x210>
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	8c 6f       	ori	r24, 0xFC	; 252
    14c4:	9f 6f       	ori	r25, 0xFF	; 255
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    14ca:	f8 01       	movw	r30, r16
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <move_ghost+0x21a>
    14ce:	f5 95       	asr	r31
    14d0:	e7 95       	ror	r30
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <move_ghost+0x216>
    14d6:	e0 fd       	sbrc	r30, 0
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <move_ghost+0x23a>
    14da:	6f 5f       	subi	r22, 0xFF	; 255
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    14de:	64 17       	cp	r22, r20
    14e0:	75 07       	cpc	r23, r21
    14e2:	49 f7       	brne	.-46     	; 0x14b6 <move_ghost+0x1fe>
    14e4:	fa c0       	rjmp	.+500    	; 0x16da <move_ghost+0x422>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    14e6:	d8 2f       	mov	r29, r24
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <move_ghost+0x23c>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    14ea:	d2 2f       	mov	r29, r18
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <move_ghost+0x23c>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    14ee:	d2 2f       	mov	r29, r18
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <move_ghost+0x23c>
    14f2:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    14f4:	dd 23       	and	r29, r29
    14f6:	0c f4       	brge	.+2      	; 0x14fa <move_ghost+0x242>
    14f8:	f0 c0       	rjmp	.+480    	; 0x16da <move_ghost+0x422>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    14fa:	0c 2f       	mov	r16, r28
    14fc:	0c 2e       	mov	r0, r28
    14fe:	00 0c       	add	r0, r0
    1500:	11 0b       	sbc	r17, r17
    1502:	d8 01       	movw	r26, r16
    1504:	a3 53       	subi	r26, 0x33	; 51
    1506:	be 4f       	sbci	r27, 0xFE	; 254
    1508:	f8 01       	movw	r30, r16
    150a:	ef 52       	subi	r30, 0x2F	; 47
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	6c 91       	ld	r22, X
    1510:	80 81       	ld	r24, Z
    1512:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1516:	f8 01       	movw	r30, r16
    1518:	e7 53       	subi	r30, 0x37	; 55
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    151e:	d1 30       	cpi	r29, 0x01	; 1
    1520:	b9 f0       	breq	.+46     	; 0x1550 <move_ghost+0x298>
    1522:	1c f4       	brge	.+6      	; 0x152a <move_ghost+0x272>
    1524:	dd 23       	and	r29, r29
    1526:	31 f0       	breq	.+12     	; 0x1534 <move_ghost+0x27c>
    1528:	20 c0       	rjmp	.+64     	; 0x156a <move_ghost+0x2b2>
    152a:	d2 30       	cpi	r29, 0x02	; 2
    152c:	51 f0       	breq	.+20     	; 0x1542 <move_ghost+0x28a>
    152e:	d3 30       	cpi	r29, 0x03	; 3
    1530:	b1 f0       	breq	.+44     	; 0x155e <move_ghost+0x2a6>
    1532:	1b c0       	rjmp	.+54     	; 0x156a <move_ghost+0x2b2>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    1534:	f8 01       	movw	r30, r16
    1536:	ef 52       	subi	r30, 0x2F	; 47
    1538:	fe 4f       	sbci	r31, 0xFE	; 254
    153a:	80 81       	ld	r24, Z
    153c:	81 50       	subi	r24, 0x01	; 1
    153e:	80 83       	st	Z, r24
			break;
    1540:	14 c0       	rjmp	.+40     	; 0x156a <move_ghost+0x2b2>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    1542:	f8 01       	movw	r30, r16
    1544:	ef 52       	subi	r30, 0x2F	; 47
    1546:	fe 4f       	sbci	r31, 0xFE	; 254
    1548:	80 81       	ld	r24, Z
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	80 83       	st	Z, r24
			break;
    154e:	0d c0       	rjmp	.+26     	; 0x156a <move_ghost+0x2b2>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    1550:	f8 01       	movw	r30, r16
    1552:	e3 53       	subi	r30, 0x33	; 51
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	80 81       	ld	r24, Z
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	80 83       	st	Z, r24
			break;
    155c:	06 c0       	rjmp	.+12     	; 0x156a <move_ghost+0x2b2>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    155e:	f8 01       	movw	r30, r16
    1560:	e3 53       	subi	r30, 0x33	; 51
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 81       	ld	r24, Z
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    156a:	f8 01       	movw	r30, r16
    156c:	e3 53       	subi	r30, 0x33	; 51
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	40 81       	ld	r20, Z
    1572:	f8 01       	movw	r30, r16
    1574:	ef 52       	subi	r30, 0x2F	; 47
    1576:	fe 4f       	sbci	r31, 0xFE	; 254
    1578:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    157a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    157e:	68 13       	cpse	r22, r24
    1580:	55 c0       	rjmp	.+170    	; 0x162c <move_ghost+0x374>
    1582:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
    1586:	48 13       	cpse	r20, r24
    1588:	51 c0       	rjmp	.+162    	; 0x162c <move_ghost+0x374>
    158a:	19 c0       	rjmp	.+50     	; 0x15be <move_ghost+0x306>
	} else {
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
		
	}
	normal_display_mode();
    158c:	0e 94 42 11 	call	0x2284	; 0x2284 <normal_display_mode>
    1590:	a4 c0       	rjmp	.+328    	; 0x16da <move_ghost+0x422>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    1592:	c1 30       	cpi	r28, 0x01	; 1
    1594:	09 f4       	brne	.+2      	; 0x1598 <move_ghost+0x2e0>
    1596:	0c cf       	rjmp	.-488    	; 0x13b0 <move_ghost+0xf8>
    1598:	24 f4       	brge	.+8      	; 0x15a2 <move_ghost+0x2ea>
    159a:	cc 23       	and	r28, r28
    159c:	09 f4       	brne	.+2      	; 0x15a0 <move_ghost+0x2e8>
    159e:	b7 ce       	rjmp	.-658    	; 0x130e <move_ghost+0x56>
    15a0:	9c c0       	rjmp	.+312    	; 0x16da <move_ghost+0x422>
    15a2:	c2 30       	cpi	r28, 0x02	; 2
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <move_ghost+0x2f0>
    15a6:	44 cf       	rjmp	.-376    	; 0x1430 <move_ghost+0x178>
    15a8:	c3 30       	cpi	r28, 0x03	; 3
    15aa:	09 f4       	brne	.+2      	; 0x15ae <move_ghost+0x2f6>
    15ac:	01 cf       	rjmp	.-510    	; 0x13b0 <move_ghost+0xf8>
    15ae:	95 c0       	rjmp	.+298    	; 0x16da <move_ghost+0x422>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    15b0:	68 2f       	mov	r22, r24
    15b2:	08 2e       	mov	r0, r24
    15b4:	00 0c       	add	r0, r0
    15b6:	77 0b       	sbc	r23, r23
    15b8:	80 ff       	sbrs	r24, 0
    15ba:	ea ce       	rjmp	.-556    	; 0x1390 <move_ghost+0xd8>
    15bc:	3f c0       	rjmp	.+126    	; 0x163c <move_ghost+0x384>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		// Ghost has just moved into the pac-man. Lose 1 life.
		lives--;
    15be:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    15c2:	81 50       	subi	r24, 0x01	; 1
    15c4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <lives>
		move_cursor(37, 5 );
    15c8:	65 e0       	ldi	r22, 0x05	; 5
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	85 e2       	ldi	r24, 0x25	; 37
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
		printf(("Lives: %5d"), get_lives());
    15d4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <lives>
    15d8:	1f 92       	push	r1
    15da:	8f 93       	push	r24
    15dc:	82 e4       	ldi	r24, 0x42	; 66
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	9f 93       	push	r25
    15e2:	8f 93       	push	r24
    15e4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
		
		// We draw the background colour for the
		//ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    15e8:	f8 01       	movw	r30, r16
    15ea:	e2 56       	subi	r30, 0x62	; 98
    15ec:	fe 4f       	sbci	r31, 0xFE	; 254
    15ee:	80 81       	ld	r24, Z
    15f0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    15f4:	c8 01       	movw	r24, r16
    15f6:	83 53       	subi	r24, 0x33	; 51
    15f8:	9e 4f       	sbci	r25, 0xFE	; 254
    15fa:	7c 01       	movw	r14, r24
    15fc:	0f 52       	subi	r16, 0x2F	; 47
    15fe:	1e 4f       	sbci	r17, 0xFE	; 254
    1600:	fc 01       	movw	r30, r24
    1602:	60 81       	ld	r22, Z
    1604:	f8 01       	movw	r30, r16
    1606:	80 81       	ld	r24, Z
    1608:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		//Reset Ghost back to home. 
		ghost_x[ghostnum] = GHOST_HOME_X_LEFT ; 
    160c:	8c e0       	ldi	r24, 0x0C	; 12
    160e:	f8 01       	movw	r30, r16
    1610:	80 83       	st	Z, r24
		ghost_y[ghostnum] = GHOST_HOME_Y ; 
    1612:	8f e0       	ldi	r24, 0x0F	; 15
    1614:	f7 01       	movw	r30, r14
    1616:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(ghostnum, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
    1618:	4f e0       	ldi	r20, 0x0F	; 15
    161a:	6c e0       	ldi	r22, 0x0C	; 12
    161c:	8c 2f       	mov	r24, r28
    161e:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	b0 cf       	rjmp	.-160    	; 0x158c <move_ghost+0x2d4>
		
	} else {
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    162c:	8c 2f       	mov	r24, r28
    162e:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
    1632:	ac cf       	rjmp	.-168    	; 0x158c <move_ghost+0x2d4>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1634:	68 2f       	mov	r22, r24
    1636:	88 0f       	add	r24, r24
    1638:	77 0b       	sbc	r23, r23
    163a:	aa ce       	rjmp	.-684    	; 0x1390 <move_ghost+0xd8>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    163c:	0c 2f       	mov	r16, r28
    163e:	0c 2e       	mov	r0, r28
    1640:	00 0c       	add	r0, r0
    1642:	11 0b       	sbc	r17, r17
    1644:	d8 01       	movw	r26, r16
    1646:	a3 53       	subi	r26, 0x33	; 51
    1648:	be 4f       	sbci	r27, 0xFE	; 254
    164a:	f8 01       	movw	r30, r16
    164c:	ef 52       	subi	r30, 0x2F	; 47
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	6c 91       	ld	r22, X
    1652:	80 81       	ld	r24, Z
    1654:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1658:	f8 01       	movw	r30, r16
    165a:	e7 53       	subi	r30, 0x37	; 55
    165c:	fe 4f       	sbci	r31, 0xFE	; 254
    165e:	10 82       	st	Z, r1
    1660:	69 cf       	rjmp	.-302    	; 0x1534 <move_ghost+0x27c>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1662:	0c 2f       	mov	r16, r28
    1664:	0c 2e       	mov	r0, r28
    1666:	00 0c       	add	r0, r0
    1668:	11 0b       	sbc	r17, r17
    166a:	d8 01       	movw	r26, r16
    166c:	a3 53       	subi	r26, 0x33	; 51
    166e:	be 4f       	sbci	r27, 0xFE	; 254
    1670:	f8 01       	movw	r30, r16
    1672:	ef 52       	subi	r30, 0x2F	; 47
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	6c 91       	ld	r22, X
    1678:	80 81       	ld	r24, Z
    167a:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    167e:	f8 01       	movw	r30, r16
    1680:	e7 53       	subi	r30, 0x37	; 55
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	80 83       	st	Z, r24
    1688:	5c cf       	rjmp	.-328    	; 0x1542 <move_ghost+0x28a>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    168a:	0c 2f       	mov	r16, r28
    168c:	0c 2e       	mov	r0, r28
    168e:	00 0c       	add	r0, r0
    1690:	11 0b       	sbc	r17, r17
    1692:	d8 01       	movw	r26, r16
    1694:	a3 53       	subi	r26, 0x33	; 51
    1696:	be 4f       	sbci	r27, 0xFE	; 254
    1698:	f8 01       	movw	r30, r16
    169a:	ef 52       	subi	r30, 0x2F	; 47
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	6c 91       	ld	r22, X
    16a0:	80 81       	ld	r24, Z
    16a2:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    16a6:	f8 01       	movw	r30, r16
    16a8:	e7 53       	subi	r30, 0x37	; 55
    16aa:	fe 4f       	sbci	r31, 0xFE	; 254
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 83       	st	Z, r24
    16b0:	4f cf       	rjmp	.-354    	; 0x1550 <move_ghost+0x298>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    16b2:	0c 2f       	mov	r16, r28
    16b4:	0c 2e       	mov	r0, r28
    16b6:	00 0c       	add	r0, r0
    16b8:	11 0b       	sbc	r17, r17
    16ba:	d8 01       	movw	r26, r16
    16bc:	a3 53       	subi	r26, 0x33	; 51
    16be:	be 4f       	sbci	r27, 0xFE	; 254
    16c0:	f8 01       	movw	r30, r16
    16c2:	ef 52       	subi	r30, 0x2F	; 47
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	6c 91       	ld	r22, X
    16c8:	80 81       	ld	r24, Z
    16ca:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    16ce:	f8 01       	movw	r30, r16
    16d0:	e7 53       	subi	r30, 0x37	; 55
    16d2:	fe 4f       	sbci	r31, 0xFE	; 254
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	80 83       	st	Z, r24
    16d8:	42 cf       	rjmp	.-380    	; 0x155e <move_ghost+0x2a6>
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
		
	}
	normal_display_mode();
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	08 95       	ret

000016e8 <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    16ee:	91 11       	cpse	r25, r1
    16f0:	80 e0       	ldi	r24, 0x00	; 0
}
    16f2:	08 95       	ret

000016f4 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	20 91 d9 01 	lds	r18, 0x01D9	; 0x8001d9 <num_pacdots>
    16fa:	30 91 da 01 	lds	r19, 0x01DA	; 0x8001da <num_pacdots+0x1>
    16fe:	23 2b       	or	r18, r19
    1700:	09 f0       	breq	.+2      	; 0x1704 <is_level_complete+0x10>
    1702:	80 e0       	ldi	r24, 0x00	; 0
}
    1704:	08 95       	ret

00001706 <initialise_joystick>:
static uint8_t prev_dir =0; 
static uint32_t prev_time; 

void initialise_joystick(void){
	//Setup ADC
	ADMUX = (1 <<REFS0); 
    1706:	80 e4       	ldi	r24, 0x40	; 64
    1708:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 
    170c:	86 e8       	ldi	r24, 0x86	; 134
    170e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1712:	08 95       	ret

00001714 <joystick_dir>:
		; //wait
	}
	adc_y = ADC;  //read value 
}

uint8_t joystick_dir(void){
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 

}
static void get_ADCval(void){
	//x axis 
	ADMUX &= ~1; 
    1718:	ec e7       	ldi	r30, 0x7C	; 124
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	8e 7f       	andi	r24, 0xFE	; 254
    1720:	80 83       	st	Z, r24
	//convert ADC 
	ADCSRA |= (1<<ADSC) ; 
    1722:	ea e7       	ldi	r30, 0x7A	; 122
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 64       	ori	r24, 0x40	; 64
    172a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){
    172c:	80 81       	ld	r24, Z
    172e:	86 fd       	sbrc	r24, 6
    1730:	fd cf       	rjmp	.-6      	; 0x172c <joystick_dir+0x18>
		; //wait conversion. 
	}
	adc_x = ADC;  //read value 
    1732:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1736:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    173a:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <adc_x+0x1>
    173e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <adc_x>
	
	//read y axis 
	ADMUX |= 1; 
    1742:	ec e7       	ldi	r30, 0x7C	; 124
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); 
    174c:	ea e7       	ldi	r30, 0x7A	; 122
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 64       	ori	r24, 0x40	; 64
    1754:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){
    1756:	90 81       	ld	r25, Z
    1758:	89 2f       	mov	r24, r25
    175a:	80 74       	andi	r24, 0x40	; 64
    175c:	96 fd       	sbrc	r25, 6
    175e:	fb cf       	rjmp	.-10     	; 0x1756 <joystick_dir+0x42>
		; //wait
	}
	adc_y = ADC;  //read value 
    1760:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1764:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1768:	50 93 d9 02 	sts	0x02D9, r21	; 0x8002d9 <adc_y+0x1>
    176c:	40 93 d8 02 	sts	0x02D8, r20	; 0x8002d8 <adc_y>
uint8_t joystick_dir(void){
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
    1770:	20 91 da 02 	lds	r18, 0x02DA	; 0x8002da <adc_x>
    1774:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <adc_x+0x1>
    1778:	21 30       	cpi	r18, 0x01	; 1
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	39 07       	cpc	r19, r25
    177e:	08 f0       	brcs	.+2      	; 0x1782 <joystick_dir+0x6e>
    1780:	59 c0       	rjmp	.+178    	; 0x1834 <joystick_dir+0x120>
		direction = 4 ; 
	} else if (adc_x < 257){
    1782:	21 30       	cpi	r18, 0x01	; 1
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	39 07       	cpc	r19, r25
    1788:	08 f4       	brcc	.+2      	; 0x178c <joystick_dir+0x78>
    178a:	56 c0       	rjmp	.+172    	; 0x1838 <joystick_dir+0x124>
		direction = 3; 
	}else if (adc_y >768){
    178c:	41 30       	cpi	r20, 0x01	; 1
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	59 07       	cpc	r21, r25
    1792:	08 f0       	brcs	.+2      	; 0x1796 <joystick_dir+0x82>
    1794:	53 c0       	rjmp	.+166    	; 0x183c <joystick_dir+0x128>
		direction =1; 
	}else if (adc_y <257){
    1796:	41 30       	cpi	r20, 0x01	; 1
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	59 07       	cpc	r21, r25
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <joystick_dir+0x8c>
    179e:	50 c0       	rjmp	.+160    	; 0x1840 <joystick_dir+0x12c>
		direction = 2; 
	}else {
		if (prev_dir == 3){
    17a0:	d0 91 d7 02 	lds	r29, 0x02D7	; 0x8002d7 <prev_dir>
    17a4:	d3 30       	cpi	r29, 0x03	; 3
    17a6:	31 f4       	brne	.+12     	; 0x17b4 <joystick_dir+0xa0>
			// if adc_x < 386 then direction = direction, otherwise direction = middle
			direction = (adc_x <386 ? 3:-1) ; 
    17a8:	22 38       	cpi	r18, 0x82	; 130
    17aa:	31 40       	sbci	r19, 0x01	; 1
    17ac:	08 f4       	brcc	.+2      	; 0x17b0 <joystick_dir+0x9c>
    17ae:	51 c0       	rjmp	.+162    	; 0x1852 <joystick_dir+0x13e>
    17b0:	cf ef       	ldi	r28, 0xFF	; 255
    17b2:	30 c0       	rjmp	.+96     	; 0x1814 <joystick_dir+0x100>
		}
		else if(prev_dir == 1){
    17b4:	d1 30       	cpi	r29, 0x01	; 1
    17b6:	31 f4       	brne	.+12     	; 0x17c4 <joystick_dir+0xb0>
			direction = (adc_y > 641 ? 1:-1); 
    17b8:	42 38       	cpi	r20, 0x82	; 130
    17ba:	52 40       	sbci	r21, 0x02	; 2
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <joystick_dir+0xac>
    17be:	49 c0       	rjmp	.+146    	; 0x1852 <joystick_dir+0x13e>
    17c0:	cf ef       	ldi	r28, 0xFF	; 255
    17c2:	28 c0       	rjmp	.+80     	; 0x1814 <joystick_dir+0x100>
		}else if(prev_dir ==2){
    17c4:	d2 30       	cpi	r29, 0x02	; 2
    17c6:	31 f4       	brne	.+12     	; 0x17d4 <joystick_dir+0xc0>
			direction = (adc_y < 386 ? 2:-1); 
    17c8:	42 38       	cpi	r20, 0x82	; 130
    17ca:	51 40       	sbci	r21, 0x01	; 1
    17cc:	08 f4       	brcc	.+2      	; 0x17d0 <joystick_dir+0xbc>
    17ce:	41 c0       	rjmp	.+130    	; 0x1852 <joystick_dir+0x13e>
    17d0:	cf ef       	ldi	r28, 0xFF	; 255
    17d2:	20 c0       	rjmp	.+64     	; 0x1814 <joystick_dir+0x100>
		}else if (prev_dir == 4) {
    17d4:	d4 30       	cpi	r29, 0x04	; 4
    17d6:	d1 f5       	brne	.+116    	; 0x184c <joystick_dir+0x138>
			direction =(adc_x > 641 ? 4:-1); 
    17d8:	22 38       	cpi	r18, 0x82	; 130
    17da:	32 40       	sbci	r19, 0x02	; 2
    17dc:	d0 f5       	brcc	.+116    	; 0x1852 <joystick_dir+0x13e>
    17de:	cf ef       	ldi	r28, 0xFF	; 255
    17e0:	19 c0       	rjmp	.+50     	; 0x1814 <joystick_dir+0x100>
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
    17e2:	0e 94 82 11 	call	0x2304	; 0x2304 <get_current_time>
			if (current_time < prev_time + 300){
    17e6:	ab 01       	movw	r20, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	55 27       	eor	r21, r21
    17ec:	66 27       	eor	r22, r22
    17ee:	77 27       	eor	r23, r23
    17f0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <prev_time>
    17f4:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <prev_time+0x1>
    17f8:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <prev_time+0x2>
    17fc:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <prev_time+0x3>
    1800:	84 5d       	subi	r24, 0xD4	; 212
    1802:	9e 4f       	sbci	r25, 0xFE	; 254
    1804:	af 4f       	sbci	r26, 0xFF	; 255
    1806:	bf 4f       	sbci	r27, 0xFF	; 255
    1808:	48 17       	cp	r20, r24
    180a:	59 07       	cpc	r21, r25
    180c:	6a 07       	cpc	r22, r26
    180e:	7b 07       	cpc	r23, r27
    1810:	78 f0       	brcs	.+30     	; 0x1830 <joystick_dir+0x11c>
    1812:	cd 2f       	mov	r28, r29
				return -1 ; 
			}
		}
		prev_time = get_current_time() ; 
    1814:	0e 94 82 11 	call	0x2304	; 0x2304 <get_current_time>
    1818:	60 93 d3 02 	sts	0x02D3, r22	; 0x8002d3 <prev_time>
    181c:	70 93 d4 02 	sts	0x02D4, r23	; 0x8002d4 <prev_time+0x1>
    1820:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <prev_time+0x2>
    1824:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <prev_time+0x3>
		prev_dir = direction ; 
    1828:	c0 93 d7 02 	sts	0x02D7, r28	; 0x8002d7 <prev_dir>
    182c:	8c 2f       	mov	r24, r28
    182e:	14 c0       	rjmp	.+40     	; 0x1858 <joystick_dir+0x144>
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
			if (current_time < prev_time + 300){
				return -1 ; 
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	12 c0       	rjmp	.+36     	; 0x1858 <joystick_dir+0x144>
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
		direction = 4 ; 
    1834:	c4 e0       	ldi	r28, 0x04	; 4
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <joystick_dir+0x12e>
	} else if (adc_x < 257){
		direction = 3; 
    1838:	c3 e0       	ldi	r28, 0x03	; 3
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <joystick_dir+0x12e>
	}else if (adc_y >768){
		direction =1; 
    183c:	c1 e0       	ldi	r28, 0x01	; 1
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <joystick_dir+0x12e>
	}else if (adc_y <257){
		direction = 2; 
    1840:	c2 e0       	ldi	r28, 0x02	; 2
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
    1842:	d0 91 d7 02 	lds	r29, 0x02D7	; 0x8002d7 <prev_dir>
    1846:	cd 13       	cpse	r28, r29
    1848:	e5 cf       	rjmp	.-54     	; 0x1814 <joystick_dir+0x100>
    184a:	cb cf       	rjmp	.-106    	; 0x17e2 <joystick_dir+0xce>
			direction =(adc_x > 641 ? 4:-1); 
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
    184c:	dd 23       	and	r29, r29
    184e:	21 f0       	breq	.+8      	; 0x1858 <joystick_dir+0x144>
    1850:	c8 cf       	rjmp	.-112    	; 0x17e2 <joystick_dir+0xce>
		if(prev_dir == direction){
    1852:	d0 91 d7 02 	lds	r29, 0x02D7	; 0x8002d7 <prev_dir>
    1856:	c5 cf       	rjmp	.-118    	; 0x17e2 <joystick_dir+0xce>
		prev_dir = direction ; 
	}
	return direction ; 


    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    185e:	80 e8       	ldi	r24, 0x80	; 128
    1860:	0e 94 03 11 	call	0x2206	; 0x2206 <spi_setup_master>
    1864:	08 95       	ret

00001866 <ledmatrix_update_column>:
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	80 31       	cpi	r24, 0x10	; 16
    1870:	90 f4       	brcc	.+36     	; 0x1896 <ledmatrix_update_column+0x30>
    1872:	8b 01       	movw	r16, r22
    1874:	c8 2f       	mov	r28, r24
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    187c:	8c 2f       	mov	r24, r28
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    1884:	e8 01       	movw	r28, r16
    1886:	08 5f       	subi	r16, 0xF8	; 248
    1888:	1f 4f       	sbci	r17, 0xFF	; 255
    188a:	89 91       	ld	r24, Y+
    188c:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    1890:	c0 17       	cp	r28, r16
    1892:	d1 07       	cpc	r29, r17
    1894:	d1 f7       	brne	.-12     	; 0x188a <ledmatrix_update_column+0x24>
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <ledmatrix_shift_display_left>:
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    18a6:	82 e0       	ldi	r24, 0x02	; 2
    18a8:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    18ac:	08 95       	ret

000018ae <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    18ae:	8f e0       	ldi	r24, 0x0F	; 15
    18b0:	0e 94 2b 11 	call	0x2256	; 0x2256 <spi_send_byte>
    18b4:	08 95       	ret

000018b6 <initialise_hardware>:
	if (num==0){
		reset_lives();
	}else {
		set_lives(num);
	}
	display_lives(); 
    18b6:	0e 94 2f 0c 	call	0x185e	; 0x185e <ledmatrix_setup>
    18ba:	0e 94 83 0b 	call	0x1706	; 0x1706 <initialise_joystick>
    18be:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_button_interrupts>
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	7b e4       	ldi	r23, 0x4B	; 75
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 1b 10 	call	0x2036	; 0x2036 <init_serial_stdio>
    18d0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <init_timer0>
    18d4:	78 94       	sei
    18d6:	08 95       	ret

000018d8 <splash_screen>:
    18d8:	0e 94 4b 11 	call	0x2296	; 0x2296 <clear_terminal>
    18dc:	6a e0       	ldi	r22, 0x0A	; 10
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	8a e0       	ldi	r24, 0x0A	; 10
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    18e8:	8c e8       	ldi	r24, 0x8C	; 140
    18ea:	95 e0       	ldi	r25, 0x05	; 5
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    18f4:	6c e0       	ldi	r22, 0x0C	; 12
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	8a e0       	ldi	r24, 0x0A	; 10
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1900:	89 e6       	ldi	r24, 0x69	; 105
    1902:	95 e0       	ldi	r25, 0x05	; 5
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    190c:	6e e0       	ldi	r22, 0x0E	; 14
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	8a e0       	ldi	r24, 0x0A	; 10
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1918:	80 e5       	ldi	r24, 0x50	; 80
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    1924:	0e 94 57 0c 	call	0x18ae	; 0x18ae <ledmatrix_clear>
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	60 ef       	ldi	r22, 0xF0	; 240
    1936:	82 ea       	ldi	r24, 0xA2	; 162
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <set_scrolling_display_text>
    193e:	10 c0       	rjmp	.+32     	; 0x1960 <splash_screen+0x88>
    1940:	2f e7       	ldi	r18, 0x7F	; 127
    1942:	89 ea       	ldi	r24, 0xA9	; 169
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	21 50       	subi	r18, 0x01	; 1
    1948:	80 40       	sbci	r24, 0x00	; 0
    194a:	90 40       	sbci	r25, 0x00	; 0
    194c:	e1 f7       	brne	.-8      	; 0x1946 <splash_screen+0x6e>
    194e:	00 c0       	rjmp	.+0      	; 0x1950 <splash_screen+0x78>
    1950:	00 00       	nop
    1952:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1956:	8f 3f       	cpi	r24, 0xFF	; 255
    1958:	19 f0       	breq	.+6      	; 0x1960 <splash_screen+0x88>
    195a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <ledmatrix_clear>
    195e:	08 95       	ret
    1960:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <scroll_display>
    1964:	81 11       	cpse	r24, r1
    1966:	ec cf       	rjmp	.-40     	; 0x1940 <splash_screen+0x68>
    1968:	e5 cf       	rjmp	.-54     	; 0x1934 <splash_screen+0x5c>

0000196a <handle_level_complete>:
    196a:	6a e0       	ldi	r22, 0x0A	; 10
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	83 e2       	ldi	r24, 0x23	; 35
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1976:	81 e4       	ldi	r24, 0x41	; 65
    1978:	95 e0       	ldi	r25, 0x05	; 5
    197a:	9f 93       	push	r25
    197c:	8f 93       	push	r24
    197e:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    1982:	6b e0       	ldi	r22, 0x0B	; 11
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	83 e2       	ldi	r24, 0x23	; 35
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    198e:	80 e2       	ldi	r24, 0x20	; 32
    1990:	95 e0       	ldi	r25, 0x05	; 5
    1992:	9f 93       	push	r25
    1994:	8f 93       	push	r24
    1996:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    199a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <clear_serial_input_buffer>
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    19aa:	8f 3f       	cpi	r24, 0xFF	; 255
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <handle_level_complete+0x4c>
    19ae:	0e 94 62 10 	call	0x20c4	; 0x20c4 <serial_input_available>
    19b2:	88 23       	and	r24, r24
    19b4:	c1 f3       	breq	.-16     	; 0x19a6 <handle_level_complete+0x3c>
    19b6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <clear_serial_input_buffer>
    19ba:	08 95       	ret

000019bc <display_lives>:
    19bc:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_lives>
    19c0:	18 b8       	out	0x08, r1	; 8
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	11 f4       	brne	.+4      	; 0x19ca <display_lives+0xe>
    19c6:	88 b9       	out	0x08, r24	; 8
    19c8:	08 95       	ret
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	19 f4       	brne	.+6      	; 0x19d4 <display_lives+0x18>
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	88 b9       	out	0x08, r24	; 8
    19d2:	08 95       	ret
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	11 f4       	brne	.+4      	; 0x19dc <display_lives+0x20>
    19d8:	87 e0       	ldi	r24, 0x07	; 7
    19da:	88 b9       	out	0x08, r24	; 8
    19dc:	08 95       	ret

000019de <handle_game_over>:
    19de:	0e 94 de 0c 	call	0x19bc	; 0x19bc <display_lives>
    19e2:	6e e0       	ldi	r22, 0x0E	; 14
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	83 e2       	ldi	r24, 0x23	; 35
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    19ee:	86 e1       	ldi	r24, 0x16	; 22
    19f0:	95 e0       	ldi	r25, 0x05	; 5
    19f2:	9f 93       	push	r25
    19f4:	8f 93       	push	r24
    19f6:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    19fa:	60 e1       	ldi	r22, 0x10	; 16
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	83 e2       	ldi	r24, 0x23	; 35
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1a06:	88 ef       	ldi	r24, 0xF8	; 248
    1a08:	94 e0       	ldi	r25, 0x04	; 4
    1a0a:	9f 93       	push	r25
    1a0c:	8f 93       	push	r24
    1a0e:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1a1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1a20:	e1 f3       	breq	.-8      	; 0x1a1a <handle_game_over+0x3c>
    1a22:	08 95       	ret

00001a24 <new_game>:
    1a24:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <paused>
    1a28:	0e 94 55 07 	call	0xeaa	; 0xeaa <initialise_game>
    1a2c:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <init_score>
    1a30:	0e 94 9f 05 	call	0xb3e	; 0xb3e <reset_lives>
    1a34:	0e 94 de 0c 	call	0x19bc	; 0x19bc <display_lives>
    1a38:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1a3c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <clear_serial_input_buffer>
    1a40:	08 95       	ret

00001a42 <play_game>:
    1a42:	2f 92       	push	r2
    1a44:	3f 92       	push	r3
    1a46:	4f 92       	push	r4
    1a48:	5f 92       	push	r5
    1a4a:	6f 92       	push	r6
    1a4c:	7f 92       	push	r7
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	cf 92       	push	r12
    1a58:	df 92       	push	r13
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	60 97       	sbiw	r28, 0x10	; 16
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	0e 94 82 11 	call	0x2304	; 0x2304 <get_current_time>
    1a7a:	2b 01       	movw	r4, r22
    1a7c:	3c 01       	movw	r6, r24
    1a7e:	6d 87       	std	Y+13, r22	; 0x0d
    1a80:	7e 87       	std	Y+14, r23	; 0x0e
    1a82:	8f 87       	std	Y+15, r24	; 0x0f
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	69 87       	std	Y+9, r22	; 0x09
    1a88:	7a 87       	std	Y+10, r23	; 0x0a
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	9c 87       	std	Y+12, r25	; 0x0c
    1a8e:	6d 83       	std	Y+5, r22	; 0x05
    1a90:	7e 83       	std	Y+6, r23	; 0x06
    1a92:	8f 83       	std	Y+7, r24	; 0x07
    1a94:	98 87       	std	Y+8, r25	; 0x08
    1a96:	69 83       	std	Y+1, r22	; 0x01
    1a98:	7a 83       	std	Y+2, r23	; 0x02
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	91 2c       	mov	r9, r1
    1aa0:	0f 2e       	mov	r0, r31
    1aa2:	f5 e0       	ldi	r31, 0x05	; 5
    1aa4:	2f 2e       	mov	r2, r31
    1aa6:	f4 e0       	ldi	r31, 0x04	; 4
    1aa8:	3f 2e       	mov	r3, r31
    1aaa:	f0 2d       	mov	r31, r0
    1aac:	88 24       	eor	r8, r8
    1aae:	83 94       	inc	r8
    1ab0:	0f 2e       	mov	r0, r31
    1ab2:	f4 eb       	ldi	r31, 0xB4	; 180
    1ab4:	af 2e       	mov	r10, r31
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	bf 2e       	mov	r11, r31
    1aba:	f0 2d       	mov	r31, r0
    1abc:	0e c1       	rjmp	.+540    	; 0x1cda <play_game+0x298>
    1abe:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1ac2:	18 2f       	mov	r17, r24
    1ac4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <display_lives>
    1ac8:	1f 3f       	cpi	r17, 0xFF	; 255
    1aca:	09 f0       	breq	.+2      	; 0x1ace <play_game+0x8c>
    1acc:	0f c1       	rjmp	.+542    	; 0x1cec <play_game+0x2aa>
    1ace:	0e 94 62 10 	call	0x20c4	; 0x20c4 <serial_input_available>
    1ad2:	88 23       	and	r24, r24
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <play_game+0x96>
    1ad6:	0c c1       	rjmp	.+536    	; 0x1cf0 <play_game+0x2ae>
    1ad8:	f1 01       	movw	r30, r2
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	0e 94 b2 12 	call	0x2564	; 0x2564 <fgetc>
    1ae2:	08 2f       	mov	r16, r24
    1ae4:	91 10       	cpse	r9, r1
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <play_game+0xac>
    1ae8:	8b 31       	cpi	r24, 0x1B	; 27
    1aea:	59 f4       	brne	.+22     	; 0x1b02 <play_game+0xc0>
    1aec:	03 c1       	rjmp	.+518    	; 0x1cf4 <play_game+0x2b2>
    1aee:	f1 e0       	ldi	r31, 0x01	; 1
    1af0:	9f 12       	cpse	r9, r31
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <play_game+0xb8>
    1af4:	8b 35       	cpi	r24, 0x5B	; 91
    1af6:	29 f4       	brne	.+10     	; 0x1b02 <play_game+0xc0>
    1af8:	00 c1       	rjmp	.+512    	; 0x1cfa <play_game+0x2b8>
    1afa:	22 e0       	ldi	r18, 0x02	; 2
    1afc:	92 16       	cp	r9, r18
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <play_game+0xc0>
    1b00:	01 c1       	rjmp	.+514    	; 0x1d04 <play_game+0x2c2>
    1b02:	80 2f       	mov	r24, r16
    1b04:	8f 7d       	andi	r24, 0xDF	; 223
    1b06:	8e 34       	cpi	r24, 0x4E	; 78
    1b08:	29 f4       	brne	.+10     	; 0x1b14 <play_game+0xd2>
    1b0a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <new_game>
    1b0e:	91 2c       	mov	r9, r1
    1b10:	0f ef       	ldi	r16, 0xFF	; 255
    1b12:	2e c0       	rjmp	.+92     	; 0x1b70 <play_game+0x12e>
    1b14:	0f 7d       	andi	r16, 0xDF	; 223
    1b16:	00 35       	cpi	r16, 0x50	; 80
    1b18:	49 f5       	brne	.+82     	; 0x1b6c <play_game+0x12a>
    1b1a:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <paused>
    1b1e:	98 2d       	mov	r25, r8
    1b20:	81 11       	cpse	r24, r1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <paused>
    1b28:	81 11       	cpse	r24, r1
    1b2a:	11 c0       	rjmp	.+34     	; 0x1b4e <play_game+0x10c>
    1b2c:	64 e0       	ldi	r22, 0x04	; 4
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	85 e2       	ldi	r24, 0x25	; 37
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1b38:	8b ea       	ldi	r24, 0xAB	; 171
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	9f 93       	push	r25
    1b3e:	8f 93       	push	r24
    1b40:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	91 2c       	mov	r9, r1
    1b4a:	0f ef       	ldi	r16, 0xFF	; 255
    1b4c:	11 c0       	rjmp	.+34     	; 0x1b70 <play_game+0x12e>
    1b4e:	64 e0       	ldi	r22, 0x04	; 4
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	85 e2       	ldi	r24, 0x25	; 37
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0e 94 31 11 	call	0x2262	; 0x2262 <move_cursor>
    1b5a:	bf 92       	push	r11
    1b5c:	af 92       	push	r10
    1b5e:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <printf>
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	91 2c       	mov	r9, r1
    1b68:	0f ef       	ldi	r16, 0xFF	; 255
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <play_game+0x12e>
    1b6c:	91 2c       	mov	r9, r1
    1b6e:	0f ef       	ldi	r16, 0xFF	; 255
    1b70:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <paused>
    1b74:	81 11       	cpse	r24, r1
    1b76:	b1 c0       	rjmp	.+354    	; 0x1cda <play_game+0x298>
    1b78:	0e 94 8a 0b 	call	0x1714	; 0x1714 <joystick_dir>
    1b7c:	13 30       	cpi	r17, 0x03	; 3
    1b7e:	21 f0       	breq	.+8      	; 0x1b88 <play_game+0x146>
    1b80:	01 34       	cpi	r16, 0x41	; 65
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <play_game+0x146>
    1b84:	83 30       	cpi	r24, 0x03	; 3
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <play_game+0x14e>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	0e 94 3a 09 	call	0x1274	; 0x1274 <change_pacman_direction>
    1b8e:	1d c0       	rjmp	.+58     	; 0x1bca <play_game+0x188>
    1b90:	12 30       	cpi	r17, 0x02	; 2
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <play_game+0x15a>
    1b94:	07 35       	cpi	r16, 0x57	; 87
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <play_game+0x15a>
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	21 f4       	brne	.+8      	; 0x1ba4 <play_game+0x162>
    1b9c:	88 2d       	mov	r24, r8
    1b9e:	0e 94 3a 09 	call	0x1274	; 0x1274 <change_pacman_direction>
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <play_game+0x188>
    1ba4:	11 30       	cpi	r17, 0x01	; 1
    1ba6:	21 f0       	breq	.+8      	; 0x1bb0 <play_game+0x16e>
    1ba8:	03 35       	cpi	r16, 0x53	; 83
    1baa:	11 f0       	breq	.+4      	; 0x1bb0 <play_game+0x16e>
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <play_game+0x176>
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	0e 94 3a 09 	call	0x1274	; 0x1274 <change_pacman_direction>
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <play_game+0x188>
    1bb8:	11 23       	and	r17, r17
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <play_game+0x182>
    1bbc:	04 34       	cpi	r16, 0x44	; 68
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <play_game+0x182>
    1bc0:	84 30       	cpi	r24, 0x04	; 4
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <play_game+0x188>
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	0e 94 3a 09 	call	0x1274	; 0x1274 <change_pacman_direction>
    1bca:	0e 94 82 11 	call	0x2304	; 0x2304 <get_current_time>
    1bce:	6b 01       	movw	r12, r22
    1bd0:	7c 01       	movw	r14, r24
    1bd2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1bd6:	81 11       	cpse	r24, r1
    1bd8:	20 c0       	rjmp	.+64     	; 0x1c1a <play_game+0x1d8>
    1bda:	d3 01       	movw	r26, r6
    1bdc:	c2 01       	movw	r24, r4
    1bde:	80 57       	subi	r24, 0x70	; 112
    1be0:	9e 4f       	sbci	r25, 0xFE	; 254
    1be2:	af 4f       	sbci	r26, 0xFF	; 255
    1be4:	bf 4f       	sbci	r27, 0xFF	; 255
    1be6:	c8 16       	cp	r12, r24
    1be8:	d9 06       	cpc	r13, r25
    1bea:	ea 06       	cpc	r14, r26
    1bec:	fb 06       	cpc	r15, r27
    1bee:	a8 f0       	brcs	.+42     	; 0x1c1a <play_game+0x1d8>
    1bf0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <move_pacman>
    1bf4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <is_level_complete>
    1bf8:	88 23       	and	r24, r24
    1bfa:	69 f0       	breq	.+26     	; 0x1c16 <play_game+0x1d4>
    1bfc:	0e 94 b5 0c 	call	0x196a	; 0x196a <handle_level_complete>
    1c00:	0e 94 a3 05 	call	0xb46	; 0xb46 <initialise_game_level>
    1c04:	0e 94 82 11 	call	0x2304	; 0x2304 <get_current_time>
    1c08:	2b 01       	movw	r4, r22
    1c0a:	3c 01       	movw	r6, r24
    1c0c:	69 83       	std	Y+1, r22	; 0x01
    1c0e:	7a 83       	std	Y+2, r23	; 0x02
    1c10:	8b 83       	std	Y+3, r24	; 0x03
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <play_game+0x1d8>
    1c16:	26 01       	movw	r4, r12
    1c18:	37 01       	movw	r6, r14
    1c1a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1c1e:	81 11       	cpse	r24, r1
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <play_game+0x208>
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	ab 81       	ldd	r26, Y+3	; 0x03
    1c28:	bc 81       	ldd	r27, Y+4	; 0x04
    1c2a:	8c 55       	subi	r24, 0x5C	; 92
    1c2c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2e:	af 4f       	sbci	r26, 0xFF	; 255
    1c30:	bf 4f       	sbci	r27, 0xFF	; 255
    1c32:	c8 16       	cp	r12, r24
    1c34:	d9 06       	cpc	r13, r25
    1c36:	ea 06       	cpc	r14, r26
    1c38:	fb 06       	cpc	r15, r27
    1c3a:	38 f0       	brcs	.+14     	; 0x1c4a <play_game+0x208>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <move_ghost>
    1c42:	c9 82       	std	Y+1, r12	; 0x01
    1c44:	da 82       	std	Y+2, r13	; 0x02
    1c46:	eb 82       	std	Y+3, r14	; 0x03
    1c48:	fc 82       	std	Y+4, r15	; 0x04
    1c4a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <play_game+0x238>
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	af 81       	ldd	r26, Y+7	; 0x07
    1c58:	b8 85       	ldd	r27, Y+8	; 0x08
    1c5a:	8e 53       	subi	r24, 0x3E	; 62
    1c5c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c5e:	af 4f       	sbci	r26, 0xFF	; 255
    1c60:	bf 4f       	sbci	r27, 0xFF	; 255
    1c62:	c8 16       	cp	r12, r24
    1c64:	d9 06       	cpc	r13, r25
    1c66:	ea 06       	cpc	r14, r26
    1c68:	fb 06       	cpc	r15, r27
    1c6a:	38 f0       	brcs	.+14     	; 0x1c7a <play_game+0x238>
    1c6c:	88 2d       	mov	r24, r8
    1c6e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <move_ghost>
    1c72:	cd 82       	std	Y+5, r12	; 0x05
    1c74:	de 82       	std	Y+6, r13	; 0x06
    1c76:	ef 82       	std	Y+7, r14	; 0x07
    1c78:	f8 86       	std	Y+8, r15	; 0x08
    1c7a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <play_game+0x268>
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	ab 85       	ldd	r26, Y+11	; 0x0b
    1c88:	bc 85       	ldd	r27, Y+12	; 0x0c
    1c8a:	8c 50       	subi	r24, 0x0C	; 12
    1c8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c8e:	af 4f       	sbci	r26, 0xFF	; 255
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	c8 16       	cp	r12, r24
    1c94:	d9 06       	cpc	r13, r25
    1c96:	ea 06       	cpc	r14, r26
    1c98:	fb 06       	cpc	r15, r27
    1c9a:	38 f0       	brcs	.+14     	; 0x1caa <play_game+0x268>
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <move_ghost>
    1ca2:	c9 86       	std	Y+9, r12	; 0x09
    1ca4:	da 86       	std	Y+10, r13	; 0x0a
    1ca6:	eb 86       	std	Y+11, r14	; 0x0b
    1ca8:	fc 86       	std	Y+12, r15	; 0x0c
    1caa:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <play_game+0x298>
    1cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb6:	af 85       	ldd	r26, Y+15	; 0x0f
    1cb8:	b8 89       	ldd	r27, Y+16	; 0x10
    1cba:	86 5c       	subi	r24, 0xC6	; 198
    1cbc:	9d 4f       	sbci	r25, 0xFD	; 253
    1cbe:	af 4f       	sbci	r26, 0xFF	; 255
    1cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc2:	c8 16       	cp	r12, r24
    1cc4:	d9 06       	cpc	r13, r25
    1cc6:	ea 06       	cpc	r14, r26
    1cc8:	fb 06       	cpc	r15, r27
    1cca:	38 f0       	brcs	.+14     	; 0x1cda <play_game+0x298>
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <move_ghost>
    1cd2:	cd 86       	std	Y+13, r12	; 0x0d
    1cd4:	de 86       	std	Y+14, r13	; 0x0e
    1cd6:	ef 86       	std	Y+15, r14	; 0x0f
    1cd8:	f8 8a       	std	Y+16, r15	; 0x10
    1cda:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <is_game_over>
    1cde:	81 11       	cpse	r24, r1
    1ce0:	13 c0       	rjmp	.+38     	; 0x1d08 <play_game+0x2c6>
    1ce2:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_lives>
    1ce6:	81 11       	cpse	r24, r1
    1ce8:	ea ce       	rjmp	.-556    	; 0x1abe <play_game+0x7c>
    1cea:	0e c0       	rjmp	.+28     	; 0x1d08 <play_game+0x2c6>
    1cec:	0f ef       	ldi	r16, 0xFF	; 255
    1cee:	40 cf       	rjmp	.-384    	; 0x1b70 <play_game+0x12e>
    1cf0:	0f ef       	ldi	r16, 0xFF	; 255
    1cf2:	3e cf       	rjmp	.-388    	; 0x1b70 <play_game+0x12e>
    1cf4:	98 2c       	mov	r9, r8
    1cf6:	0f ef       	ldi	r16, 0xFF	; 255
    1cf8:	3b cf       	rjmp	.-394    	; 0x1b70 <play_game+0x12e>
    1cfa:	68 94       	set
    1cfc:	99 24       	eor	r9, r9
    1cfe:	91 f8       	bld	r9, 1
    1d00:	0f ef       	ldi	r16, 0xFF	; 255
    1d02:	36 cf       	rjmp	.-404    	; 0x1b70 <play_game+0x12e>
    1d04:	91 2c       	mov	r9, r1
    1d06:	34 cf       	rjmp	.-408    	; 0x1b70 <play_game+0x12e>
    1d08:	60 96       	adiw	r28, 0x10	; 16
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	df 90       	pop	r13
    1d22:	cf 90       	pop	r12
    1d24:	bf 90       	pop	r11
    1d26:	af 90       	pop	r10
    1d28:	9f 90       	pop	r9
    1d2a:	8f 90       	pop	r8
    1d2c:	7f 90       	pop	r7
    1d2e:	6f 90       	pop	r6
    1d30:	5f 90       	pop	r5
    1d32:	4f 90       	pop	r4
    1d34:	3f 90       	pop	r3
    1d36:	2f 90       	pop	r2
    1d38:	08 95       	ret

00001d3a <main>:
    1d3a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <initialise_hardware>
    1d3e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <splash_screen>
    1d42:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <new_game>
    1d46:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <play_game>
    1d4a:	0e 94 ef 0c 	call	0x19de	; 0x19de <handle_game_over>
    1d4e:	f9 cf       	rjmp	.-14     	; 0x1d42 <main+0x8>

00001d50 <is_paused>:
	
}

uint8_t is_paused(void){
	return paused;
    1d50:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <paused>
    1d54:	08 95       	ret

00001d56 <init_score>:
uint32_t score;
uint32_t high_score;

 
void init_score(void) {
	score = 0;
    1d56:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <score>
    1d5a:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <score+0x1>
    1d5e:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <score+0x2>
    1d62:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <score+0x3>
    1d66:	08 95       	ret

00001d68 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1d68:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <score>
    1d6c:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <score+0x1>
    1d70:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <score+0x2>
    1d74:	70 91 f0 02 	lds	r23, 0x02F0	; 0x8002f0 <score+0x3>
    1d78:	48 0f       	add	r20, r24
    1d7a:	59 1f       	adc	r21, r25
    1d7c:	61 1d       	adc	r22, r1
    1d7e:	71 1d       	adc	r23, r1
    1d80:	40 93 ed 02 	sts	0x02ED, r20	; 0x8002ed <score>
    1d84:	50 93 ee 02 	sts	0x02EE, r21	; 0x8002ee <score+0x1>
    1d88:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <score+0x2>
    1d8c:	70 93 f0 02 	sts	0x02F0, r23	; 0x8002f0 <score+0x3>
    1d90:	08 95       	ret

00001d92 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1d92:	60 91 ed 02 	lds	r22, 0x02ED	; 0x8002ed <score>
    1d96:	70 91 ee 02 	lds	r23, 0x02EE	; 0x8002ee <score+0x1>
    1d9a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <score+0x2>
    1d9e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <score+0x3>
}
    1da2:	08 95       	ret

00001da4 <set_highscore>:

void set_highscore (uint32_t value) {
	high_score= value ; 
    1da4:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <high_score>
    1da8:	70 93 ea 02 	sts	0x02EA, r23	; 0x8002ea <high_score+0x1>
    1dac:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <high_score+0x2>
    1db0:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <high_score+0x3>
    1db4:	08 95       	ret

00001db6 <get_highscore>:
}

uint32_t get_highscore(void){
		return high_score ; 	
    1db6:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <high_score>
    1dba:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <high_score+0x1>
    1dbe:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <high_score+0x2>
    1dc2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <high_score+0x3>
    1dc6:	08 95       	ret

00001dc8 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1dc8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    1dcc:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <display_string+0x1>
    1dd0:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <display_string>
	next_col_ptr = 0;
    1dd4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <next_col_ptr+0x1>
    1dd8:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <next_col_ptr>
	next_char_to_display = 0;
    1ddc:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <next_char_to_display+0x1>
    1de0:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <next_char_to_display>
    1de4:	08 95       	ret

00001de6 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	28 97       	sbiw	r28, 0x08	; 8
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1dfe:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <next_col_ptr>
    1e02:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <next_col_ptr+0x1>
    1e06:	30 97       	sbiw	r30, 0x00	; 0
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1e0a:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1e0c:	10 ff       	sbrs	r17, 0
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1e10:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <next_col_ptr+0x1>
    1e14:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	6b c0       	rjmp	.+214    	; 0x1ef2 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1e1c:	31 96       	adiw	r30, 0x01	; 1
    1e1e:	f0 93 e3 02 	sts	0x02E3, r31	; 0x8002e3 <next_col_ptr+0x1>
    1e22:	e0 93 e2 02 	sts	0x02E2, r30	; 0x8002e2 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1e26:	00 e0       	ldi	r16, 0x00	; 0
    1e28:	64 c0       	rjmp	.+200    	; 0x1ef2 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1e2a:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <next_char_to_display>
    1e2e:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <next_char_to_display+0x1>
    1e32:	30 97       	sbiw	r30, 0x00	; 0
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <scroll_display+0x52>
    1e36:	49 c0       	rjmp	.+146    	; 0x1eca <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1e38:	cf 01       	movw	r24, r30
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <next_char_to_display+0x1>
    1e40:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <next_char_to_display>
    1e44:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1e46:	e1 11       	cpse	r30, r1
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1e4a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <next_char_to_display+0x1>
    1e4e:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <next_char_to_display>
			shift_countdown = 16;
    1e52:	80 e1       	ldi	r24, 0x10	; 16
    1e54:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1e58:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	4a c0       	rjmp	.+148    	; 0x1ef2 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1e5e:	8f e9       	ldi	r24, 0x9F	; 159
    1e60:	8e 0f       	add	r24, r30
    1e62:	8a 31       	cpi	r24, 0x1A	; 26
    1e64:	70 f4       	brcc	.+28     	; 0x1e82 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	ee 0f       	add	r30, r30
    1e6a:	ff 1f       	adc	r31, r31
    1e6c:	ea 51       	subi	r30, 0x1A	; 26
    1e6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e70:	85 91       	lpm	r24, Z+
    1e72:	94 91       	lpm	r25, Z
    1e74:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <next_col_ptr+0x1>
    1e78:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	38 c0       	rjmp	.+112    	; 0x1ef2 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1e82:	8f eb       	ldi	r24, 0xBF	; 191
    1e84:	8e 0f       	add	r24, r30
    1e86:	8a 31       	cpi	r24, 0x1A	; 26
    1e88:	70 f4       	brcc	.+28     	; 0x1ea6 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ea 5d       	subi	r30, 0xDA	; 218
    1e92:	fa 4f       	sbci	r31, 0xFA	; 250
    1e94:	85 91       	lpm	r24, Z+
    1e96:	94 91       	lpm	r25, Z
    1e98:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <next_col_ptr+0x1>
    1e9c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ea0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ea2:	10 e0       	ldi	r17, 0x00	; 0
    1ea4:	26 c0       	rjmp	.+76     	; 0x1ef2 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1ea6:	80 ed       	ldi	r24, 0xD0	; 208
    1ea8:	8e 0f       	add	r24, r30
    1eaa:	8a 30       	cpi	r24, 0x0A	; 10
    1eac:	00 f5       	brcc	.+64     	; 0x1eee <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	ec 5c       	subi	r30, 0xCC	; 204
    1eb6:	fa 4f       	sbci	r31, 0xFA	; 250
    1eb8:	85 91       	lpm	r24, Z+
    1eba:	94 91       	lpm	r25, Z
    1ebc:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <next_col_ptr+0x1>
    1ec0:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ec4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1eca:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <display_string>
    1ece:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ed2:	01 e0       	ldi	r16, 0x01	; 1
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <scroll_display+0xf4>
    1ed8:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1eda:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <next_char_to_display+0x1>
    1ede:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <next_char_to_display>
		display_string = 0;
    1ee2:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <display_string+0x1>
    1ee6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1eee:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1ef2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1ef6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    1efa:	fe 01       	movw	r30, r28
    1efc:	38 96       	adiw	r30, 0x08	; 8
    1efe:	ce 01       	movw	r24, r28
    1f00:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1f02:	11 23       	and	r17, r17
    1f04:	14 f4       	brge	.+4      	; 0x1f0a <scroll_display+0x124>
			column_colour_data[i] = colour;
    1f06:	20 83       	st	Z, r18
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1f0a:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1f0c:	11 0f       	add	r17, r17
    1f0e:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1f10:	e8 17       	cp	r30, r24
    1f12:	f9 07       	cpc	r31, r25
    1f14:	b1 f7       	brne	.-20     	; 0x1f02 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1f16:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1f18:	be 01       	movw	r22, r28
    1f1a:	6f 5f       	subi	r22, 0xFF	; 255
    1f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1e:	8f e0       	ldi	r24, 0x0F	; 15
    1f20:	0e 94 33 0c 	call	0x1866	; 0x1866 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1f24:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <shift_countdown.1854>
    1f28:	88 23       	and	r24, r24
    1f2a:	89 f0       	breq	.+34     	; 0x1f4e <scroll_display+0x168>
		shift_countdown--;
    1f2c:	81 50       	subi	r24, 0x01	; 1
    1f2e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1f32:	00 23       	and	r16, r16
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <scroll_display+0x154>
    1f36:	88 23       	and	r24, r24
    1f38:	11 f0       	breq	.+4      	; 0x1f3e <scroll_display+0x158>
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <scroll_display+0x15e>
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <scroll_display+0x15e>
    1f42:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	99 23       	and	r25, r25
    1f48:	29 f0       	breq	.+10     	; 0x1f54 <scroll_display+0x16e>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1f4e:	00 23       	and	r16, r16
    1f50:	a1 f3       	breq	.-24     	; 0x1f3a <scroll_display+0x154>
    1f52:	f7 cf       	rjmp	.-18     	; 0x1f42 <scroll_display+0x15c>
	return !finished;
}
    1f54:	28 96       	adiw	r28, 0x08	; 8
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1f6a:	cf 93       	push	r28
    1f6c:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1f6e:	8a 30       	cpi	r24, 0x0A	; 10
    1f70:	19 f4       	brne	.+6      	; 0x1f78 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1f72:	8d e0       	ldi	r24, 0x0D	; 13
    1f74:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1f78:	9f b7       	in	r25, 0x3f	; 63
    1f7a:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1f7e:	99 23       	and	r25, r25
    1f80:	29 f1       	breq	.+74     	; 0x1fcc <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1f82:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    1f86:	8f 3f       	cpi	r24, 0xFF	; 255
    1f88:	d1 f3       	breq	.-12     	; 0x1f7e <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1f8a:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1f8c:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <out_insert_pos>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	8e 0f       	add	r24, r30
    1f94:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <out_insert_pos>
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	ed 50       	subi	r30, 0x0D	; 13
    1f9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f9e:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1fa0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1faa:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <out_insert_pos>
    1fae:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1fb2:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1fb6:	e1 ec       	ldi	r30, 0xC1	; 193
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 62       	ori	r24, 0x20	; 32
    1fbe:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1fc0:	99 23       	and	r25, r25
    1fc2:	39 f0       	breq	.+14     	; 0x1fd2 <uart_put_char+0x68>
		sei();
    1fc4:	78 94       	sei
	}
	return 0;
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
}
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1fda:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <bytes_in_input_buffer>
    1fde:	88 23       	and	r24, r24
    1fe0:	e1 f3       	breq	.-8      	; 0x1fda <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1fe2:	2f b7       	in	r18, 0x3f	; 63
    1fe4:	20 78       	andi	r18, 0x80	; 128
	cli();
    1fe6:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1fe8:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <input_insert_pos>
    1fec:	30 91 04 04 	lds	r19, 0x0404	; 0x800404 <bytes_in_input_buffer>
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	83 1b       	sub	r24, r19
    1ff4:	91 09       	sbc	r25, r1
    1ff6:	5a f4       	brpl	.+22     	; 0x200e <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1ff8:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <input_insert_pos>
    1ffc:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	e8 1b       	sub	r30, r24
    2004:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2006:	ed 5f       	subi	r30, 0xFD	; 253
    2008:	fb 4f       	sbci	r31, 0xFB	; 251
    200a:	80 81       	ld	r24, Z
    200c:	0a c0       	rjmp	.+20     	; 0x2022 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    200e:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <input_insert_pos>
    2012:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <bytes_in_input_buffer>
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	e8 1b       	sub	r30, r24
    201a:	f1 09       	sbc	r31, r1
    201c:	ed 50       	subi	r30, 0x0D	; 13
    201e:	fc 4f       	sbci	r31, 0xFC	; 252
    2020:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2022:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <bytes_in_input_buffer>
    2026:	91 50       	subi	r25, 0x01	; 1
    2028:	90 93 04 04 	sts	0x0404, r25	; 0x800404 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    202c:	22 23       	and	r18, r18
    202e:	09 f0       	breq	.+2      	; 0x2032 <uart_get_char+0x58>
		sei();
    2030:	78 94       	sei
	}	
	return c;
}
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	08 95       	ret

00002036 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2036:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <out_insert_pos>
	bytes_in_out_buffer = 0;
    203a:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <bytes_in_out_buffer>
	input_insert_pos = 0;
    203e:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <input_insert_pos>
	bytes_in_input_buffer = 0;
    2042:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <bytes_in_input_buffer>
	input_overrun = 0;
    2046:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    204a:	40 93 e4 02 	sts	0x02E4, r20	; 0x8002e4 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	aa 1f       	adc	r26, r26
    2058:	bb 1f       	adc	r27, r27
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	aa 1f       	adc	r26, r26
    2060:	bb 1f       	adc	r27, r27
    2062:	9c 01       	movw	r18, r24
    2064:	ad 01       	movw	r20, r26
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	44 1f       	adc	r20, r20
    206c:	55 1f       	adc	r21, r21
    206e:	60 e0       	ldi	r22, 0x00	; 0
    2070:	72 e1       	ldi	r23, 0x12	; 18
    2072:	8a e7       	ldi	r24, 0x7A	; 122
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 c9 11 	call	0x2392	; 0x2392 <__divmodsi4>
    207a:	ba 01       	movw	r22, r20
    207c:	a9 01       	movw	r20, r18
    207e:	4f 5f       	subi	r20, 0xFF	; 255
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	6f 4f       	sbci	r22, 0xFF	; 255
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	db 01       	movw	r26, r22
    2088:	ca 01       	movw	r24, r20
    208a:	1a f4       	brpl	.+6      	; 0x2092 <init_serial_stdio+0x5c>
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	a1 1d       	adc	r26, r1
    2090:	b1 1d       	adc	r27, r1
    2092:	b5 95       	asr	r27
    2094:	a7 95       	ror	r26
    2096:	97 95       	ror	r25
    2098:	87 95       	ror	r24
    209a:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    209c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    20a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    20a4:	e1 ec       	ldi	r30, 0xC1	; 193
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	88 e1       	ldi	r24, 0x18	; 24
    20aa:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    20ac:	80 81       	ld	r24, Z
    20ae:	80 68       	ori	r24, 0x80	; 128
    20b0:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    20b2:	e5 e0       	ldi	r30, 0x05	; 5
    20b4:	f4 e0       	ldi	r31, 0x04	; 4
    20b6:	85 e0       	ldi	r24, 0x05	; 5
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	93 83       	std	Z+3, r25	; 0x03
    20bc:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	80 83       	st	Z, r24
    20c2:	08 95       	ret

000020c4 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    20c4:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <bytes_in_input_buffer>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	91 11       	cpse	r25, r1
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <serial_input_available+0xc>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
}
    20d0:	08 95       	ret

000020d2 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    20d2:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <input_insert_pos>
	bytes_in_input_buffer = 0;
    20d6:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <bytes_in_input_buffer>
    20da:	08 95       	ret

000020dc <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	2f 93       	push	r18
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	ef 93       	push	r30
    20ee:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    20f0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    20f4:	88 23       	and	r24, r24
    20f6:	29 f1       	breq	.+74     	; 0x2142 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    20f8:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <out_insert_pos>
    20fc:	20 91 f2 02 	lds	r18, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	82 1b       	sub	r24, r18
    2104:	91 09       	sbc	r25, r1
    2106:	5a f4       	brpl	.+22     	; 0x211e <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2108:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <out_insert_pos>
    210c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	e8 1b       	sub	r30, r24
    2114:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    2116:	ee 50       	subi	r30, 0x0E	; 14
    2118:	fc 4f       	sbci	r31, 0xFC	; 252
    211a:	90 81       	ld	r25, Z
    211c:	0a c0       	rjmp	.+20     	; 0x2132 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    211e:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <out_insert_pos>
    2122:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	e8 1b       	sub	r30, r24
    212a:	f1 09       	sbc	r31, r1
    212c:	ed 50       	subi	r30, 0x0D	; 13
    212e:	fd 4f       	sbci	r31, 0xFD	; 253
    2130:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2132:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    2136:	81 50       	subi	r24, 0x01	; 1
    2138:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    213c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2140:	05 c0       	rjmp	.+10     	; 0x214c <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    2142:	e1 ec       	ldi	r30, 0xC1	; 193
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7d       	andi	r24, 0xDF	; 223
    214a:	80 83       	st	Z, r24
	}
}
    214c:	ff 91       	pop	r31
    214e:	ef 91       	pop	r30
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    2160:	1f 92       	push	r1
    2162:	0f 92       	push	r0
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	0f 92       	push	r0
    2168:	11 24       	eor	r1, r1
    216a:	2f 93       	push	r18
    216c:	3f 93       	push	r19
    216e:	4f 93       	push	r20
    2170:	5f 93       	push	r21
    2172:	6f 93       	push	r22
    2174:	7f 93       	push	r23
    2176:	8f 93       	push	r24
    2178:	9f 93       	push	r25
    217a:	af 93       	push	r26
    217c:	bf 93       	push	r27
    217e:	cf 93       	push	r28
    2180:	ef 93       	push	r30
    2182:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    2184:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    2188:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <do_echo>
    218c:	88 23       	and	r24, r24
    218e:	49 f0       	breq	.+18     	; 0x21a2 <__vector_20+0x42>
    2190:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <bytes_in_out_buffer>
    2194:	8f 3f       	cpi	r24, 0xFF	; 255
    2196:	29 f0       	breq	.+10     	; 0x21a2 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	8c 2f       	mov	r24, r28
    219e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    21a2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <bytes_in_input_buffer>
    21a6:	80 31       	cpi	r24, 0x10	; 16
    21a8:	20 f0       	brcs	.+8      	; 0x21b2 <__vector_20+0x52>
		input_overrun = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <input_overrun>
    21b0:	18 c0       	rjmp	.+48     	; 0x21e2 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    21b2:	cd 30       	cpi	r28, 0x0D	; 13
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <__vector_20+0x58>
			c = '\n';
    21b6:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    21b8:	e0 91 f2 03 	lds	r30, 0x03F2	; 0x8003f2 <input_insert_pos>
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	8e 0f       	add	r24, r30
    21c0:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <input_insert_pos>
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	ed 50       	subi	r30, 0x0D	; 13
    21c8:	fc 4f       	sbci	r31, 0xFC	; 252
    21ca:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    21cc:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <bytes_in_input_buffer>
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    21d6:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <input_insert_pos>
    21da:	80 31       	cpi	r24, 0x10	; 16
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    21de:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <input_insert_pos>
		}
	}
}
    21e2:	ff 91       	pop	r31
    21e4:	ef 91       	pop	r30
    21e6:	cf 91       	pop	r28
    21e8:	bf 91       	pop	r27
    21ea:	af 91       	pop	r26
    21ec:	9f 91       	pop	r25
    21ee:	8f 91       	pop	r24
    21f0:	7f 91       	pop	r23
    21f2:	6f 91       	pop	r22
    21f4:	5f 91       	pop	r21
    21f6:	4f 91       	pop	r20
    21f8:	3f 91       	pop	r19
    21fa:	2f 91       	pop	r18
    21fc:	0f 90       	pop	r0
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	0f 90       	pop	r0
    2202:	1f 90       	pop	r1
    2204:	18 95       	reti

00002206 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2206:	94 b1       	in	r25, 0x04	; 4
    2208:	90 6b       	ori	r25, 0xB0	; 176
    220a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    220c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    220e:	90 e5       	ldi	r25, 0x50	; 80
    2210:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2212:	88 30       	cpi	r24, 0x08	; 8
    2214:	21 f0       	breq	.+8      	; 0x221e <spi_setup_master+0x18>
    2216:	80 32       	cpi	r24, 0x20	; 32
    2218:	11 f0       	breq	.+4      	; 0x221e <spi_setup_master+0x18>
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	19 f4       	brne	.+6      	; 0x2224 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	9d bd       	out	0x2d, r25	; 45
			break;
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2224:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2226:	80 32       	cpi	r24, 0x20	; 32
    2228:	69 f0       	breq	.+26     	; 0x2244 <spi_setup_master+0x3e>
    222a:	28 f4       	brcc	.+10     	; 0x2236 <spi_setup_master+0x30>
    222c:	88 30       	cpi	r24, 0x08	; 8
    222e:	71 f0       	breq	.+28     	; 0x224c <spi_setup_master+0x46>
    2230:	80 31       	cpi	r24, 0x10	; 16
    2232:	61 f0       	breq	.+24     	; 0x224c <spi_setup_master+0x46>
    2234:	0e c0       	rjmp	.+28     	; 0x2252 <spi_setup_master+0x4c>
    2236:	80 34       	cpi	r24, 0x40	; 64
    2238:	29 f0       	breq	.+10     	; 0x2244 <spi_setup_master+0x3e>
    223a:	80 38       	cpi	r24, 0x80	; 128
    223c:	51 f4       	brne	.+20     	; 0x2252 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    223e:	8c b5       	in	r24, 0x2c	; 44
    2240:	81 60       	ori	r24, 0x01	; 1
    2242:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2244:	8c b5       	in	r24, 0x2c	; 44
    2246:	82 60       	ori	r24, 0x02	; 2
    2248:	8c bd       	out	0x2c, r24	; 44
			break;
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    224c:	8c b5       	in	r24, 0x2c	; 44
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2252:	2c 98       	cbi	0x05, 4	; 5
    2254:	08 95       	ret

00002256 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    2256:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2258:	0d b4       	in	r0, 0x2d	; 45
    225a:	07 fe       	sbrs	r0, 7
    225c:	fd cf       	rjmp	.-6      	; 0x2258 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    225e:	8e b5       	in	r24, 0x2e	; 46
    2260:	08 95       	ret

00002262 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    2262:	9f 93       	push	r25
    2264:	8f 93       	push	r24
    2266:	7f 93       	push	r23
    2268:	6f 93       	push	r22
    226a:	89 e8       	ldi	r24, 0x89	; 137
    226c:	96 e0       	ldi	r25, 0x06	; 6
    226e:	9f 93       	push	r25
    2270:	8f 93       	push	r24
    2272:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	08 95       	ret

00002284 <normal_display_mode>:
    2284:	84 e8       	ldi	r24, 0x84	; 132
    2286:	96 e0       	ldi	r25, 0x06	; 6
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	08 95       	ret

00002296 <clear_terminal>:
    2296:	8f e7       	ldi	r24, 0x7F	; 127
    2298:	96 e0       	ldi	r25, 0x06	; 6
    229a:	9f 93       	push	r25
    229c:	8f 93       	push	r24
    229e:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	08 95       	ret

000022a8 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    22a8:	1f 92       	push	r1
    22aa:	8f 93       	push	r24
    22ac:	89 e7       	ldi	r24, 0x79	; 121
    22ae:	96 e0       	ldi	r25, 0x06	; 6
    22b0:	9f 93       	push	r25
    22b2:	8f 93       	push	r24
    22b4:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
}
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	08 95       	ret

000022c2 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    22c2:	82 e7       	ldi	r24, 0x72	; 114
    22c4:	96 e0       	ldi	r25, 0x06	; 6
    22c6:	9f 93       	push	r25
    22c8:	8f 93       	push	r24
    22ca:	0e 94 06 13 	call	0x260c	; 0x260c <printf_P>
}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	08 95       	ret

000022d4 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    22d4:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <clockTicks>
    22d8:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <clockTicks+0x1>
    22dc:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <clockTicks+0x2>
    22e0:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    22e4:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    22e6:	8c e7       	ldi	r24, 0x7C	; 124
    22e8:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    22f2:	ee e6       	ldi	r30, 0x6E	; 110
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    22fc:	85 b3       	in	r24, 0x15	; 21
    22fe:	82 70       	andi	r24, 0x02	; 2
    2300:	85 bb       	out	0x15, r24	; 21
    2302:	08 95       	ret

00002304 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    2304:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2306:	f8 94       	cli
	returnValue = clockTicks;
    2308:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <clockTicks>
    230c:	70 91 e6 02 	lds	r23, 0x02E6	; 0x8002e6 <clockTicks+0x1>
    2310:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <clockTicks+0x2>
    2314:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <clockTicks+0x3>
	if(interruptsOn) {
    2318:	22 23       	and	r18, r18
    231a:	0c f4       	brge	.+2      	; 0x231e <get_current_time+0x1a>
		sei();
    231c:	78 94       	sei
	}
	return returnValue;
}
    231e:	08 95       	ret

00002320 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
	/* Increment our clock tick count if pause status is 0 (i.e. Resumed) */
	if (is_paused() == 0){
    2342:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <is_paused>
    2346:	81 11       	cpse	r24, r1
    2348:	13 c0       	rjmp	.+38     	; 0x2370 <__vector_16+0x50>
		clockTicks++;
    234a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <clockTicks>
    234e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <clockTicks+0x1>
    2352:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <clockTicks+0x2>
    2356:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <clockTicks+0x3>
    235a:	01 96       	adiw	r24, 0x01	; 1
    235c:	a1 1d       	adc	r26, r1
    235e:	b1 1d       	adc	r27, r1
    2360:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <clockTicks>
    2364:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <clockTicks+0x1>
    2368:	a0 93 e7 02 	sts	0x02E7, r26	; 0x8002e7 <clockTicks+0x2>
    236c:	b0 93 e8 02 	sts	0x02E8, r27	; 0x8002e8 <clockTicks+0x3>
	}
}
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <__divmodsi4>:
    2392:	05 2e       	mov	r0, r21
    2394:	97 fb       	bst	r25, 7
    2396:	1e f4       	brtc	.+6      	; 0x239e <__divmodsi4+0xc>
    2398:	00 94       	com	r0
    239a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__negsi2>
    239e:	57 fd       	sbrc	r21, 7
    23a0:	07 d0       	rcall	.+14     	; 0x23b0 <__divmodsi4_neg2>
    23a2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <__udivmodsi4>
    23a6:	07 fc       	sbrc	r0, 7
    23a8:	03 d0       	rcall	.+6      	; 0x23b0 <__divmodsi4_neg2>
    23aa:	4e f4       	brtc	.+18     	; 0x23be <__divmodsi4_exit>
    23ac:	0c 94 e0 11 	jmp	0x23c0	; 0x23c0 <__negsi2>

000023b0 <__divmodsi4_neg2>:
    23b0:	50 95       	com	r21
    23b2:	40 95       	com	r20
    23b4:	30 95       	com	r19
    23b6:	21 95       	neg	r18
    23b8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ba:	4f 4f       	sbci	r20, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255

000023be <__divmodsi4_exit>:
    23be:	08 95       	ret

000023c0 <__negsi2>:
    23c0:	90 95       	com	r25
    23c2:	80 95       	com	r24
    23c4:	70 95       	com	r23
    23c6:	61 95       	neg	r22
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	8f 4f       	sbci	r24, 0xFF	; 255
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	08 95       	ret

000023d0 <__tablejump2__>:
    23d0:	ee 0f       	add	r30, r30
    23d2:	ff 1f       	adc	r31, r31
    23d4:	05 90       	lpm	r0, Z+
    23d6:	f4 91       	lpm	r31, Z
    23d8:	e0 2d       	mov	r30, r0
    23da:	09 94       	ijmp

000023dc <__udivmodsi4>:
    23dc:	a1 e2       	ldi	r26, 0x21	; 33
    23de:	1a 2e       	mov	r1, r26
    23e0:	aa 1b       	sub	r26, r26
    23e2:	bb 1b       	sub	r27, r27
    23e4:	fd 01       	movw	r30, r26
    23e6:	0d c0       	rjmp	.+26     	; 0x2402 <__udivmodsi4_ep>

000023e8 <__udivmodsi4_loop>:
    23e8:	aa 1f       	adc	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	ee 1f       	adc	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	a2 17       	cp	r26, r18
    23f2:	b3 07       	cpc	r27, r19
    23f4:	e4 07       	cpc	r30, r20
    23f6:	f5 07       	cpc	r31, r21
    23f8:	20 f0       	brcs	.+8      	; 0x2402 <__udivmodsi4_ep>
    23fa:	a2 1b       	sub	r26, r18
    23fc:	b3 0b       	sbc	r27, r19
    23fe:	e4 0b       	sbc	r30, r20
    2400:	f5 0b       	sbc	r31, r21

00002402 <__udivmodsi4_ep>:
    2402:	66 1f       	adc	r22, r22
    2404:	77 1f       	adc	r23, r23
    2406:	88 1f       	adc	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	1a 94       	dec	r1
    240c:	69 f7       	brne	.-38     	; 0x23e8 <__udivmodsi4_loop>
    240e:	60 95       	com	r22
    2410:	70 95       	com	r23
    2412:	80 95       	com	r24
    2414:	90 95       	com	r25
    2416:	9b 01       	movw	r18, r22
    2418:	ac 01       	movw	r20, r24
    241a:	bd 01       	movw	r22, r26
    241c:	cf 01       	movw	r24, r30
    241e:	08 95       	ret

00002420 <random_r>:
    2420:	8f 92       	push	r8
    2422:	9f 92       	push	r9
    2424:	af 92       	push	r10
    2426:	bf 92       	push	r11
    2428:	cf 92       	push	r12
    242a:	df 92       	push	r13
    242c:	ef 92       	push	r14
    242e:	ff 92       	push	r15
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	ec 01       	movw	r28, r24
    2436:	68 81       	ld	r22, Y
    2438:	79 81       	ldd	r23, Y+1	; 0x01
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	61 15       	cp	r22, r1
    2440:	71 05       	cpc	r23, r1
    2442:	81 05       	cpc	r24, r1
    2444:	91 05       	cpc	r25, r1
    2446:	21 f4       	brne	.+8      	; 0x2450 <random_r+0x30>
    2448:	64 e2       	ldi	r22, 0x24	; 36
    244a:	79 ed       	ldi	r23, 0xD9	; 217
    244c:	8b e5       	ldi	r24, 0x5B	; 91
    244e:	97 e0       	ldi	r25, 0x07	; 7
    2450:	2d e1       	ldi	r18, 0x1D	; 29
    2452:	33 ef       	ldi	r19, 0xF3	; 243
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	0e 94 c9 11 	call	0x2392	; 0x2392 <__divmodsi4>
    245c:	49 01       	movw	r8, r18
    245e:	5a 01       	movw	r10, r20
    2460:	9b 01       	movw	r18, r22
    2462:	ac 01       	movw	r20, r24
    2464:	a7 ea       	ldi	r26, 0xA7	; 167
    2466:	b1 e4       	ldi	r27, 0x41	; 65
    2468:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__muluhisi3>
    246c:	6b 01       	movw	r12, r22
    246e:	7c 01       	movw	r14, r24
    2470:	ac ee       	ldi	r26, 0xEC	; 236
    2472:	b4 ef       	ldi	r27, 0xF4	; 244
    2474:	a5 01       	movw	r20, r10
    2476:	94 01       	movw	r18, r8
    2478:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__mulohisi3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8c 0d       	add	r24, r12
    2482:	9d 1d       	adc	r25, r13
    2484:	ae 1d       	adc	r26, r14
    2486:	bf 1d       	adc	r27, r15
    2488:	b7 ff       	sbrs	r27, 7
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <random_r+0x72>
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	a1 09       	sbc	r26, r1
    2490:	b0 48       	sbci	r27, 0x80	; 128
    2492:	88 83       	st	Y, r24
    2494:	99 83       	std	Y+1, r25	; 0x01
    2496:	aa 83       	std	Y+2, r26	; 0x02
    2498:	bb 83       	std	Y+3, r27	; 0x03
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	9f 77       	andi	r25, 0x7F	; 127
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	08 95       	ret

000024b6 <random>:
    24b6:	8f 92       	push	r8
    24b8:	9f 92       	push	r9
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    24ca:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    24ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    24d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    24d6:	61 15       	cp	r22, r1
    24d8:	71 05       	cpc	r23, r1
    24da:	81 05       	cpc	r24, r1
    24dc:	91 05       	cpc	r25, r1
    24de:	21 f4       	brne	.+8      	; 0x24e8 <random+0x32>
    24e0:	64 e2       	ldi	r22, 0x24	; 36
    24e2:	79 ed       	ldi	r23, 0xD9	; 217
    24e4:	8b e5       	ldi	r24, 0x5B	; 91
    24e6:	97 e0       	ldi	r25, 0x07	; 7
    24e8:	2d e1       	ldi	r18, 0x1D	; 29
    24ea:	33 ef       	ldi	r19, 0xF3	; 243
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	0e 94 c9 11 	call	0x2392	; 0x2392 <__divmodsi4>
    24f4:	49 01       	movw	r8, r18
    24f6:	5a 01       	movw	r10, r20
    24f8:	9b 01       	movw	r18, r22
    24fa:	ac 01       	movw	r20, r24
    24fc:	a7 ea       	ldi	r26, 0xA7	; 167
    24fe:	b1 e4       	ldi	r27, 0x41	; 65
    2500:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__muluhisi3>
    2504:	6b 01       	movw	r12, r22
    2506:	7c 01       	movw	r14, r24
    2508:	ac ee       	ldi	r26, 0xEC	; 236
    250a:	b4 ef       	ldi	r27, 0xF4	; 244
    250c:	a5 01       	movw	r20, r10
    250e:	94 01       	movw	r18, r8
    2510:	0e 94 02 16 	call	0x2c04	; 0x2c04 <__mulohisi3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8c 0d       	add	r24, r12
    251a:	9d 1d       	adc	r25, r13
    251c:	ae 1d       	adc	r26, r14
    251e:	bf 1d       	adc	r27, r15
    2520:	b7 ff       	sbrs	r27, 7
    2522:	03 c0       	rjmp	.+6      	; 0x252a <random+0x74>
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	a1 09       	sbc	r26, r1
    2528:	b0 48       	sbci	r27, 0x80	; 128
    252a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    252e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2532:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2536:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	9f 77       	andi	r25, 0x7F	; 127
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	9f 90       	pop	r9
    254e:	8f 90       	pop	r8
    2550:	08 95       	ret

00002552 <srandom>:
    2552:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    2556:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    255a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    255e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    2562:	08 95       	ret

00002564 <fgetc>:
    2564:	cf 93       	push	r28
    2566:	df 93       	push	r29
    2568:	ec 01       	movw	r28, r24
    256a:	2b 81       	ldd	r18, Y+3	; 0x03
    256c:	20 ff       	sbrs	r18, 0
    256e:	33 c0       	rjmp	.+102    	; 0x25d6 <fgetc+0x72>
    2570:	26 ff       	sbrs	r18, 6
    2572:	0a c0       	rjmp	.+20     	; 0x2588 <fgetc+0x24>
    2574:	2f 7b       	andi	r18, 0xBF	; 191
    2576:	2b 83       	std	Y+3, r18	; 0x03
    2578:	8e 81       	ldd	r24, Y+6	; 0x06
    257a:	9f 81       	ldd	r25, Y+7	; 0x07
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	9f 83       	std	Y+7, r25	; 0x07
    2580:	8e 83       	std	Y+6, r24	; 0x06
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	29 c0       	rjmp	.+82     	; 0x25da <fgetc+0x76>
    2588:	22 ff       	sbrs	r18, 2
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <fgetc+0x46>
    258c:	e8 81       	ld	r30, Y
    258e:	f9 81       	ldd	r31, Y+1	; 0x01
    2590:	80 81       	ld	r24, Z
    2592:	08 2e       	mov	r0, r24
    2594:	00 0c       	add	r0, r0
    2596:	99 0b       	sbc	r25, r25
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	19 f4       	brne	.+6      	; 0x25a2 <fgetc+0x3e>
    259c:	20 62       	ori	r18, 0x20	; 32
    259e:	2b 83       	std	Y+3, r18	; 0x03
    25a0:	1a c0       	rjmp	.+52     	; 0x25d6 <fgetc+0x72>
    25a2:	31 96       	adiw	r30, 0x01	; 1
    25a4:	f9 83       	std	Y+1, r31	; 0x01
    25a6:	e8 83       	st	Y, r30
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <fgetc+0x62>
    25aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    25ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    25ae:	09 95       	icall
    25b0:	97 ff       	sbrs	r25, 7
    25b2:	09 c0       	rjmp	.+18     	; 0x25c6 <fgetc+0x62>
    25b4:	2b 81       	ldd	r18, Y+3	; 0x03
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	11 f0       	breq	.+4      	; 0x25be <fgetc+0x5a>
    25ba:	80 e2       	ldi	r24, 0x20	; 32
    25bc:	01 c0       	rjmp	.+2      	; 0x25c0 <fgetc+0x5c>
    25be:	80 e1       	ldi	r24, 0x10	; 16
    25c0:	82 2b       	or	r24, r18
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <fgetc+0x72>
    25c6:	2e 81       	ldd	r18, Y+6	; 0x06
    25c8:	3f 81       	ldd	r19, Y+7	; 0x07
    25ca:	2f 5f       	subi	r18, 0xFF	; 255
    25cc:	3f 4f       	sbci	r19, 0xFF	; 255
    25ce:	3f 83       	std	Y+7, r19	; 0x07
    25d0:	2e 83       	std	Y+6, r18	; 0x06
    25d2:	99 27       	eor	r25, r25
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <fgetc+0x76>
    25d6:	8f ef       	ldi	r24, 0xFF	; 255
    25d8:	9f ef       	ldi	r25, 0xFF	; 255
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <printf>:
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e6 ef       	ldi	r30, 0xF6	; 246
    25e6:	f2 e1       	ldi	r31, 0x12	; 18
    25e8:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__prologue_saves__+0x20>
    25ec:	ae 01       	movw	r20, r28
    25ee:	4b 5f       	subi	r20, 0xFB	; 251
    25f0:	5f 4f       	sbci	r21, 0xFF	; 255
    25f2:	fa 01       	movw	r30, r20
    25f4:	61 91       	ld	r22, Z+
    25f6:	71 91       	ld	r23, Z+
    25f8:	af 01       	movw	r20, r30
    25fa:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <__iob+0x2>
    25fe:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <__iob+0x3>
    2602:	0e 94 63 13 	call	0x26c6	; 0x26c6 <vfprintf>
    2606:	e2 e0       	ldi	r30, 0x02	; 2
    2608:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__epilogue_restores__+0x20>

0000260c <printf_P>:
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ec e0       	ldi	r30, 0x0C	; 12
    2612:	f3 e1       	ldi	r31, 0x13	; 19
    2614:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__prologue_saves__+0x1c>
    2618:	ae 01       	movw	r20, r28
    261a:	49 5f       	subi	r20, 0xF9	; 249
    261c:	5f 4f       	sbci	r21, 0xFF	; 255
    261e:	da 01       	movw	r26, r20
    2620:	6d 91       	ld	r22, X+
    2622:	7d 91       	ld	r23, X+
    2624:	ad 01       	movw	r20, r26
    2626:	05 e0       	ldi	r16, 0x05	; 5
    2628:	14 e0       	ldi	r17, 0x04	; 4
    262a:	f8 01       	movw	r30, r16
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	dc 01       	movw	r26, r24
    2632:	13 96       	adiw	r26, 0x03	; 3
    2634:	2c 91       	ld	r18, X
    2636:	13 97       	sbiw	r26, 0x03	; 3
    2638:	28 60       	ori	r18, 0x08	; 8
    263a:	13 96       	adiw	r26, 0x03	; 3
    263c:	2c 93       	st	X, r18
    263e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <vfprintf>
    2642:	d8 01       	movw	r26, r16
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	ed 91       	ld	r30, X+
    2648:	fc 91       	ld	r31, X
    264a:	13 97       	sbiw	r26, 0x03	; 3
    264c:	23 81       	ldd	r18, Z+3	; 0x03
    264e:	27 7f       	andi	r18, 0xF7	; 247
    2650:	23 83       	std	Z+3, r18	; 0x03
    2652:	e4 e0       	ldi	r30, 0x04	; 4
    2654:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__epilogue_restores__+0x1c>

00002658 <putchar>:
    2658:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <__iob+0x2>
    265c:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <__iob+0x3>
    2660:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2664:	08 95       	ret

00002666 <puts>:
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <__iob+0x2>
    2672:	f0 91 08 04 	lds	r31, 0x0408	; 0x800408 <__iob+0x3>
    2676:	23 81       	ldd	r18, Z+3	; 0x03
    2678:	21 ff       	sbrs	r18, 1
    267a:	1b c0       	rjmp	.+54     	; 0x26b2 <puts+0x4c>
    267c:	8c 01       	movw	r16, r24
    267e:	d0 e0       	ldi	r29, 0x00	; 0
    2680:	c0 e0       	ldi	r28, 0x00	; 0
    2682:	f8 01       	movw	r30, r16
    2684:	81 91       	ld	r24, Z+
    2686:	8f 01       	movw	r16, r30
    2688:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <__iob+0x2>
    268c:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <__iob+0x3>
    2690:	db 01       	movw	r26, r22
    2692:	18 96       	adiw	r26, 0x08	; 8
    2694:	ed 91       	ld	r30, X+
    2696:	fc 91       	ld	r31, X
    2698:	19 97       	sbiw	r26, 0x09	; 9
    269a:	88 23       	and	r24, r24
    269c:	31 f0       	breq	.+12     	; 0x26aa <puts+0x44>
    269e:	09 95       	icall
    26a0:	89 2b       	or	r24, r25
    26a2:	79 f3       	breq	.-34     	; 0x2682 <puts+0x1c>
    26a4:	df ef       	ldi	r29, 0xFF	; 255
    26a6:	cf ef       	ldi	r28, 0xFF	; 255
    26a8:	ec cf       	rjmp	.-40     	; 0x2682 <puts+0x1c>
    26aa:	8a e0       	ldi	r24, 0x0A	; 10
    26ac:	09 95       	icall
    26ae:	89 2b       	or	r24, r25
    26b0:	19 f0       	breq	.+6      	; 0x26b8 <puts+0x52>
    26b2:	8f ef       	ldi	r24, 0xFF	; 255
    26b4:	9f ef       	ldi	r25, 0xFF	; 255
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <puts+0x56>
    26b8:	8d 2f       	mov	r24, r29
    26ba:	9c 2f       	mov	r25, r28
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	08 95       	ret

000026c6 <vfprintf>:
    26c6:	ab e0       	ldi	r26, 0x0B	; 11
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e6       	ldi	r30, 0x69	; 105
    26cc:	f3 e1       	ldi	r31, 0x13	; 19
    26ce:	0c 94 07 16 	jmp	0x2c0e	; 0x2c0e <__prologue_saves__>
    26d2:	6c 01       	movw	r12, r24
    26d4:	7b 01       	movw	r14, r22
    26d6:	8a 01       	movw	r16, r20
    26d8:	fc 01       	movw	r30, r24
    26da:	17 82       	std	Z+7, r1	; 0x07
    26dc:	16 82       	std	Z+6, r1	; 0x06
    26de:	83 81       	ldd	r24, Z+3	; 0x03
    26e0:	81 ff       	sbrs	r24, 1
    26e2:	cc c1       	rjmp	.+920    	; 0x2a7c <vfprintf+0x3b6>
    26e4:	ce 01       	movw	r24, r28
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	3c 01       	movw	r6, r24
    26ea:	f6 01       	movw	r30, r12
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	f7 01       	movw	r30, r14
    26f0:	93 fd       	sbrc	r25, 3
    26f2:	85 91       	lpm	r24, Z+
    26f4:	93 ff       	sbrs	r25, 3
    26f6:	81 91       	ld	r24, Z+
    26f8:	7f 01       	movw	r14, r30
    26fa:	88 23       	and	r24, r24
    26fc:	09 f4       	brne	.+2      	; 0x2700 <vfprintf+0x3a>
    26fe:	ba c1       	rjmp	.+884    	; 0x2a74 <vfprintf+0x3ae>
    2700:	85 32       	cpi	r24, 0x25	; 37
    2702:	39 f4       	brne	.+14     	; 0x2712 <vfprintf+0x4c>
    2704:	93 fd       	sbrc	r25, 3
    2706:	85 91       	lpm	r24, Z+
    2708:	93 ff       	sbrs	r25, 3
    270a:	81 91       	ld	r24, Z+
    270c:	7f 01       	movw	r14, r30
    270e:	85 32       	cpi	r24, 0x25	; 37
    2710:	29 f4       	brne	.+10     	; 0x271c <vfprintf+0x56>
    2712:	b6 01       	movw	r22, r12
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    271a:	e7 cf       	rjmp	.-50     	; 0x26ea <vfprintf+0x24>
    271c:	91 2c       	mov	r9, r1
    271e:	21 2c       	mov	r2, r1
    2720:	31 2c       	mov	r3, r1
    2722:	ff e1       	ldi	r31, 0x1F	; 31
    2724:	f3 15       	cp	r31, r3
    2726:	d8 f0       	brcs	.+54     	; 0x275e <vfprintf+0x98>
    2728:	8b 32       	cpi	r24, 0x2B	; 43
    272a:	79 f0       	breq	.+30     	; 0x274a <vfprintf+0x84>
    272c:	38 f4       	brcc	.+14     	; 0x273c <vfprintf+0x76>
    272e:	80 32       	cpi	r24, 0x20	; 32
    2730:	79 f0       	breq	.+30     	; 0x2750 <vfprintf+0x8a>
    2732:	83 32       	cpi	r24, 0x23	; 35
    2734:	a1 f4       	brne	.+40     	; 0x275e <vfprintf+0x98>
    2736:	23 2d       	mov	r18, r3
    2738:	20 61       	ori	r18, 0x10	; 16
    273a:	1d c0       	rjmp	.+58     	; 0x2776 <vfprintf+0xb0>
    273c:	8d 32       	cpi	r24, 0x2D	; 45
    273e:	61 f0       	breq	.+24     	; 0x2758 <vfprintf+0x92>
    2740:	80 33       	cpi	r24, 0x30	; 48
    2742:	69 f4       	brne	.+26     	; 0x275e <vfprintf+0x98>
    2744:	23 2d       	mov	r18, r3
    2746:	21 60       	ori	r18, 0x01	; 1
    2748:	16 c0       	rjmp	.+44     	; 0x2776 <vfprintf+0xb0>
    274a:	83 2d       	mov	r24, r3
    274c:	82 60       	ori	r24, 0x02	; 2
    274e:	38 2e       	mov	r3, r24
    2750:	e3 2d       	mov	r30, r3
    2752:	e4 60       	ori	r30, 0x04	; 4
    2754:	3e 2e       	mov	r3, r30
    2756:	2a c0       	rjmp	.+84     	; 0x27ac <vfprintf+0xe6>
    2758:	f3 2d       	mov	r31, r3
    275a:	f8 60       	ori	r31, 0x08	; 8
    275c:	1d c0       	rjmp	.+58     	; 0x2798 <vfprintf+0xd2>
    275e:	37 fc       	sbrc	r3, 7
    2760:	2d c0       	rjmp	.+90     	; 0x27bc <vfprintf+0xf6>
    2762:	20 ed       	ldi	r18, 0xD0	; 208
    2764:	28 0f       	add	r18, r24
    2766:	2a 30       	cpi	r18, 0x0A	; 10
    2768:	40 f0       	brcs	.+16     	; 0x277a <vfprintf+0xb4>
    276a:	8e 32       	cpi	r24, 0x2E	; 46
    276c:	b9 f4       	brne	.+46     	; 0x279c <vfprintf+0xd6>
    276e:	36 fc       	sbrc	r3, 6
    2770:	81 c1       	rjmp	.+770    	; 0x2a74 <vfprintf+0x3ae>
    2772:	23 2d       	mov	r18, r3
    2774:	20 64       	ori	r18, 0x40	; 64
    2776:	32 2e       	mov	r3, r18
    2778:	19 c0       	rjmp	.+50     	; 0x27ac <vfprintf+0xe6>
    277a:	36 fe       	sbrs	r3, 6
    277c:	06 c0       	rjmp	.+12     	; 0x278a <vfprintf+0xc4>
    277e:	8a e0       	ldi	r24, 0x0A	; 10
    2780:	98 9e       	mul	r9, r24
    2782:	20 0d       	add	r18, r0
    2784:	11 24       	eor	r1, r1
    2786:	92 2e       	mov	r9, r18
    2788:	11 c0       	rjmp	.+34     	; 0x27ac <vfprintf+0xe6>
    278a:	ea e0       	ldi	r30, 0x0A	; 10
    278c:	2e 9e       	mul	r2, r30
    278e:	20 0d       	add	r18, r0
    2790:	11 24       	eor	r1, r1
    2792:	22 2e       	mov	r2, r18
    2794:	f3 2d       	mov	r31, r3
    2796:	f0 62       	ori	r31, 0x20	; 32
    2798:	3f 2e       	mov	r3, r31
    279a:	08 c0       	rjmp	.+16     	; 0x27ac <vfprintf+0xe6>
    279c:	8c 36       	cpi	r24, 0x6C	; 108
    279e:	21 f4       	brne	.+8      	; 0x27a8 <vfprintf+0xe2>
    27a0:	83 2d       	mov	r24, r3
    27a2:	80 68       	ori	r24, 0x80	; 128
    27a4:	38 2e       	mov	r3, r24
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <vfprintf+0xe6>
    27a8:	88 36       	cpi	r24, 0x68	; 104
    27aa:	41 f4       	brne	.+16     	; 0x27bc <vfprintf+0xf6>
    27ac:	f7 01       	movw	r30, r14
    27ae:	93 fd       	sbrc	r25, 3
    27b0:	85 91       	lpm	r24, Z+
    27b2:	93 ff       	sbrs	r25, 3
    27b4:	81 91       	ld	r24, Z+
    27b6:	7f 01       	movw	r14, r30
    27b8:	81 11       	cpse	r24, r1
    27ba:	b3 cf       	rjmp	.-154    	; 0x2722 <vfprintf+0x5c>
    27bc:	98 2f       	mov	r25, r24
    27be:	9f 7d       	andi	r25, 0xDF	; 223
    27c0:	95 54       	subi	r25, 0x45	; 69
    27c2:	93 30       	cpi	r25, 0x03	; 3
    27c4:	28 f4       	brcc	.+10     	; 0x27d0 <vfprintf+0x10a>
    27c6:	0c 5f       	subi	r16, 0xFC	; 252
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	9f e3       	ldi	r25, 0x3F	; 63
    27cc:	99 83       	std	Y+1, r25	; 0x01
    27ce:	0d c0       	rjmp	.+26     	; 0x27ea <vfprintf+0x124>
    27d0:	83 36       	cpi	r24, 0x63	; 99
    27d2:	31 f0       	breq	.+12     	; 0x27e0 <vfprintf+0x11a>
    27d4:	83 37       	cpi	r24, 0x73	; 115
    27d6:	71 f0       	breq	.+28     	; 0x27f4 <vfprintf+0x12e>
    27d8:	83 35       	cpi	r24, 0x53	; 83
    27da:	09 f0       	breq	.+2      	; 0x27de <vfprintf+0x118>
    27dc:	59 c0       	rjmp	.+178    	; 0x2890 <vfprintf+0x1ca>
    27de:	21 c0       	rjmp	.+66     	; 0x2822 <vfprintf+0x15c>
    27e0:	f8 01       	movw	r30, r16
    27e2:	80 81       	ld	r24, Z
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	0e 5f       	subi	r16, 0xFE	; 254
    27e8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ea:	88 24       	eor	r8, r8
    27ec:	83 94       	inc	r8
    27ee:	91 2c       	mov	r9, r1
    27f0:	53 01       	movw	r10, r6
    27f2:	13 c0       	rjmp	.+38     	; 0x281a <vfprintf+0x154>
    27f4:	28 01       	movw	r4, r16
    27f6:	f2 e0       	ldi	r31, 0x02	; 2
    27f8:	4f 0e       	add	r4, r31
    27fa:	51 1c       	adc	r5, r1
    27fc:	f8 01       	movw	r30, r16
    27fe:	a0 80       	ld	r10, Z
    2800:	b1 80       	ldd	r11, Z+1	; 0x01
    2802:	36 fe       	sbrs	r3, 6
    2804:	03 c0       	rjmp	.+6      	; 0x280c <vfprintf+0x146>
    2806:	69 2d       	mov	r22, r9
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <vfprintf+0x14a>
    280c:	6f ef       	ldi	r22, 0xFF	; 255
    280e:	7f ef       	ldi	r23, 0xFF	; 255
    2810:	c5 01       	movw	r24, r10
    2812:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <strnlen>
    2816:	4c 01       	movw	r8, r24
    2818:	82 01       	movw	r16, r4
    281a:	f3 2d       	mov	r31, r3
    281c:	ff 77       	andi	r31, 0x7F	; 127
    281e:	3f 2e       	mov	r3, r31
    2820:	16 c0       	rjmp	.+44     	; 0x284e <vfprintf+0x188>
    2822:	28 01       	movw	r4, r16
    2824:	22 e0       	ldi	r18, 0x02	; 2
    2826:	42 0e       	add	r4, r18
    2828:	51 1c       	adc	r5, r1
    282a:	f8 01       	movw	r30, r16
    282c:	a0 80       	ld	r10, Z
    282e:	b1 80       	ldd	r11, Z+1	; 0x01
    2830:	36 fe       	sbrs	r3, 6
    2832:	03 c0       	rjmp	.+6      	; 0x283a <vfprintf+0x174>
    2834:	69 2d       	mov	r22, r9
    2836:	70 e0       	ldi	r23, 0x00	; 0
    2838:	02 c0       	rjmp	.+4      	; 0x283e <vfprintf+0x178>
    283a:	6f ef       	ldi	r22, 0xFF	; 255
    283c:	7f ef       	ldi	r23, 0xFF	; 255
    283e:	c5 01       	movw	r24, r10
    2840:	0e 94 44 15 	call	0x2a88	; 0x2a88 <strnlen_P>
    2844:	4c 01       	movw	r8, r24
    2846:	f3 2d       	mov	r31, r3
    2848:	f0 68       	ori	r31, 0x80	; 128
    284a:	3f 2e       	mov	r3, r31
    284c:	82 01       	movw	r16, r4
    284e:	33 fc       	sbrc	r3, 3
    2850:	1b c0       	rjmp	.+54     	; 0x2888 <vfprintf+0x1c2>
    2852:	82 2d       	mov	r24, r2
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	88 16       	cp	r8, r24
    2858:	99 06       	cpc	r9, r25
    285a:	b0 f4       	brcc	.+44     	; 0x2888 <vfprintf+0x1c2>
    285c:	b6 01       	movw	r22, r12
    285e:	80 e2       	ldi	r24, 0x20	; 32
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2866:	2a 94       	dec	r2
    2868:	f4 cf       	rjmp	.-24     	; 0x2852 <vfprintf+0x18c>
    286a:	f5 01       	movw	r30, r10
    286c:	37 fc       	sbrc	r3, 7
    286e:	85 91       	lpm	r24, Z+
    2870:	37 fe       	sbrs	r3, 7
    2872:	81 91       	ld	r24, Z+
    2874:	5f 01       	movw	r10, r30
    2876:	b6 01       	movw	r22, r12
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    287e:	21 10       	cpse	r2, r1
    2880:	2a 94       	dec	r2
    2882:	21 e0       	ldi	r18, 0x01	; 1
    2884:	82 1a       	sub	r8, r18
    2886:	91 08       	sbc	r9, r1
    2888:	81 14       	cp	r8, r1
    288a:	91 04       	cpc	r9, r1
    288c:	71 f7       	brne	.-36     	; 0x286a <vfprintf+0x1a4>
    288e:	e8 c0       	rjmp	.+464    	; 0x2a60 <vfprintf+0x39a>
    2890:	84 36       	cpi	r24, 0x64	; 100
    2892:	11 f0       	breq	.+4      	; 0x2898 <vfprintf+0x1d2>
    2894:	89 36       	cpi	r24, 0x69	; 105
    2896:	41 f5       	brne	.+80     	; 0x28e8 <vfprintf+0x222>
    2898:	f8 01       	movw	r30, r16
    289a:	37 fe       	sbrs	r3, 7
    289c:	07 c0       	rjmp	.+14     	; 0x28ac <vfprintf+0x1e6>
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	0c 5f       	subi	r16, 0xFC	; 252
    28a8:	1f 4f       	sbci	r17, 0xFF	; 255
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <vfprintf+0x1f6>
    28ac:	60 81       	ld	r22, Z
    28ae:	71 81       	ldd	r23, Z+1	; 0x01
    28b0:	07 2e       	mov	r0, r23
    28b2:	00 0c       	add	r0, r0
    28b4:	88 0b       	sbc	r24, r24
    28b6:	99 0b       	sbc	r25, r25
    28b8:	0e 5f       	subi	r16, 0xFE	; 254
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	f3 2d       	mov	r31, r3
    28be:	ff 76       	andi	r31, 0x6F	; 111
    28c0:	3f 2e       	mov	r3, r31
    28c2:	97 ff       	sbrs	r25, 7
    28c4:	09 c0       	rjmp	.+18     	; 0x28d8 <vfprintf+0x212>
    28c6:	90 95       	com	r25
    28c8:	80 95       	com	r24
    28ca:	70 95       	com	r23
    28cc:	61 95       	neg	r22
    28ce:	7f 4f       	sbci	r23, 0xFF	; 255
    28d0:	8f 4f       	sbci	r24, 0xFF	; 255
    28d2:	9f 4f       	sbci	r25, 0xFF	; 255
    28d4:	f0 68       	ori	r31, 0x80	; 128
    28d6:	3f 2e       	mov	r3, r31
    28d8:	2a e0       	ldi	r18, 0x0A	; 10
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	a3 01       	movw	r20, r6
    28de:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__ultoa_invert>
    28e2:	88 2e       	mov	r8, r24
    28e4:	86 18       	sub	r8, r6
    28e6:	45 c0       	rjmp	.+138    	; 0x2972 <vfprintf+0x2ac>
    28e8:	85 37       	cpi	r24, 0x75	; 117
    28ea:	31 f4       	brne	.+12     	; 0x28f8 <vfprintf+0x232>
    28ec:	23 2d       	mov	r18, r3
    28ee:	2f 7e       	andi	r18, 0xEF	; 239
    28f0:	b2 2e       	mov	r11, r18
    28f2:	2a e0       	ldi	r18, 0x0A	; 10
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	25 c0       	rjmp	.+74     	; 0x2942 <vfprintf+0x27c>
    28f8:	93 2d       	mov	r25, r3
    28fa:	99 7f       	andi	r25, 0xF9	; 249
    28fc:	b9 2e       	mov	r11, r25
    28fe:	8f 36       	cpi	r24, 0x6F	; 111
    2900:	c1 f0       	breq	.+48     	; 0x2932 <vfprintf+0x26c>
    2902:	18 f4       	brcc	.+6      	; 0x290a <vfprintf+0x244>
    2904:	88 35       	cpi	r24, 0x58	; 88
    2906:	79 f0       	breq	.+30     	; 0x2926 <vfprintf+0x260>
    2908:	b5 c0       	rjmp	.+362    	; 0x2a74 <vfprintf+0x3ae>
    290a:	80 37       	cpi	r24, 0x70	; 112
    290c:	19 f0       	breq	.+6      	; 0x2914 <vfprintf+0x24e>
    290e:	88 37       	cpi	r24, 0x78	; 120
    2910:	21 f0       	breq	.+8      	; 0x291a <vfprintf+0x254>
    2912:	b0 c0       	rjmp	.+352    	; 0x2a74 <vfprintf+0x3ae>
    2914:	e9 2f       	mov	r30, r25
    2916:	e0 61       	ori	r30, 0x10	; 16
    2918:	be 2e       	mov	r11, r30
    291a:	b4 fe       	sbrs	r11, 4
    291c:	0d c0       	rjmp	.+26     	; 0x2938 <vfprintf+0x272>
    291e:	fb 2d       	mov	r31, r11
    2920:	f4 60       	ori	r31, 0x04	; 4
    2922:	bf 2e       	mov	r11, r31
    2924:	09 c0       	rjmp	.+18     	; 0x2938 <vfprintf+0x272>
    2926:	34 fe       	sbrs	r3, 4
    2928:	0a c0       	rjmp	.+20     	; 0x293e <vfprintf+0x278>
    292a:	29 2f       	mov	r18, r25
    292c:	26 60       	ori	r18, 0x06	; 6
    292e:	b2 2e       	mov	r11, r18
    2930:	06 c0       	rjmp	.+12     	; 0x293e <vfprintf+0x278>
    2932:	28 e0       	ldi	r18, 0x08	; 8
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	05 c0       	rjmp	.+10     	; 0x2942 <vfprintf+0x27c>
    2938:	20 e1       	ldi	r18, 0x10	; 16
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <vfprintf+0x27c>
    293e:	20 e1       	ldi	r18, 0x10	; 16
    2940:	32 e0       	ldi	r19, 0x02	; 2
    2942:	f8 01       	movw	r30, r16
    2944:	b7 fe       	sbrs	r11, 7
    2946:	07 c0       	rjmp	.+14     	; 0x2956 <vfprintf+0x290>
    2948:	60 81       	ld	r22, Z
    294a:	71 81       	ldd	r23, Z+1	; 0x01
    294c:	82 81       	ldd	r24, Z+2	; 0x02
    294e:	93 81       	ldd	r25, Z+3	; 0x03
    2950:	0c 5f       	subi	r16, 0xFC	; 252
    2952:	1f 4f       	sbci	r17, 0xFF	; 255
    2954:	06 c0       	rjmp	.+12     	; 0x2962 <vfprintf+0x29c>
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 5f       	subi	r16, 0xFE	; 254
    2960:	1f 4f       	sbci	r17, 0xFF	; 255
    2962:	a3 01       	movw	r20, r6
    2964:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <__ultoa_invert>
    2968:	88 2e       	mov	r8, r24
    296a:	86 18       	sub	r8, r6
    296c:	fb 2d       	mov	r31, r11
    296e:	ff 77       	andi	r31, 0x7F	; 127
    2970:	3f 2e       	mov	r3, r31
    2972:	36 fe       	sbrs	r3, 6
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <vfprintf+0x2ca>
    2976:	23 2d       	mov	r18, r3
    2978:	2e 7f       	andi	r18, 0xFE	; 254
    297a:	a2 2e       	mov	r10, r18
    297c:	89 14       	cp	r8, r9
    297e:	58 f4       	brcc	.+22     	; 0x2996 <vfprintf+0x2d0>
    2980:	34 fe       	sbrs	r3, 4
    2982:	0b c0       	rjmp	.+22     	; 0x299a <vfprintf+0x2d4>
    2984:	32 fc       	sbrc	r3, 2
    2986:	09 c0       	rjmp	.+18     	; 0x299a <vfprintf+0x2d4>
    2988:	83 2d       	mov	r24, r3
    298a:	8e 7e       	andi	r24, 0xEE	; 238
    298c:	a8 2e       	mov	r10, r24
    298e:	05 c0       	rjmp	.+10     	; 0x299a <vfprintf+0x2d4>
    2990:	b8 2c       	mov	r11, r8
    2992:	a3 2c       	mov	r10, r3
    2994:	03 c0       	rjmp	.+6      	; 0x299c <vfprintf+0x2d6>
    2996:	b8 2c       	mov	r11, r8
    2998:	01 c0       	rjmp	.+2      	; 0x299c <vfprintf+0x2d6>
    299a:	b9 2c       	mov	r11, r9
    299c:	a4 fe       	sbrs	r10, 4
    299e:	0f c0       	rjmp	.+30     	; 0x29be <vfprintf+0x2f8>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e8 0d       	add	r30, r8
    29a4:	f1 1d       	adc	r31, r1
    29a6:	80 81       	ld	r24, Z
    29a8:	80 33       	cpi	r24, 0x30	; 48
    29aa:	21 f4       	brne	.+8      	; 0x29b4 <vfprintf+0x2ee>
    29ac:	9a 2d       	mov	r25, r10
    29ae:	99 7e       	andi	r25, 0xE9	; 233
    29b0:	a9 2e       	mov	r10, r25
    29b2:	09 c0       	rjmp	.+18     	; 0x29c6 <vfprintf+0x300>
    29b4:	a2 fe       	sbrs	r10, 2
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <vfprintf+0x2fe>
    29b8:	b3 94       	inc	r11
    29ba:	b3 94       	inc	r11
    29bc:	04 c0       	rjmp	.+8      	; 0x29c6 <vfprintf+0x300>
    29be:	8a 2d       	mov	r24, r10
    29c0:	86 78       	andi	r24, 0x86	; 134
    29c2:	09 f0       	breq	.+2      	; 0x29c6 <vfprintf+0x300>
    29c4:	b3 94       	inc	r11
    29c6:	a3 fc       	sbrc	r10, 3
    29c8:	11 c0       	rjmp	.+34     	; 0x29ec <vfprintf+0x326>
    29ca:	a0 fe       	sbrs	r10, 0
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <vfprintf+0x314>
    29ce:	b2 14       	cp	r11, r2
    29d0:	88 f4       	brcc	.+34     	; 0x29f4 <vfprintf+0x32e>
    29d2:	28 0c       	add	r2, r8
    29d4:	92 2c       	mov	r9, r2
    29d6:	9b 18       	sub	r9, r11
    29d8:	0e c0       	rjmp	.+28     	; 0x29f6 <vfprintf+0x330>
    29da:	b2 14       	cp	r11, r2
    29dc:	60 f4       	brcc	.+24     	; 0x29f6 <vfprintf+0x330>
    29de:	b6 01       	movw	r22, r12
    29e0:	80 e2       	ldi	r24, 0x20	; 32
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    29e8:	b3 94       	inc	r11
    29ea:	f7 cf       	rjmp	.-18     	; 0x29da <vfprintf+0x314>
    29ec:	b2 14       	cp	r11, r2
    29ee:	18 f4       	brcc	.+6      	; 0x29f6 <vfprintf+0x330>
    29f0:	2b 18       	sub	r2, r11
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <vfprintf+0x332>
    29f4:	98 2c       	mov	r9, r8
    29f6:	21 2c       	mov	r2, r1
    29f8:	a4 fe       	sbrs	r10, 4
    29fa:	10 c0       	rjmp	.+32     	; 0x2a1c <vfprintf+0x356>
    29fc:	b6 01       	movw	r22, r12
    29fe:	80 e3       	ldi	r24, 0x30	; 48
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2a06:	a2 fe       	sbrs	r10, 2
    2a08:	17 c0       	rjmp	.+46     	; 0x2a38 <vfprintf+0x372>
    2a0a:	a1 fc       	sbrc	r10, 1
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <vfprintf+0x34e>
    2a0e:	88 e7       	ldi	r24, 0x78	; 120
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <vfprintf+0x352>
    2a14:	88 e5       	ldi	r24, 0x58	; 88
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	b6 01       	movw	r22, r12
    2a1a:	0c c0       	rjmp	.+24     	; 0x2a34 <vfprintf+0x36e>
    2a1c:	8a 2d       	mov	r24, r10
    2a1e:	86 78       	andi	r24, 0x86	; 134
    2a20:	59 f0       	breq	.+22     	; 0x2a38 <vfprintf+0x372>
    2a22:	a1 fe       	sbrs	r10, 1
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <vfprintf+0x364>
    2a26:	8b e2       	ldi	r24, 0x2B	; 43
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <vfprintf+0x366>
    2a2a:	80 e2       	ldi	r24, 0x20	; 32
    2a2c:	a7 fc       	sbrc	r10, 7
    2a2e:	8d e2       	ldi	r24, 0x2D	; 45
    2a30:	b6 01       	movw	r22, r12
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2a38:	89 14       	cp	r8, r9
    2a3a:	38 f4       	brcc	.+14     	; 0x2a4a <vfprintf+0x384>
    2a3c:	b6 01       	movw	r22, r12
    2a3e:	80 e3       	ldi	r24, 0x30	; 48
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2a46:	9a 94       	dec	r9
    2a48:	f7 cf       	rjmp	.-18     	; 0x2a38 <vfprintf+0x372>
    2a4a:	8a 94       	dec	r8
    2a4c:	f3 01       	movw	r30, r6
    2a4e:	e8 0d       	add	r30, r8
    2a50:	f1 1d       	adc	r31, r1
    2a52:	80 81       	ld	r24, Z
    2a54:	b6 01       	movw	r22, r12
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2a5c:	81 10       	cpse	r8, r1
    2a5e:	f5 cf       	rjmp	.-22     	; 0x2a4a <vfprintf+0x384>
    2a60:	22 20       	and	r2, r2
    2a62:	09 f4       	brne	.+2      	; 0x2a66 <vfprintf+0x3a0>
    2a64:	42 ce       	rjmp	.-892    	; 0x26ea <vfprintf+0x24>
    2a66:	b6 01       	movw	r22, r12
    2a68:	80 e2       	ldi	r24, 0x20	; 32
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <fputc>
    2a70:	2a 94       	dec	r2
    2a72:	f6 cf       	rjmp	.-20     	; 0x2a60 <vfprintf+0x39a>
    2a74:	f6 01       	movw	r30, r12
    2a76:	86 81       	ldd	r24, Z+6	; 0x06
    2a78:	97 81       	ldd	r25, Z+7	; 0x07
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <vfprintf+0x3ba>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	9f ef       	ldi	r25, 0xFF	; 255
    2a80:	2b 96       	adiw	r28, 0x0b	; 11
    2a82:	e2 e1       	ldi	r30, 0x12	; 18
    2a84:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__epilogue_restores__>

00002a88 <strnlen_P>:
    2a88:	fc 01       	movw	r30, r24
    2a8a:	05 90       	lpm	r0, Z+
    2a8c:	61 50       	subi	r22, 0x01	; 1
    2a8e:	70 40       	sbci	r23, 0x00	; 0
    2a90:	01 10       	cpse	r0, r1
    2a92:	d8 f7       	brcc	.-10     	; 0x2a8a <strnlen_P+0x2>
    2a94:	80 95       	com	r24
    2a96:	90 95       	com	r25
    2a98:	8e 0f       	add	r24, r30
    2a9a:	9f 1f       	adc	r25, r31
    2a9c:	08 95       	ret

00002a9e <strnlen>:
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	61 50       	subi	r22, 0x01	; 1
    2aa2:	70 40       	sbci	r23, 0x00	; 0
    2aa4:	01 90       	ld	r0, Z+
    2aa6:	01 10       	cpse	r0, r1
    2aa8:	d8 f7       	brcc	.-10     	; 0x2aa0 <strnlen+0x2>
    2aaa:	80 95       	com	r24
    2aac:	90 95       	com	r25
    2aae:	8e 0f       	add	r24, r30
    2ab0:	9f 1f       	adc	r25, r31
    2ab2:	08 95       	ret

00002ab4 <fputc>:
    2ab4:	0f 93       	push	r16
    2ab6:	1f 93       	push	r17
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	fb 01       	movw	r30, r22
    2abe:	23 81       	ldd	r18, Z+3	; 0x03
    2ac0:	21 fd       	sbrc	r18, 1
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <fputc+0x16>
    2ac4:	8f ef       	ldi	r24, 0xFF	; 255
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	2c c0       	rjmp	.+88     	; 0x2b22 <fputc+0x6e>
    2aca:	22 ff       	sbrs	r18, 2
    2acc:	16 c0       	rjmp	.+44     	; 0x2afa <fputc+0x46>
    2ace:	46 81       	ldd	r20, Z+6	; 0x06
    2ad0:	57 81       	ldd	r21, Z+7	; 0x07
    2ad2:	24 81       	ldd	r18, Z+4	; 0x04
    2ad4:	35 81       	ldd	r19, Z+5	; 0x05
    2ad6:	42 17       	cp	r20, r18
    2ad8:	53 07       	cpc	r21, r19
    2ada:	44 f4       	brge	.+16     	; 0x2aec <fputc+0x38>
    2adc:	a0 81       	ld	r26, Z
    2ade:	b1 81       	ldd	r27, Z+1	; 0x01
    2ae0:	9d 01       	movw	r18, r26
    2ae2:	2f 5f       	subi	r18, 0xFF	; 255
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	31 83       	std	Z+1, r19	; 0x01
    2ae8:	20 83       	st	Z, r18
    2aea:	8c 93       	st	X, r24
    2aec:	26 81       	ldd	r18, Z+6	; 0x06
    2aee:	37 81       	ldd	r19, Z+7	; 0x07
    2af0:	2f 5f       	subi	r18, 0xFF	; 255
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	37 83       	std	Z+7, r19	; 0x07
    2af6:	26 83       	std	Z+6, r18	; 0x06
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <fputc+0x6e>
    2afa:	8b 01       	movw	r16, r22
    2afc:	ec 01       	movw	r28, r24
    2afe:	fb 01       	movw	r30, r22
    2b00:	00 84       	ldd	r0, Z+8	; 0x08
    2b02:	f1 85       	ldd	r31, Z+9	; 0x09
    2b04:	e0 2d       	mov	r30, r0
    2b06:	09 95       	icall
    2b08:	89 2b       	or	r24, r25
    2b0a:	e1 f6       	brne	.-72     	; 0x2ac4 <fputc+0x10>
    2b0c:	d8 01       	movw	r26, r16
    2b0e:	16 96       	adiw	r26, 0x06	; 6
    2b10:	8d 91       	ld	r24, X+
    2b12:	9c 91       	ld	r25, X
    2b14:	17 97       	sbiw	r26, 0x07	; 7
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	17 96       	adiw	r26, 0x07	; 7
    2b1a:	9c 93       	st	X, r25
    2b1c:	8e 93       	st	-X, r24
    2b1e:	16 97       	sbiw	r26, 0x06	; 6
    2b20:	ce 01       	movw	r24, r28
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <__ultoa_invert>:
    2b2c:	fa 01       	movw	r30, r20
    2b2e:	aa 27       	eor	r26, r26
    2b30:	28 30       	cpi	r18, 0x08	; 8
    2b32:	51 f1       	breq	.+84     	; 0x2b88 <__ultoa_invert+0x5c>
    2b34:	20 31       	cpi	r18, 0x10	; 16
    2b36:	81 f1       	breq	.+96     	; 0x2b98 <__ultoa_invert+0x6c>
    2b38:	e8 94       	clt
    2b3a:	6f 93       	push	r22
    2b3c:	6e 7f       	andi	r22, 0xFE	; 254
    2b3e:	6e 5f       	subi	r22, 0xFE	; 254
    2b40:	7f 4f       	sbci	r23, 0xFF	; 255
    2b42:	8f 4f       	sbci	r24, 0xFF	; 255
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	af 4f       	sbci	r26, 0xFF	; 255
    2b48:	b1 e0       	ldi	r27, 0x01	; 1
    2b4a:	3e d0       	rcall	.+124    	; 0x2bc8 <__ultoa_invert+0x9c>
    2b4c:	b4 e0       	ldi	r27, 0x04	; 4
    2b4e:	3c d0       	rcall	.+120    	; 0x2bc8 <__ultoa_invert+0x9c>
    2b50:	67 0f       	add	r22, r23
    2b52:	78 1f       	adc	r23, r24
    2b54:	89 1f       	adc	r24, r25
    2b56:	9a 1f       	adc	r25, r26
    2b58:	a1 1d       	adc	r26, r1
    2b5a:	68 0f       	add	r22, r24
    2b5c:	79 1f       	adc	r23, r25
    2b5e:	8a 1f       	adc	r24, r26
    2b60:	91 1d       	adc	r25, r1
    2b62:	a1 1d       	adc	r26, r1
    2b64:	6a 0f       	add	r22, r26
    2b66:	71 1d       	adc	r23, r1
    2b68:	81 1d       	adc	r24, r1
    2b6a:	91 1d       	adc	r25, r1
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	20 d0       	rcall	.+64     	; 0x2bb0 <__ultoa_invert+0x84>
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <__ultoa_invert+0x48>
    2b72:	68 94       	set
    2b74:	3f 91       	pop	r19
    2b76:	2a e0       	ldi	r18, 0x0A	; 10
    2b78:	26 9f       	mul	r18, r22
    2b7a:	11 24       	eor	r1, r1
    2b7c:	30 19       	sub	r19, r0
    2b7e:	30 5d       	subi	r19, 0xD0	; 208
    2b80:	31 93       	st	Z+, r19
    2b82:	de f6       	brtc	.-74     	; 0x2b3a <__ultoa_invert+0xe>
    2b84:	cf 01       	movw	r24, r30
    2b86:	08 95       	ret
    2b88:	46 2f       	mov	r20, r22
    2b8a:	47 70       	andi	r20, 0x07	; 7
    2b8c:	40 5d       	subi	r20, 0xD0	; 208
    2b8e:	41 93       	st	Z+, r20
    2b90:	b3 e0       	ldi	r27, 0x03	; 3
    2b92:	0f d0       	rcall	.+30     	; 0x2bb2 <__ultoa_invert+0x86>
    2b94:	c9 f7       	brne	.-14     	; 0x2b88 <__ultoa_invert+0x5c>
    2b96:	f6 cf       	rjmp	.-20     	; 0x2b84 <__ultoa_invert+0x58>
    2b98:	46 2f       	mov	r20, r22
    2b9a:	4f 70       	andi	r20, 0x0F	; 15
    2b9c:	40 5d       	subi	r20, 0xD0	; 208
    2b9e:	4a 33       	cpi	r20, 0x3A	; 58
    2ba0:	18 f0       	brcs	.+6      	; 0x2ba8 <__ultoa_invert+0x7c>
    2ba2:	49 5d       	subi	r20, 0xD9	; 217
    2ba4:	31 fd       	sbrc	r19, 1
    2ba6:	40 52       	subi	r20, 0x20	; 32
    2ba8:	41 93       	st	Z+, r20
    2baa:	02 d0       	rcall	.+4      	; 0x2bb0 <__ultoa_invert+0x84>
    2bac:	a9 f7       	brne	.-22     	; 0x2b98 <__ultoa_invert+0x6c>
    2bae:	ea cf       	rjmp	.-44     	; 0x2b84 <__ultoa_invert+0x58>
    2bb0:	b4 e0       	ldi	r27, 0x04	; 4
    2bb2:	a6 95       	lsr	r26
    2bb4:	97 95       	ror	r25
    2bb6:	87 95       	ror	r24
    2bb8:	77 95       	ror	r23
    2bba:	67 95       	ror	r22
    2bbc:	ba 95       	dec	r27
    2bbe:	c9 f7       	brne	.-14     	; 0x2bb2 <__ultoa_invert+0x86>
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	61 05       	cpc	r22, r1
    2bc4:	71 05       	cpc	r23, r1
    2bc6:	08 95       	ret
    2bc8:	9b 01       	movw	r18, r22
    2bca:	ac 01       	movw	r20, r24
    2bcc:	0a 2e       	mov	r0, r26
    2bce:	06 94       	lsr	r0
    2bd0:	57 95       	ror	r21
    2bd2:	47 95       	ror	r20
    2bd4:	37 95       	ror	r19
    2bd6:	27 95       	ror	r18
    2bd8:	ba 95       	dec	r27
    2bda:	c9 f7       	brne	.-14     	; 0x2bce <__ultoa_invert+0xa2>
    2bdc:	62 0f       	add	r22, r18
    2bde:	73 1f       	adc	r23, r19
    2be0:	84 1f       	adc	r24, r20
    2be2:	95 1f       	adc	r25, r21
    2be4:	a0 1d       	adc	r26, r0
    2be6:	08 95       	ret

00002be8 <__muluhisi3>:
    2be8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__umulhisi3>
    2bec:	a5 9f       	mul	r26, r21
    2bee:	90 0d       	add	r25, r0
    2bf0:	b4 9f       	mul	r27, r20
    2bf2:	90 0d       	add	r25, r0
    2bf4:	a4 9f       	mul	r26, r20
    2bf6:	80 0d       	add	r24, r0
    2bf8:	91 1d       	adc	r25, r1
    2bfa:	11 24       	eor	r1, r1
    2bfc:	08 95       	ret

00002bfe <__mulshisi3>:
    2bfe:	b7 ff       	sbrs	r27, 7
    2c00:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__muluhisi3>

00002c04 <__mulohisi3>:
    2c04:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <__muluhisi3>
    2c08:	82 1b       	sub	r24, r18
    2c0a:	93 0b       	sbc	r25, r19
    2c0c:	08 95       	ret

00002c0e <__prologue_saves__>:
    2c0e:	2f 92       	push	r2
    2c10:	3f 92       	push	r3
    2c12:	4f 92       	push	r4
    2c14:	5f 92       	push	r5
    2c16:	6f 92       	push	r6
    2c18:	7f 92       	push	r7
    2c1a:	8f 92       	push	r8
    2c1c:	9f 92       	push	r9
    2c1e:	af 92       	push	r10
    2c20:	bf 92       	push	r11
    2c22:	cf 92       	push	r12
    2c24:	df 92       	push	r13
    2c26:	ef 92       	push	r14
    2c28:	ff 92       	push	r15
    2c2a:	0f 93       	push	r16
    2c2c:	1f 93       	push	r17
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	ca 1b       	sub	r28, r26
    2c38:	db 0b       	sbc	r29, r27
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	09 94       	ijmp

00002c46 <__epilogue_restores__>:
    2c46:	2a 88       	ldd	r2, Y+18	; 0x12
    2c48:	39 88       	ldd	r3, Y+17	; 0x11
    2c4a:	48 88       	ldd	r4, Y+16	; 0x10
    2c4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c58:	b9 84       	ldd	r11, Y+9	; 0x09
    2c5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c5c:	df 80       	ldd	r13, Y+7	; 0x07
    2c5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c60:	fd 80       	ldd	r15, Y+5	; 0x05
    2c62:	0c 81       	ldd	r16, Y+4	; 0x04
    2c64:	1b 81       	ldd	r17, Y+3	; 0x03
    2c66:	aa 81       	ldd	r26, Y+2	; 0x02
    2c68:	b9 81       	ldd	r27, Y+1	; 0x01
    2c6a:	ce 0f       	add	r28, r30
    2c6c:	d1 1d       	adc	r29, r1
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	ed 01       	movw	r28, r26
    2c7a:	08 95       	ret

00002c7c <__umulhisi3>:
    2c7c:	a2 9f       	mul	r26, r18
    2c7e:	b0 01       	movw	r22, r0
    2c80:	b3 9f       	mul	r27, r19
    2c82:	c0 01       	movw	r24, r0
    2c84:	a3 9f       	mul	r26, r19
    2c86:	70 0d       	add	r23, r0
    2c88:	81 1d       	adc	r24, r1
    2c8a:	11 24       	eor	r1, r1
    2c8c:	91 1d       	adc	r25, r1
    2c8e:	b2 9f       	mul	r27, r18
    2c90:	70 0d       	add	r23, r0
    2c92:	81 1d       	adc	r24, r1
    2c94:	11 24       	eor	r1, r1
    2c96:	91 1d       	adc	r25, r1
    2c98:	08 95       	ret

00002c9a <_exit>:
    2c9a:	f8 94       	cli

00002c9c <__stop_program>:
    2c9c:	ff cf       	rjmp	.-2      	; 0x2c9c <__stop_program>
