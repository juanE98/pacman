
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  0000278c  00002820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000278c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c2  008001a4  008001a4  000028c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036f8  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001407  00000000  00000000  00006398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cf2  00000000  00000000  0000779f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a58  00000000  00000000  00009494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001068  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d52  00000000  00000000  0000af54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  0000dca6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 03 	jmp	0x692	; 0x692 <__ctors_end>
       4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      10:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_5>
      18:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      20:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      28:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      30:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      3c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      40:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__vector_16>
      44:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      50:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_20>
      54:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_21>
      58:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      5c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      60:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      68:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      6c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      70:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      74:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      78:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      7c:	12 06       	cpc	r1, r18
      7e:	21 06       	cpc	r2, r17
      80:	21 06       	cpc	r2, r17
      82:	21 06       	cpc	r2, r17
      84:	21 06       	cpc	r2, r17
      86:	21 06       	cpc	r2, r17
      88:	21 06       	cpc	r2, r17
      8a:	21 06       	cpc	r2, r17
      8c:	21 06       	cpc	r2, r17
      8e:	21 06       	cpc	r2, r17
      90:	21 06       	cpc	r2, r17
      92:	07 06       	cpc	r0, r23
      94:	21 06       	cpc	r2, r17
      96:	8f 05       	cpc	r24, r15
      98:	1c 06       	cpc	r1, r28
      9a:	21 06       	cpc	r2, r17
      9c:	21 06       	cpc	r2, r17
      9e:	21 06       	cpc	r2, r17
      a0:	21 06       	cpc	r2, r17
      a2:	21 06       	cpc	r2, r17
      a4:	21 06       	cpc	r2, r17
      a6:	21 06       	cpc	r2, r17
      a8:	21 06       	cpc	r2, r17
      aa:	b0 05       	cpc	r27, r0
      ac:	21 06       	cpc	r2, r17
      ae:	21 06       	cpc	r2, r17
      b0:	21 06       	cpc	r2, r17
      b2:	21 06       	cpc	r2, r17
      b4:	e0 05       	cpc	r30, r0
      b6:	21 06       	cpc	r2, r17
      b8:	d3 05       	cpc	r29, r3
      ba:	21 06       	cpc	r2, r17
      bc:	21 06       	cpc	r2, r17
      be:	21 06       	cpc	r2, r17
      c0:	21 06       	cpc	r2, r17
      c2:	21 06       	cpc	r2, r17
      c4:	21 06       	cpc	r2, r17
      c6:	21 06       	cpc	r2, r17
      c8:	a5 05       	cpc	r26, r5
      ca:	21 06       	cpc	r2, r17
      cc:	21 06       	cpc	r2, r17
      ce:	21 06       	cpc	r2, r17
      d0:	c6 05       	cpc	r28, r6
      d2:	21 06       	cpc	r2, r17
      d4:	bb 05       	cpc	r27, r11
      d6:	21 06       	cpc	r2, r17
      d8:	21 06       	cpc	r2, r17
      da:	21 06       	cpc	r2, r17
      dc:	17 06       	cpc	r1, r23
      de:	21 06       	cpc	r2, r17
      e0:	21 06       	cpc	r2, r17
      e2:	21 06       	cpc	r2, r17
      e4:	21 06       	cpc	r2, r17
      e6:	21 06       	cpc	r2, r17
      e8:	21 06       	cpc	r2, r17
      ea:	21 06       	cpc	r2, r17
      ec:	21 06       	cpc	r2, r17
      ee:	21 06       	cpc	r2, r17
      f0:	21 06       	cpc	r2, r17
      f2:	21 06       	cpc	r2, r17
      f4:	21 06       	cpc	r2, r17
      f6:	21 06       	cpc	r2, r17
      f8:	ed 05       	cpc	r30, r13
      fa:	21 06       	cpc	r2, r17
      fc:	21 06       	cpc	r2, r17
      fe:	21 06       	cpc	r2, r17
     100:	21 06       	cpc	r2, r17
     102:	21 06       	cpc	r2, r17
     104:	21 06       	cpc	r2, r17
     106:	21 06       	cpc	r2, r17
     108:	21 06       	cpc	r2, r17
     10a:	21 06       	cpc	r2, r17
     10c:	21 06       	cpc	r2, r17
     10e:	21 06       	cpc	r2, r17
     110:	21 06       	cpc	r2, r17
     112:	21 06       	cpc	r2, r17
     114:	21 06       	cpc	r2, r17
     116:	21 06       	cpc	r2, r17
     118:	21 06       	cpc	r2, r17
     11a:	21 06       	cpc	r2, r17
     11c:	21 06       	cpc	r2, r17
     11e:	21 06       	cpc	r2, r17
     120:	21 06       	cpc	r2, r17
     122:	21 06       	cpc	r2, r17
     124:	21 06       	cpc	r2, r17
     126:	21 06       	cpc	r2, r17
     128:	fa 05       	cpc	r31, r10
     12a:	21 06       	cpc	r2, r17
     12c:	21 06       	cpc	r2, r17
     12e:	21 06       	cpc	r2, r17
     130:	21 06       	cpc	r2, r17
     132:	21 06       	cpc	r2, r17
     134:	9a 05       	cpc	r25, r10

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2306>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2304>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2296>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2294>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2266>:
     550:	53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a 20     Student Number: 
     560:	34 34 33 31 37 39 36 32 00                          44317962.

00000569 <__c.2264>:
     569:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
     579:	20 62 79 20 3c 4a 75 61 6e 20 45 73 70 61 72 65      by <Juan Espare
     589:	73 3e 00                                            s>.

0000058c <__c.2262>:
     58c:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000594 <numbers>:
     594:	ff 05 fc 05 f8 05 f4 05 f0 05 ec 05 e8 05 e4 05     ................
     5a4:	e0 05 dc 05                                         ....

000005a8 <letters>:
     5a8:	6e 06 6a 06 66 06 62 06 5e 06 5a 06 56 06 52 06     n.j.f.b.^.Z.V.R.
     5b8:	4f 06 4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06     O.K.G.C.>.:.6.2.
     5c8:	2d 06 29 06 25 06 20 06 1c 06 17 06 12 06 0d 06     -.).%. .........
     5d8:	08 06 03 06                                         ....

000005dc <cols_9>:
     5dc:	64 92 92 7d                                         d..}

000005e0 <cols_8>:
     5e0:	6c 92 92 6d                                         l..m

000005e4 <cols_7>:
     5e4:	80 9e a0 c1                                         ....

000005e8 <cols_6>:
     5e8:	7c 92 92 4d                                         |..M

000005ec <cols_5>:
     5ec:	e4 a2 a2 9d                                         ....

000005f0 <cols_4>:
     5f0:	18 28 48 ff                                         .(H.

000005f4 <cols_3>:
     5f4:	44 92 92 6d                                         D..m

000005f8 <cols_2>:
     5f8:	46 8a 92 63                                         F..c

000005fc <cols_1>:
     5fc:	42 fe 03                                            B..

000005ff <cols_0>:
     5ff:	7c 92 a2 7d                                         |..}

00000603 <cols_Z>:
     603:	86 8a 92 a2 c3                                      .....

00000608 <cols_Y>:
     608:	e0 10 0e 10 e1                                      .....

0000060d <cols_X>:
     60d:	c6 28 10 28 c7                                      .(.(.

00000612 <cols_W>:
     612:	fc 02 1c 02 fd                                      .....

00000617 <cols_V>:
     617:	f8 04 02 04 f9                                      .....

0000061c <cols_U>:
     61c:	fc 02 02 fd                                         ....

00000620 <cols_T>:
     620:	80 80 fe 80 81                                      .....

00000625 <cols_S>:
     625:	64 92 92 4d                                         d..M

00000629 <cols_R>:
     629:	fe 90 98 67                                         ...g

0000062d <cols_Q>:
     62d:	7c 82 8a 7c 03                                      |..|.

00000632 <cols_P>:
     632:	fe 90 90 61                                         ...a

00000636 <cols_O>:
     636:	7c 82 82 7d                                         |..}

0000063a <cols_N>:
     63a:	fe 20 10 ff                                         . ..

0000063e <cols_M>:
     63e:	fe 40 30 40 ff                                      .@0@.

00000643 <cols_L>:
     643:	fe 02 02 03                                         ....

00000647 <cols_K>:
     647:	fe 10 28 c7                                         ..(.

0000064b <cols_J>:
     64b:	04 02 02 fd                                         ....

0000064f <cols_I>:
     64f:	82 fe 83                                            ...

00000652 <cols_H>:
     652:	fe 10 10 ff                                         ....

00000656 <cols_G>:
     656:	7c 82 92 5d                                         |..]

0000065a <cols_F>:
     65a:	fe 90 90 81                                         ....

0000065e <cols_E>:
     65e:	fe 92 92 83                                         ....

00000662 <cols_D>:
     662:	fe 82 82 7d                                         ...}

00000666 <cols_C>:
     666:	7c 82 82 45                                         |..E

0000066a <cols_B>:
     66a:	fe 92 92 6d                                         ...m

0000066e <cols_A>:
     66e:	7e 90 90 7f                                         ~...

00000672 <__c.2082>:
     672:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000679 <__c.2078>:
     679:	1b 5b 25 64 6d 00                                   .[%dm.

0000067f <__c.2068>:
     67f:	1b 5b 32 4a 00                                      .[2J.

00000684 <__c.2058>:
     684:	1b 5b 30 6d 00                                      .[0m.

00000689 <__c.2033>:
     689:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000692 <__ctors_end>:
     692:	11 24       	eor	r1, r1
     694:	1f be       	out	0x3f, r1	; 63
     696:	cf ef       	ldi	r28, 0xFF	; 255
     698:	d8 e0       	ldi	r29, 0x08	; 8
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61

0000069e <__do_copy_data>:
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	ec e8       	ldi	r30, 0x8C	; 140
     6a6:	f7 e2       	ldi	r31, 0x27	; 39
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__do_copy_data+0x10>
     6aa:	05 90       	lpm	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	a4 3a       	cpi	r26, 0xA4	; 164
     6b0:	b1 07       	cpc	r27, r17
     6b2:	d9 f7       	brne	.-10     	; 0x6aa <__do_copy_data+0xc>

000006b4 <__do_clear_bss>:
     6b4:	23 e0       	ldi	r18, 0x03	; 3
     6b6:	a4 ea       	ldi	r26, 0xA4	; 164
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
     6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
     6be:	a6 36       	cpi	r26, 0x66	; 102
     6c0:	b2 07       	cpc	r27, r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
     6c4:	0e 94 2b 0c 	call	0x1856	; 0x1856 <main>
     6c8:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <_exit>

000006cc <__bad_interrupt>:
     6cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6d0:	e8 e6       	ldi	r30, 0x68	; 104
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6da:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6dc:	ec e6       	ldi	r30, 0x6C	; 108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 60       	ori	r24, 0x0F	; 15
     6e4:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6e6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
     6ea:	08 95       	ret

000006ec <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6ec:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
     6f0:	18 16       	cp	r1, r24
     6f2:	3c f5       	brge	.+78     	; 0x742 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6f4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6f8:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6fa:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6fc:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <__data_end>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	b4 f0       	brlt	.+44     	; 0x730 <button_pushed+0x44>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     70a:	f9 01       	movw	r30, r18
     70c:	eb 55       	subi	r30, 0x5B	; 91
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	40 81       	ld	r20, Z
     712:	f9 01       	movw	r30, r18
     714:	ec 55       	subi	r30, 0x5C	; 92
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	29 2f       	mov	r18, r25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <__data_end>
     724:	04 2e       	mov	r0, r20
     726:	00 0c       	add	r0, r0
     728:	55 0b       	sbc	r21, r21
     72a:	24 17       	cp	r18, r20
     72c:	35 07       	cpc	r19, r21
     72e:	6c f3       	brlt	.-38     	; 0x70a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     730:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <__data_end>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <__data_end>
		
		if(interrupts_were_enabled) {
     73a:	66 23       	and	r22, r22
     73c:	1c f4       	brge	.+6      	; 0x744 <button_pushed+0x58>
			// Turn them back on again
			sei();
     73e:	78 94       	sei
     740:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     742:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     744:	08 95       	ret

00000746 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     764:	43 b1       	in	r20, 0x03	; 3
     766:	4f 70       	andi	r20, 0x0F	; 15
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     76c:	64 2f       	mov	r22, r20
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <__data_end>
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	04 f5       	brge	.+64     	; 0x7b8 <__vector_5+0x72>
     778:	9b 01       	movw	r18, r22
     77a:	08 2e       	mov	r0, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_5+0x3c>
     77e:	35 95       	asr	r19
     780:	27 95       	ror	r18
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <__vector_5+0x38>
     786:	20 ff       	sbrs	r18, 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     78a:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	08 2e       	mov	r0, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x52>
     794:	35 95       	asr	r19
     796:	27 95       	ror	r18
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <__vector_5+0x4e>
     79c:	20 fd       	sbrc	r18, 0
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7a0:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <__data_end>
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	2e 0f       	add	r18, r30
     7a8:	20 93 a4 01 	sts	0x01A4, r18	; 0x8001a4 <__data_end>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 0b       	sbc	r31, r31
     7b2:	eb 55       	subi	r30, 0x5B	; 91
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f6       	brne	.-80     	; 0x770 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7c0:	40 93 a9 01 	sts	0x01A9, r20	; 0x8001a9 <last_button_state>
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <is_ghost_home>:
}

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
     7e2:	6f 30       	cpi	r22, 0x0F	; 15
     7e4:	39 f4       	brne	.+14     	; 0x7f4 <is_ghost_home+0x12>
		return 1;
     7e6:	94 ef       	ldi	r25, 0xF4	; 244
     7e8:	98 0f       	add	r25, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	97 30       	cpi	r25, 0x07	; 7
     7ee:	60 f0       	brcs	.+24     	; 0x808 <is_ghost_home+0x26>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
     7f4:	6e 30       	cpi	r22, 0x0E	; 14
     7f6:	39 f4       	brne	.+14     	; 0x806 <is_ghost_home+0x24>

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
		return 1;
     7f8:	92 ef       	ldi	r25, 0xF2	; 242
     7fa:	98 0f       	add	r25, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	93 30       	cpi	r25, 0x03	; 3
     800:	18 f0       	brcs	.+6      	; 0x808 <is_ghost_home+0x26>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
			&& x <= GHOST_HOME_ENTRY_X_RIGHT) {
		return 1;
	} else {
		return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     808:	08 95       	ret

0000080a <what_is_in_dirn>:

// what_is_in_dirn(x,y,direction) returns what is in the cell one from 
// the cell at (x,y) in the given direction - provided that is not off
// the game field. (If it is, we just indicate that a wall is there.)
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
	switch(direction) {
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <what_is_in_dirn+0x30>
     816:	28 f0       	brcs	.+10     	; 0x822 <what_is_in_dirn+0x18>
     818:	42 30       	cpi	r20, 0x02	; 2
     81a:	49 f0       	breq	.+18     	; 0x82e <what_is_in_dirn+0x24>
     81c:	43 30       	cpi	r20, 0x03	; 3
     81e:	99 f0       	breq	.+38     	; 0x846 <what_is_in_dirn+0x3c>
     820:	5e c0       	rjmp	.+188    	; 0x8de <what_is_in_dirn+0xd4>
		case DIRN_LEFT:
			if(x == 0) {
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <what_is_in_dirn+0x1e>
     826:	5d c0       	rjmp	.+186    	; 0x8e2 <what_is_in_dirn+0xd8>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     828:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = -1;
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	11 c0       	rjmp	.+34     	; 0x850 <what_is_in_dirn+0x46>
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
     82e:	8e 31       	cpi	r24, 0x1E	; 30
     830:	09 f4       	brne	.+2      	; 0x834 <what_is_in_dirn+0x2a>
     832:	59 c0       	rjmp	.+178    	; 0x8e6 <what_is_in_dirn+0xdc>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     834:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = 1;
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0b c0       	rjmp	.+22     	; 0x850 <what_is_in_dirn+0x46>
			break;
		case DIRN_UP:
			if(y == 0) {
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <what_is_in_dirn+0x36>
     83e:	55 c0       	rjmp	.+170    	; 0x8ea <what_is_in_dirn+0xe0>
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = -1;
     840:	2f ef       	ldi	r18, 0xFF	; 255
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <what_is_in_dirn+0x46>
				return CELL_IS_WALL;
			}
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
     846:	6e 31       	cpi	r22, 0x1E	; 30
     848:	09 f4       	brne	.+2      	; 0x84c <what_is_in_dirn+0x42>
     84a:	51 c0       	rjmp	.+162    	; 0x8ee <what_is_in_dirn+0xe4>
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = 1;
     84c:	21 e0       	ldi	r18, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     84e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
     850:	62 0f       	add	r22, r18
     852:	89 0f       	add	r24, r25
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
     854:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <pacman_x>
     858:	89 13       	cpse	r24, r25
     85a:	05 c0       	rjmp	.+10     	; 0x866 <what_is_in_dirn+0x5c>
     85c:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <pacman_y>
     860:	69 17       	cp	r22, r25
     862:	09 f4       	brne	.+2      	; 0x866 <what_is_in_dirn+0x5c>
     864:	46 c0       	rjmp	.+140    	; 0x8f2 <what_is_in_dirn+0xe8>
     866:	a3 eb       	ldi	r26, 0xB3	; 179
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	ef ea       	ldi	r30, 0xAF	; 175
     86c:	f1 e0       	ldi	r31, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     86e:	90 e0       	ldi	r25, 0x00	; 0
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     870:	2d 91       	ld	r18, X+
     872:	82 13       	cpse	r24, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <what_is_in_dirn+0x74>
     876:	20 81       	ld	r18, Z
     878:	62 17       	cp	r22, r18
     87a:	09 f4       	brne	.+2      	; 0x87e <what_is_in_dirn+0x74>
     87c:	3c c0       	rjmp	.+120    	; 0x8f6 <what_is_in_dirn+0xec>
     87e:	9f 5f       	subi	r25, 0xFF	; 255
     880:	31 96       	adiw	r30, 0x01	; 1
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	a9 f7       	brne	.-22     	; 0x870 <what_is_in_dirn+0x66>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     886:	46 2f       	mov	r20, r22
     888:	50 e0       	ldi	r21, 0x00	; 0
	// Extract the value for the column x (which is in bit x)
	if(dots_on_row & (1UL<< x)) {
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     88e:	fa 01       	movw	r30, r20
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e4 54       	subi	r30, 0x44	; 68
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
			if(x == ghost_x[i] && y == ghost_y[i]) {
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
     89c:	c0 80       	ld	r12, Z
     89e:	d1 80       	ldd	r13, Z+1	; 0x01
     8a0:	e2 80       	ldd	r14, Z+2	; 0x02
     8a2:	f3 80       	ldd	r15, Z+3	; 0x03
     8a4:	08 2e       	mov	r0, r24
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <what_is_in_dirn+0xa6>
     8a8:	f6 94       	lsr	r15
     8aa:	e7 94       	ror	r14
     8ac:	d7 94       	ror	r13
     8ae:	c7 94       	ror	r12
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <what_is_in_dirn+0x9e>
     8b4:	c0 fc       	sbrc	r12, 0
     8b6:	21 c0       	rjmp	.+66     	; 0x8fa <what_is_in_dirn+0xf0>
//
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
     8b8:	9f e1       	ldi	r25, 0x1F	; 31
     8ba:	94 9f       	mul	r25, r20
     8bc:	f0 01       	movw	r30, r0
     8be:	95 9f       	mul	r25, r21
     8c0:	f0 0d       	add	r31, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e2 0f       	add	r30, r18
     8c6:	f3 1f       	adc	r31, r19
     8c8:	ea 5c       	subi	r30, 0xCA	; 202
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	e4 91       	lpm	r30, Z
	return (wall_character != ' ' && wall_character != '.'
			&& wall_character != 'P');
     8ce:	e0 32       	cpi	r30, 0x20	; 32
     8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0x3>
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
	return (wall_character != ' ' && wall_character != '.'
     8d2:	ee 32       	cpi	r30, 0x2E	; 46
     8d4:	b1 f0       	breq	.+44     	; 0x902 <__stack+0x3>
			&& wall_character != 'P');
     8d6:	e0 35       	cpi	r30, 0x50	; 80
     8d8:	a1 f0       	breq	.+40     	; 0x902 <__stack+0x3>
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	17 c0       	rjmp	.+46     	; 0x90c <__stack+0xd>
			}
			delta_y = 1;
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
     8de:	8e ef       	ldi	r24, 0xFE	; 254
     8e0:	15 c0       	rjmp	.+42     	; 0x90c <__stack+0xd>
	int8_t delta_y = 0;
	switch(direction) {
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
     8e2:	8e ef       	ldi	r24, 0xFE	; 254
     8e4:	13 c0       	rjmp	.+38     	; 0x90c <__stack+0xd>
			delta_x = -1;
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
     8e6:	8e ef       	ldi	r24, 0xFE	; 254
     8e8:	11 c0       	rjmp	.+34     	; 0x90c <__stack+0xd>
			delta_x = 1;
			break;
		case DIRN_UP:
			if(y == 0) {
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
     8ea:	8e ef       	ldi	r24, 0xFE	; 254
     8ec:	0f c0       	rjmp	.+30     	; 0x90c <__stack+0xd>
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
     8ee:	8e ef       	ldi	r24, 0xFE	; 254
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <__stack+0xd>
// what_is_at(x,y) returns
//		CELL_EMPTY, CELL_CONTAINS_PACDOT, CELL_CONTAINS_PACMAN, CELL_IS_WALL,
//		CELL_IS_GHOST_HOME or the ghost number if the cell contains a ghost
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
     8f2:	8d ef       	ldi	r24, 0xFD	; 253
     8f4:	0b c0       	rjmp	.+22     	; 0x90c <__stack+0xd>
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     8f6:	89 2f       	mov	r24, r25
     8f8:	09 c0       	rjmp	.+18     	; 0x90c <__stack+0xd>
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
     8fa:	8c ef       	ldi	r24, 0xFC	; 252
     8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
		return CELL_IS_GHOST_HOME;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	05 c0       	rjmp	.+10     	; 0x90c <__stack+0xd>
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
     902:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     906:	81 11       	cpse	r24, r1
     908:	fa cf       	rjmp	.-12     	; 0x8fe <what_is_in_dirn+0xf4>
		return CELL_IS_GHOST_HOME;
	}
	// If we get here, we haven't found anything else - cell is empty
	return CELL_EMPTY;
     90a:	8b ef       	ldi	r24, 0xFB	; 251
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
}
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
     914:	08 95       	ret

00000916 <determine_dirns_ghost_can_move_in>:
// - a pacdot
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
     916:	cf 92       	push	r12
     918:	df 92       	push	r13
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	08 2f       	mov	r16, r24
     928:	f6 2e       	mov	r15, r22
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
     92a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     92e:	e8 2e       	mov	r14, r24
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
     934:	10 e0       	ldi	r17, 0x00	; 0
		if(adjacent_cell_contents < CELL_IS_WALL) {
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     936:	cc 24       	eor	r12, r12
     938:	c3 94       	inc	r12
     93a:	d1 2c       	mov	r13, r1
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		int8_t adjacent_cell_contents = what_is_in_dirn(x,y,dirn);
     93c:	4c 2f       	mov	r20, r28
     93e:	6f 2d       	mov	r22, r15
     940:	80 2f       	mov	r24, r16
     942:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
		
		if(adjacent_cell_contents < CELL_IS_WALL) {
     946:	8e 3f       	cpi	r24, 0xFE	; 254
     948:	4c f4       	brge	.+18     	; 0x95c <determine_dirns_ghost_can_move_in+0x46>
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
     94a:	c6 01       	movw	r24, r12
     94c:	0c 2e       	mov	r0, r28
     94e:	02 c0       	rjmp	.+4      	; 0x954 <determine_dirns_ghost_can_move_in+0x3e>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <determine_dirns_ghost_can_move_in+0x3a>
     958:	18 2b       	or	r17, r24
     95a:	0c c0       	rjmp	.+24     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
     95c:	ee 20       	and	r14, r14
     95e:	51 f0       	breq	.+20     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	41 f4       	brne	.+16     	; 0x974 <determine_dirns_ghost_can_move_in+0x5e>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     964:	c6 01       	movw	r24, r12
     966:	0c 2e       	mov	r0, r28
     968:	02 c0       	rjmp	.+4      	; 0x96e <determine_dirns_ghost_can_move_in+0x58>
     96a:	88 0f       	add	r24, r24
     96c:	99 1f       	adc	r25, r25
     96e:	0a 94       	dec	r0
     970:	e2 f7       	brpl	.-8      	; 0x96a <determine_dirns_ghost_can_move_in+0x54>
     972:	18 2b       	or	r17, r24
     974:	21 96       	adiw	r28, 0x01	; 1
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
     976:	c4 30       	cpi	r28, 0x04	; 4
     978:	d1 05       	cpc	r29, r1
     97a:	01 f7       	brne	.-64     	; 0x93c <determine_dirns_ghost_can_move_in+0x26>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
		} 
	}
	return return_value;
}
     97c:	81 2f       	mov	r24, r17
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <draw_pacman_at>:

// We draw the pac-man at the given location. The character used
// to draw the pac-man is based on the direction it is currently
// facing.
static void draw_pacman_at(uint8_t x, uint8_t y) {
	move_cursor(x+1,y+1);
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	set_display_attribute(PACMAN_COLOUR);
     99e:	81 e2       	ldi	r24, 0x21	; 33
     9a0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <set_display_attribute>
	printf("%s", pacman_characters[pacman_direction]);
     9a4:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <pacman_direction>
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	e1 57       	subi	r30, 0x71	; 113
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	81 81       	ldd	r24, Z+1	; 0x01
     9b4:	8f 93       	push	r24
     9b6:	80 81       	ld	r24, Z
     9b8:	8f 93       	push	r24
     9ba:	83 e1       	ldi	r24, 0x13	; 19
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
	normal_display_mode();
     9c6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <normal_display_mode>
}
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	08 95       	ret

000009d4 <draw_ghost_at>:

// ghostnum is assumed to be in the range 0..NUM_GHOSTS-1
// x and y values are assumed to be valid
static void draw_ghost_at(uint8_t ghostnum, uint8_t x, uint8_t y) {
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	18 2f       	mov	r17, r24
     9de:	06 2f       	mov	r16, r22
	move_cursor(x+1,y+1);
     9e0:	c4 2f       	mov	r28, r20
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	86 2f       	mov	r24, r22
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
     9f4:	e1 2f       	mov	r30, r17
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e9 56       	subi	r30, 0x69	; 105
     9fa:	fe 4f       	sbci	r31, 0xFE	; 254
     9fc:	80 81       	ld	r24, Z
     9fe:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <set_display_attribute>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     a02:	cc 0f       	add	r28, r28
     a04:	dd 1f       	adc	r29, r29
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	c4 54       	subi	r28, 0x44	; 68
     a0c:	de 4f       	sbci	r29, 0xFE	; 254
	move_cursor(x+1,y+1);
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
	// If there is a pac-dot at this location we output a "." otherwise
	// we output a space (which will be shown as a block in reverse video)
	if(is_pacdot_at(x,y)) {
     a0e:	88 81       	ld	r24, Y
     a10:	99 81       	ldd	r25, Y+1	; 0x01
     a12:	aa 81       	ldd	r26, Y+2	; 0x02
     a14:	bb 81       	ldd	r27, Y+3	; 0x03
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <draw_ghost_at+0x4c>
     a18:	b6 95       	lsr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	0a 95       	dec	r16
     a22:	d2 f7       	brpl	.-12     	; 0xa18 <draw_ghost_at+0x44>
     a24:	80 ff       	sbrs	r24, 0
     a26:	05 c0       	rjmp	.+10     	; 0xa32 <draw_ghost_at+0x5e>
		printf(".");
     a28:	8e e2       	ldi	r24, 0x2E	; 46
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <draw_ghost_at+0x66>
	} else {
		printf(" ");
     a32:	80 e2       	ldi	r24, 0x20	; 32
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
	}
	// Return to normal display mode to ensure we don't use this
	// background colour for any other printing
	normal_display_mode();
     a3a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <normal_display_mode>
}
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <erase_pixel_at>:

// Erase the pixel at the given location - presumably because the 
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	18 2f       	mov	r17, r24
	move_cursor(x+1, y+1);
     a50:	c6 2f       	mov	r28, r22
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     a62:	cc 0f       	add	r28, r28
     a64:	dd 1f       	adc	r29, r29
     a66:	cc 0f       	add	r28, r28
     a68:	dd 1f       	adc	r29, r29
     a6a:	c4 54       	subi	r28, 0x44	; 68
     a6c:	de 4f       	sbci	r29, 0xFE	; 254
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
	move_cursor(x+1, y+1);
	if(is_pacdot_at(x,y)) {
     a6e:	88 81       	ld	r24, Y
     a70:	99 81       	ldd	r25, Y+1	; 0x01
     a72:	aa 81       	ldd	r26, Y+2	; 0x02
     a74:	bb 81       	ldd	r27, Y+3	; 0x03
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <erase_pixel_at+0x38>
     a78:	b6 95       	lsr	r27
     a7a:	a7 95       	ror	r26
     a7c:	97 95       	ror	r25
     a7e:	87 95       	ror	r24
     a80:	1a 95       	dec	r17
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <erase_pixel_at+0x30>
     a84:	80 ff       	sbrs	r24, 0
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <erase_pixel_at+0x4a>
		printf(".");
     a88:	8e e2       	ldi	r24, 0x2E	; 46
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <erase_pixel_at+0x52>
 	} else {
		printf(" ");
     a92:	80 e2       	ldi	r24, 0x20	; 32
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
	 }
}
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	1f 91       	pop	r17
     aa0:	08 95       	ret

00000aa2 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     ac6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <clear_terminal>
	normal_display_mode();
     aca:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <normal_display_mode>
	hide_cursor();
     ace:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
     ade:	0f 2e       	mov	r0, r31
     ae0:	f5 e5       	ldi	r31, 0x55	; 85
     ae2:	6f 2e       	mov	r6, r31
     ae4:	f1 e0       	ldi	r31, 0x01	; 1
     ae6:	7f 2e       	mov	r7, r31
     ae8:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     aea:	0f 2e       	mov	r0, r31
     aec:	fe e3       	ldi	r31, 0x3E	; 62
     aee:	2f 2e       	mov	r2, r31
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	3f 2e       	mov	r3, r31
     af4:	f0 2d       	mov	r31, r0
     af6:	0f 2e       	mov	r0, r31
     af8:	f3 e1       	ldi	r31, 0x13	; 19
     afa:	4f 2e       	mov	r4, r31
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	5f 2e       	mov	r5, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	b6 c0       	rjmp	.+364    	; 0xc70 <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     b04:	f6 01       	movw	r30, r12
     b06:	84 91       	lpm	r24, Z
			switch(wall_character) {
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	b0 97       	sbiw	r30, 0x20	; 32
     b0e:	ed 35       	cpi	r30, 0x5D	; 93
     b10:	f1 05       	cpc	r31, r1
     b12:	08 f0       	brcs	.+2      	; 0xb16 <initialise_game_level+0x74>
     b14:	96 c0       	rjmp	.+300    	; 0xc42 <initialise_game_level+0x1a0>
     b16:	e2 5c       	subi	r30, 0xC2	; 194
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     b1e:	9f 92       	push	r9
     b20:	8f 92       	push	r8
     b22:	5f 92       	push	r5
     b24:	4f 92       	push	r4
     b26:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	8b c0       	rjmp	.+278    	; 0xc4a <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     b34:	bf 92       	push	r11
     b36:	af 92       	push	r10
     b38:	5f 92       	push	r5
     b3a:	4f 92       	push	r4
     b3c:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	80 c0       	rjmp	.+256    	; 0xc4a <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	5f 92       	push	r5
     b50:	4f 92       	push	r4
     b52:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	75 c0       	rjmp	.+234    	; 0xc4a <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     b60:	1f 93       	push	r17
     b62:	0f 93       	push	r16
     b64:	5f 92       	push	r5
     b66:	4f 92       	push	r4
     b68:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	6a c0       	rjmp	.+212    	; 0xc4a <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     b76:	ff 92       	push	r15
     b78:	ef 92       	push	r14
     b7a:	5f 92       	push	r5
     b7c:	4f 92       	push	r4
     b7e:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	5f c0       	rjmp	.+190    	; 0xc4a <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     b8c:	8a e2       	ldi	r24, 0x2A	; 42
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	5f 92       	push	r5
     b96:	4f 92       	push	r4
     b98:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	52 c0       	rjmp	.+164    	; 0xc4a <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     ba6:	8e e2       	ldi	r24, 0x2E	; 46
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	5f 92       	push	r5
     bb0:	4f 92       	push	r4
     bb2:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     bc0:	82 e3       	ldi	r24, 0x32	; 50
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	9f 93       	push	r25
     bc6:	8f 93       	push	r24
     bc8:	5f 92       	push	r5
     bca:	4f 92       	push	r4
     bcc:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	38 c0       	rjmp	.+112    	; 0xc4a <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     bda:	86 e3       	ldi	r24, 0x36	; 54
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	5f 92       	push	r5
     be4:	4f 92       	push	r4
     be6:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	2b c0       	rjmp	.+86     	; 0xc4a <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     bf4:	8a e3       	ldi	r24, 0x3A	; 58
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	5f 92       	push	r5
     bfe:	4f 92       	push	r4
     c00:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	1e c0       	rjmp	.+60     	; 0xc4a <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     c0e:	3f 92       	push	r3
     c10:	2f 92       	push	r2
     c12:	5f 92       	push	r5
     c14:	4f 92       	push	r4
     c16:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <initialise_game_level+0x1a8>
				case 'P':	printf("."); break;	// power-pellet initially just implemented as a pac-dot
     c2e:	8e e2       	ldi	r24, 0x2E	; 46
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     c38:	8e e2       	ldi	r24, 0x2E	; 46
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     c40:	04 c0       	rjmp	.+8      	; 0xc4a <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     c42:	88 e7       	ldi	r24, 0x78	; 120
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     c4a:	ff ef       	ldi	r31, 0xFF	; 255
     c4c:	cf 1a       	sub	r12, r31
     c4e:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     c50:	6c 14       	cp	r6, r12
     c52:	7d 04       	cpc	r7, r13
     c54:	09 f0       	breq	.+2      	; 0xc58 <initialise_game_level+0x1b6>
     c56:	56 cf       	rjmp	.-340    	; 0xb04 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     c58:	8a e0       	ldi	r24, 0x0A	; 10
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 a3 10 	call	0x2146	; 0x2146 <putchar>
     c60:	2f e1       	ldi	r18, 0x1F	; 31
     c62:	62 0e       	add	r6, r18
     c64:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     c66:	86 e1       	ldi	r24, 0x16	; 22
     c68:	95 e0       	ldi	r25, 0x05	; 5
     c6a:	86 15       	cp	r24, r6
     c6c:	97 05       	cpc	r25, r7
     c6e:	d9 f0       	breq	.+54     	; 0xca6 <initialise_game_level+0x204>
     c70:	63 01       	movw	r12, r6
     c72:	9f e1       	ldi	r25, 0x1F	; 31
     c74:	c9 1a       	sub	r12, r25
     c76:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c78:	0f 2e       	mov	r0, r31
     c7a:	f6 e2       	ldi	r31, 0x26	; 38
     c7c:	ef 2e       	mov	r14, r31
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	ff 2e       	mov	r15, r31
     c82:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c84:	02 e2       	ldi	r16, 0x22	; 34
     c86:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     c88:	ce e1       	ldi	r28, 0x1E	; 30
     c8a:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     c8c:	0f 2e       	mov	r0, r31
     c8e:	fa e1       	ldi	r31, 0x1A	; 26
     c90:	af 2e       	mov	r10, r31
     c92:	f1 e0       	ldi	r31, 0x01	; 1
     c94:	bf 2e       	mov	r11, r31
     c96:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     c98:	0f 2e       	mov	r0, r31
     c9a:	f6 e1       	ldi	r31, 0x16	; 22
     c9c:	8f 2e       	mov	r8, r31
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	9f 2e       	mov	r9, r31
     ca2:	f0 2d       	mov	r31, r0
     ca4:	2f cf       	rjmp	.-418    	; 0xb04 <initialise_game_level+0x62>
     ca6:	cc eb       	ldi	r28, 0xBC	; 188
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' || wall_character == 'P') {
				pacdots[y] |= (1UL<<x);
     cb2:	81 2c       	mov	r8, r1
     cb4:	91 2c       	mov	r9, r1
     cb6:	54 01       	movw	r10, r8
     cb8:	83 94       	inc	r8
     cba:	de 01       	movw	r26, r28

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     cbc:	18 82       	st	Y, r1
     cbe:	19 82       	std	Y+1, r1	; 0x01
     cc0:	1a 82       	std	Y+2, r1	; 0x02
     cc2:	1b 82       	std	Y+3, r1	; 0x03
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     cc8:	fc 01       	movw	r30, r24
     cca:	e2 0f       	add	r30, r18
     ccc:	f3 1f       	adc	r31, r19
     cce:	ea 5c       	subi	r30, 0xCA	; 202
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	e4 91       	lpm	r30, Z
			if(wall_character == '.' || wall_character == 'P') {
     cd4:	ee 32       	cpi	r30, 0x2E	; 46
     cd6:	11 f0       	breq	.+4      	; 0xcdc <initialise_game_level+0x23a>
     cd8:	e0 35       	cpi	r30, 0x50	; 80
     cda:	d1 f4       	brne	.+52     	; 0xd10 <initialise_game_level+0x26e>
				pacdots[y] |= (1UL<<x);
     cdc:	4d 90       	ld	r4, X+
     cde:	5d 90       	ld	r5, X+
     ce0:	6d 90       	ld	r6, X+
     ce2:	7c 90       	ld	r7, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	75 01       	movw	r14, r10
     ce8:	64 01       	movw	r12, r8
     cea:	08 2e       	mov	r0, r24
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <initialise_game_level+0x254>
     cee:	cc 0c       	add	r12, r12
     cf0:	dd 1c       	adc	r13, r13
     cf2:	ee 1c       	adc	r14, r14
     cf4:	ff 1c       	adc	r15, r15
     cf6:	0a 94       	dec	r0
     cf8:	d2 f7       	brpl	.-12     	; 0xcee <initialise_game_level+0x24c>
     cfa:	c4 28       	or	r12, r4
     cfc:	d5 28       	or	r13, r5
     cfe:	e6 28       	or	r14, r6
     d00:	f7 28       	or	r15, r7
     d02:	cd 92       	st	X+, r12
     d04:	dd 92       	st	X+, r13
     d06:	ed 92       	st	X+, r14
     d08:	fc 92       	st	X, r15
     d0a:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     d0c:	4f 5f       	subi	r20, 0xFF	; 255
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	01 96       	adiw	r24, 0x01	; 1
static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     d12:	8f 31       	cpi	r24, 0x1F	; 31
     d14:	91 05       	cpc	r25, r1
     d16:	c1 f6       	brne	.-80     	; 0xcc8 <initialise_game_level+0x226>
     d18:	21 5e       	subi	r18, 0xE1	; 225
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	24 96       	adiw	r28, 0x04	; 4
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d1e:	21 3c       	cpi	r18, 0xC1	; 193
     d20:	e3 e0       	ldi	r30, 0x03	; 3
     d22:	3e 07       	cpc	r19, r30
     d24:	51 f6       	brne	.-108    	; 0xcba <initialise_game_level+0x218>
     d26:	50 93 bb 01 	sts	0x01BB, r21	; 0x8001bb <num_pacdots+0x1>
     d2a:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     d2e:	8f e0       	ldi	r24, 0x0F	; 15
     d30:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     d34:	87 e1       	ldi	r24, 0x17	; 23
     d36:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     d40:	67 e1       	ldi	r22, 0x17	; 23
     d42:	8f e0       	ldi	r24, 0x0F	; 15
     d44:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
     d48:	0f 2e       	mov	r0, r31
     d4a:	f3 eb       	ldi	r31, 0xB3	; 179
     d4c:	af 2e       	mov	r10, r31
     d4e:	f1 e0       	ldi	r31, 0x01	; 1
     d50:	bf 2e       	mov	r11, r31
     d52:	f0 2d       	mov	r31, r0
     d54:	0f 2e       	mov	r0, r31
     d56:	ff ea       	ldi	r31, 0xAF	; 175
     d58:	cf 2e       	mov	r12, r31
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	df 2e       	mov	r13, r31
     d5e:	f0 2d       	mov	r31, r0
     d60:	0f 2e       	mov	r0, r31
     d62:	fb ea       	ldi	r31, 0xAB	; 171
     d64:	ef 2e       	mov	r14, r31
     d66:	f1 e0       	ldi	r31, 0x01	; 1
     d68:	ff 2e       	mov	r15, r31
     d6a:	f0 2d       	mov	r31, r0
     d6c:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d6e:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     d70:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     d72:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     d74:	f5 01       	movw	r30, r10
     d76:	d1 93       	st	Z+, r29
     d78:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     d7a:	f6 01       	movw	r30, r12
     d7c:	11 93       	st	Z+, r17
     d7e:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     d80:	f7 01       	movw	r30, r14
     d82:	01 93       	st	Z+, r16
     d84:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     d86:	41 2f       	mov	r20, r17
     d88:	6d 2f       	mov	r22, r29
     d8a:	8c 2f       	mov	r24, r28
     d8c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
     d90:	cf 5f       	subi	r28, 0xFF	; 255
     d92:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d94:	c4 30       	cpi	r28, 0x04	; 4
     d96:	71 f7       	brne	.-36     	; 0xd74 <initialise_game_level+0x2d2>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	cf 90       	pop	r12
     da8:	bf 90       	pop	r11
     daa:	af 90       	pop	r10
     dac:	9f 90       	pop	r9
     dae:	8f 90       	pop	r8
     db0:	7f 90       	pop	r7
     db2:	6f 90       	pop	r6
     db4:	5f 90       	pop	r5
     db6:	4f 90       	pop	r4
     db8:	3f 90       	pop	r3
     dba:	2f 90       	pop	r2
     dbc:	08 95       	ret

00000dbe <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     dbe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <initialise_game_level>
	game_running = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <game_running>
     dc8:	08 95       	ret

00000dca <move_pacman>:
}

int8_t move_pacman(void) {
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
	if(!game_running) {
     dd8:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <game_running>
     ddc:	88 23       	and	r24, r24
     dde:	09 f4       	brne	.+2      	; 0xde2 <move_pacman+0x18>
     de0:	04 c1       	rjmp	.+520    	; 0xfea <move_pacman+0x220>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     de2:	10 91 b8 01 	lds	r17, 0x01B8	; 0x8001b8 <pacman_y>
     de6:	d0 91 b9 01 	lds	r29, 0x01B9	; 0x8001b9 <pacman_x>
     dea:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <pacman_direction>
     dee:	61 2f       	mov	r22, r17
     df0:	8d 2f       	mov	r24, r29
     df2:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     df6:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL)  {
     df8:	8e 3f       	cpi	r24, 0xFE	; 254
     dfa:	09 f4       	brne	.+2      	; 0xdfe <move_pacman+0x34>
     dfc:	f8 c0       	rjmp	.+496    	; 0xfee <move_pacman+0x224>
		
		
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     dfe:	61 2f       	mov	r22, r17
     e00:	8d 2f       	mov	r24, r29
     e02:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	// Update the pac-man location
	
	 if (pacman_direction == DIRN_LEFT) {
     e06:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <pacman_direction>
     e0a:	81 11       	cpse	r24, r1
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <move_pacman+0x62>
		 pacman_x--;
     e0e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pacman_x>
     e12:	81 50       	subi	r24, 0x01	; 1
     e14:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pacman_x>

		 if (pacman_x == 0 && pacman_y == 15 ) {
     e18:	81 11       	cpse	r24, r1
     e1a:	25 c0       	rjmp	.+74     	; 0xe66 <move_pacman+0x9c>
     e1c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <pacman_y>
     e20:	8f 30       	cpi	r24, 0x0F	; 15
     e22:	09 f5       	brne	.+66     	; 0xe66 <move_pacman+0x9c>
			 pacman_x = 30 ;
     e24:	8e e1       	ldi	r24, 0x1E	; 30
     e26:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pacman_x>
     e2a:	1d c0       	rjmp	.+58     	; 0xe66 <move_pacman+0x9c>
		 }
		 
		 } else if (pacman_direction == DIRN_RIGHT) {
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	71 f4       	brne	.+28     	; 0xe4c <move_pacman+0x82>
		 pacman_x++;
     e30:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pacman_x>
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <pacman_x>
		 if (pacman_x == 30 && pacman_y == 15 ) {
     e3a:	8e 31       	cpi	r24, 0x1E	; 30
     e3c:	a1 f4       	brne	.+40     	; 0xe66 <move_pacman+0x9c>
     e3e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <pacman_y>
     e42:	8f 30       	cpi	r24, 0x0F	; 15
     e44:	81 f4       	brne	.+32     	; 0xe66 <move_pacman+0x9c>
			 pacman_x = 0 ;
     e46:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <pacman_x>
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <move_pacman+0x9c>
		 }
	 }
		else if(pacman_direction == DIRN_UP) {
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	31 f4       	brne	.+12     	; 0xe5c <move_pacman+0x92>
		 pacman_y--;
     e50:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <pacman_y>
     e54:	81 50       	subi	r24, 0x01	; 1
     e56:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <pacman_y>
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <move_pacman+0x9c>
		 } else {
		 pacman_y++;
     e5c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <pacman_y>
     e60:	8f 5f       	subi	r24, 0xFF	; 255
     e62:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <pacman_y>
	 }

	if(cell_contents >= 0) {
     e66:	cc 23       	and	r28, r28
     e68:	94 f0       	brlt	.+36     	; 0xe8e <move_pacman+0xc4>
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     e6a:	ec 2f       	mov	r30, r28
     e6c:	cc 0f       	add	r28, r28
     e6e:	ff 0b       	sbc	r31, r31
     e70:	e9 56       	subi	r30, 0x69	; 105
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	80 81       	ld	r24, Z
     e76:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     e7a:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <pacman_y>
     e7e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pacman_x>
     e82:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		// Game is over 
		game_running = 0;
     e86:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <game_running>
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	b1 c0       	rjmp	.+354    	; 0xff0 <move_pacman+0x226>
		set_display_attribute(ghost_colours[cell_contents]);
		draw_pacman_at(pacman_x, pacman_y);
		// Game is over 
		game_running = 0;
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
     e8e:	cc 3f       	cpi	r28, 0xFC	; 252
     e90:	09 f0       	breq	.+2      	; 0xe94 <move_pacman+0xca>
     e92:	a3 c0       	rjmp	.+326    	; 0xfda <move_pacman+0x210>
// count of remaining pac-dots.
// See initialise_pacdots() below for information on how the pacdots array
// is initialised.
static void eat_pacdot(void) {
	uint32_t maskval = 1UL << pacman_x; 
	pacdots[pacman_y] &= ~(maskval); 
     e94:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <pacman_y>
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	ee 0f       	add	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	e4 54       	subi	r30, 0x44	; 68
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	00 90 b9 01 	lds	r0, 0x01B9	; 0x8001b9 <pacman_x>
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <move_pacman+0xf2>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	aa 1f       	adc	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	0a 94       	dec	r0
     ebe:	d2 f7       	brpl	.-12     	; 0xeb4 <move_pacman+0xea>
     ec0:	80 95       	com	r24
     ec2:	90 95       	com	r25
     ec4:	a0 95       	com	r26
     ec6:	b0 95       	com	r27
     ec8:	40 81       	ld	r20, Z
     eca:	51 81       	ldd	r21, Z+1	; 0x01
     ecc:	62 81       	ldd	r22, Z+2	; 0x02
     ece:	73 81       	ldd	r23, Z+3	; 0x03
     ed0:	84 23       	and	r24, r20
     ed2:	95 23       	and	r25, r21
     ed4:	a6 23       	and	r26, r22
     ed6:	b7 23       	and	r27, r23
     ed8:	80 83       	st	Z, r24
     eda:	91 83       	std	Z+1, r25	; 0x01
     edc:	a2 83       	std	Z+2, r26	; 0x02
     ede:	b3 83       	std	Z+3, r27	; 0x03
	num_pacdots--;
     ee0:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <num_pacdots>
     ee4:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <num_pacdots+0x1>
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <num_pacdots+0x1>
     eee:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <num_pacdots>
	add_to_score(10);
     ef2:	8a e0       	ldi	r24, 0x0A	; 10
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 3f 0c 	call	0x187e	; 0x187e <add_to_score>
	
	move_cursor (55, 8); 
     efa:	68 e0       	ldi	r22, 0x08	; 8
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	87 e3       	ldi	r24, 0x37	; 55
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf("%13s", "Score: \n"); 
     f06:	82 e4       	ldi	r24, 0x42	; 66
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	8b e4       	ldi	r24, 0x4B	; 75
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
	move_cursor(55,9); 
     f1a:	69 e0       	ldi	r22, 0x09	; 9
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	87 e3       	ldi	r24, 0x37	; 55
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf("%11lu\n", get_score());
     f26:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <get_score>
     f2a:	9f 93       	push	r25
     f2c:	8f 93       	push	r24
     f2e:	7f 93       	push	r23
     f30:	6f 93       	push	r22
     f32:	80 e5       	ldi	r24, 0x50	; 80
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	9f 93       	push	r25
     f38:	8f 93       	push	r24
     f3a:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>

	if (get_score() > get_highscore()) {
     f3e:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <get_score>
     f42:	6b 01       	movw	r12, r22
     f44:	7c 01       	movw	r14, r24
     f46:	0e 94 66 0c 	call	0x18cc	; 0x18cc <get_highscore>
     f4a:	2d b7       	in	r18, 0x3d	; 61
     f4c:	3e b7       	in	r19, 0x3e	; 62
     f4e:	26 5f       	subi	r18, 0xF6	; 246
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	3e bf       	out	0x3e, r19	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	2d bf       	out	0x3d, r18	; 61
     f5c:	6c 15       	cp	r22, r12
     f5e:	7d 05       	cpc	r23, r13
     f60:	8e 05       	cpc	r24, r14
     f62:	9f 05       	cpc	r25, r15
     f64:	20 f4       	brcc	.+8      	; 0xf6e <move_pacman+0x1a4>
		set_highscore(get_score()) ; 
     f66:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <get_score>
     f6a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <set_highscore>
	}
	
	move_cursor(55, 10) ;
     f6e:	6a e0       	ldi	r22, 0x0A	; 10
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	87 e3       	ldi	r24, 0x37	; 55
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf("%s", "High Score:\n");
     f7a:	87 e5       	ldi	r24, 0x57	; 87
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 aa 10 	call	0x2154	; 0x2154 <puts>
	
	move_cursor(55,11); 
     f82:	6b e0       	ldi	r22, 0x0B	; 11
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	87 e3       	ldi	r24, 0x37	; 55
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf("%11lu", get_highscore() );
     f8e:	0e 94 66 0c 	call	0x18cc	; 0x18cc <get_highscore>
     f92:	9f 93       	push	r25
     f94:	8f 93       	push	r24
     f96:	7f 93       	push	r23
     f98:	6f 93       	push	r22
     f9a:	83 e6       	ldi	r24, 0x63	; 99
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	9f 93       	push	r25
     fa0:	8f 93       	push	r24
     fa2:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
	
	move_cursor(50, 15);
     fa6:	6f e0       	ldi	r22, 0x0F	; 15
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	82 e3       	ldi	r24, 0x32	; 50
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf(("Pacdots Remaining: %d"), num_pacdots);
     fb2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <num_pacdots+0x1>
     fb6:	8f 93       	push	r24
     fb8:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <num_pacdots>
     fbc:	8f 93       	push	r24
     fbe:	89 e6       	ldi	r24, 0x69	; 105
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	9f 93       	push	r25
     fc4:	8f 93       	push	r24
     fc6:	0e 94 67 10 	call	0x20ce	; 0x20ce <printf>
     fca:	8d b7       	in	r24, 0x3d	; 61
     fcc:	9e b7       	in	r25, 0x3e	; 62
     fce:	0a 96       	adiw	r24, 0x0a	; 10
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	9e bf       	out	0x3e, r25	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	8d bf       	out	0x3d, r24	; 61
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
			
		}
		draw_pacman_at(pacman_x, pacman_y);
     fda:	60 91 b8 01 	lds	r22, 0x01B8	; 0x8001b8 <pacman_y>
     fde:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pacman_x>
     fe2:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
	}
	return 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	03 c0       	rjmp	.+6      	; 0xff0 <move_pacman+0x226>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <move_pacman+0x226>
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL)  {
		
		
		return 0;	// We can't move - wall is straight ahead
     fee:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	08 95       	ret

00001000 <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
	if(!game_running) {
    1006:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <game_running>
    100a:	99 23       	and	r25, r25
    100c:	a1 f0       	breq	.+40     	; 0x1036 <change_pacman_direction+0x36>
    100e:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
    1010:	10 91 b8 01 	lds	r17, 0x01B8	; 0x8001b8 <pacman_y>
    1014:	d0 91 b9 01 	lds	r29, 0x01B9	; 0x8001b9 <pacman_x>
    1018:	48 2f       	mov	r20, r24
    101a:	61 2f       	mov	r22, r17
    101c:	8d 2f       	mov	r24, r29
    101e:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
    1022:	8e 3f       	cpi	r24, 0xFE	; 254
    1024:	51 f0       	breq	.+20     	; 0x103a <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
    1026:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
    102a:	61 2f       	mov	r22, r17
    102c:	8d 2f       	mov	r24, r29
    102e:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
		return 1;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	03 c0       	rjmp	.+6      	; 0x103c <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	01 c0       	rjmp	.+2      	; 0x103c <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
    103a:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <move_ghost>:


void move_ghost(int8_t ghostnum) {
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
	if(!game_running) {
    104e:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <game_running>
    1052:	99 23       	and	r25, r25
    1054:	09 f4       	brne	.+2      	; 0x1058 <move_ghost+0x14>
    1056:	e2 c1       	rjmp	.+964    	; 0x141c <move_ghost+0x3d8>
    1058:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	ed 54       	subi	r30, 0x4D	; 77
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
    1064:	fc 01       	movw	r30, r24
    1066:	e1 55       	subi	r30, 0x51	; 81
    1068:	fe 4f       	sbci	r31, 0xFE	; 254
    106a:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
    106c:	fc 01       	movw	r30, r24
    106e:	e5 55       	subi	r30, 0x55	; 85
    1070:	fe 4f       	sbci	r31, 0xFE	; 254
    1072:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
    1074:	6f 2d       	mov	r22, r15
    1076:	81 2f       	mov	r24, r17
    1078:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
    107c:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
    107e:	88 23       	and	r24, r24
    1080:	09 f4       	brne	.+2      	; 0x1084 <move_ghost+0x40>
    1082:	cc c1       	rjmp	.+920    	; 0x141c <move_ghost+0x3d8>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
    1084:	6f 2d       	mov	r22, r15
    1086:	81 2f       	mov	r24, r17
    1088:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <move_ghost+0x4e>
    1090:	45 c1       	rjmp	.+650    	; 0x131c <move_ghost+0x2d8>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
    1092:	01 ff       	sbrs	r16, 1
    1094:	43 c1       	rjmp	.+646    	; 0x131c <move_ghost+0x2d8>
    1096:	9a c1       	rjmp	.+820    	; 0x13cc <move_ghost+0x388>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
    1098:	00 91 b9 01 	lds	r16, 0x01B9	; 0x8001b9 <pacman_x>
    109c:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
    109e:	d0 91 b8 01 	lds	r29, 0x01B8	; 0x8001b8 <pacman_y>
    10a2:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
    10a4:	6f 2d       	mov	r22, r15
    10a6:	81 2f       	mov	r24, r17
    10a8:	0e 94 8b 04 	call	0x916	; 0x916 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <move_ghost+0x6e>
    10b0:	b5 c1       	rjmp	.+874    	; 0x141c <move_ghost+0x3d8>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
    10b2:	40 2f       	mov	r20, r16
    10b4:	00 2e       	mov	r0, r16
    10b6:	00 0c       	add	r0, r0
    10b8:	55 0b       	sbc	r21, r21
    10ba:	55 23       	and	r21, r21
    10bc:	1c f4       	brge	.+6      	; 0x10c4 <move_ghost+0x80>
    10be:	51 95       	neg	r21
    10c0:	41 95       	neg	r20
    10c2:	51 09       	sbc	r21, r1
    10c4:	2d 2f       	mov	r18, r29
    10c6:	0d 2e       	mov	r0, r29
    10c8:	00 0c       	add	r0, r0
    10ca:	33 0b       	sbc	r19, r19
    10cc:	33 23       	and	r19, r19
    10ce:	1c f4       	brge	.+6      	; 0x10d6 <move_ghost+0x92>
    10d0:	31 95       	neg	r19
    10d2:	21 95       	neg	r18
    10d4:	31 09       	sbc	r19, r1
    10d6:	42 17       	cp	r20, r18
    10d8:	53 07       	cpc	r21, r19
    10da:	4c f4       	brge	.+18     	; 0x10ee <move_ghost+0xaa>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    10dc:	dd 23       	and	r29, r29
    10de:	1c f4       	brge	.+6      	; 0x10e6 <move_ghost+0xa2>
			if(dirn_options & (1 << DIRN_UP)) {
    10e0:	81 ff       	sbrs	r24, 1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <move_ghost+0xaa>
    10e4:	73 c1       	rjmp	.+742    	; 0x13cc <move_ghost+0x388>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    10e6:	1d 16       	cp	r1, r29
    10e8:	14 f4       	brge	.+4      	; 0x10ee <move_ghost+0xaa>
			if(dirn_options & (1 << DIRN_DOWN)) {
    10ea:	83 fd       	sbrc	r24, 3
    10ec:	83 c1       	rjmp	.+774    	; 0x13f4 <move_ghost+0x3b0>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    10ee:	00 23       	and	r16, r16
    10f0:	54 f4       	brge	.+20     	; 0x1106 <move_ghost+0xc2>
		if(dirn_options & (1 << DIRN_LEFT)) {
    10f2:	80 fd       	sbrc	r24, 0
    10f4:	44 c1       	rjmp	.+648    	; 0x137e <move_ghost+0x33a>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    10f6:	dd 23       	and	r29, r29
    10f8:	1c f4       	brge	.+6      	; 0x1100 <move_ghost+0xbc>
			if(dirn_options & (1 << DIRN_UP)) {
    10fa:	81 ff       	sbrs	r24, 1
    10fc:	3c c1       	rjmp	.+632    	; 0x1376 <move_ghost+0x332>
    10fe:	66 c1       	rjmp	.+716    	; 0x13cc <move_ghost+0x388>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1100:	83 fd       	sbrc	r24, 3
    1102:	78 c1       	rjmp	.+752    	; 0x13f4 <move_ghost+0x3b0>
    1104:	38 c1       	rjmp	.+624    	; 0x1376 <move_ghost+0x332>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    1106:	82 fd       	sbrc	r24, 2
    1108:	4d c1       	rjmp	.+666    	; 0x13a4 <move_ghost+0x360>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    110a:	dd 23       	and	r29, r29
    110c:	1c f4       	brge	.+6      	; 0x1114 <move_ghost+0xd0>
			if(dirn_options & (1 << DIRN_UP)) {
    110e:	81 ff       	sbrs	r24, 1
    1110:	14 c1       	rjmp	.+552    	; 0x133a <move_ghost+0x2f6>
    1112:	5c c1       	rjmp	.+696    	; 0x13cc <move_ghost+0x388>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1114:	83 fd       	sbrc	r24, 3
    1116:	6e c1       	rjmp	.+732    	; 0x13f4 <move_ghost+0x3b0>
    1118:	10 c1       	rjmp	.+544    	; 0x133a <move_ghost+0x2f6>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    111e:	ab 01       	movw	r20, r22
    1120:	08 2e       	mov	r0, r24
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <move_ghost+0xe4>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <move_ghost+0xe0>
    112c:	40 fd       	sbrc	r20, 0
    112e:	a0 c0       	rjmp	.+320    	; 0x1270 <move_ghost+0x22c>
    1130:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	91 05       	cpc	r25, r1
    1136:	99 f7       	brne	.-26     	; 0x111e <move_ghost+0xda>
    1138:	71 c1       	rjmp	.+738    	; 0x141c <move_ghost+0x3d8>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    113a:	00 2e       	mov	r0, r16
    113c:	00 0c       	add	r0, r0
    113e:	11 0b       	sbc	r17, r17
    1140:	4d 2f       	mov	r20, r29
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	c8 01       	movw	r24, r16
    1146:	0d 2e       	mov	r0, r29
    1148:	02 c0       	rjmp	.+4      	; 0x114e <move_ghost+0x10a>
    114a:	95 95       	asr	r25
    114c:	87 95       	ror	r24
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <move_ghost+0x106>
    1152:	80 fd       	sbrc	r24, 0
    1154:	94 c0       	rjmp	.+296    	; 0x127e <move_ghost+0x23a>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    1156:	dc 0f       	add	r29, r28
    1158:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    115a:	2d 2f       	mov	r18, r29
    115c:	0d 2e       	mov	r0, r29
    115e:	00 0c       	add	r0, r0
    1160:	33 0b       	sbc	r19, r19
    1162:	c8 01       	movw	r24, r16
    1164:	0d 2e       	mov	r0, r29
    1166:	02 c0       	rjmp	.+4      	; 0x116c <move_ghost+0x128>
    1168:	95 95       	asr	r25
    116a:	87 95       	ror	r24
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <move_ghost+0x124>
    1170:	80 fd       	sbrc	r24, 0
    1172:	85 c0       	rjmp	.+266    	; 0x127e <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    1174:	2e 5f       	subi	r18, 0xFE	; 254
    1176:	3f 4f       	sbci	r19, 0xFF	; 255
    1178:	23 70       	andi	r18, 0x03	; 3
    117a:	30 78       	andi	r19, 0x80	; 128
    117c:	33 23       	and	r19, r19
    117e:	34 f4       	brge	.+12     	; 0x118c <move_ghost+0x148>
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	31 09       	sbc	r19, r1
    1184:	2c 6f       	ori	r18, 0xFC	; 252
    1186:	3f 6f       	ori	r19, 0xFF	; 255
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <move_ghost+0x150>
    1190:	15 95       	asr	r17
    1192:	07 95       	ror	r16
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <move_ghost+0x14c>
    1198:	00 fd       	sbrc	r16, 0
    119a:	6c c0       	rjmp	.+216    	; 0x1274 <move_ghost+0x230>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    119c:	9a 01       	movw	r18, r20
    119e:	2e 5f       	subi	r18, 0xFE	; 254
    11a0:	3f 4f       	sbci	r19, 0xFF	; 255
    11a2:	23 70       	andi	r18, 0x03	; 3
    11a4:	30 78       	andi	r19, 0x80	; 128
    11a6:	33 23       	and	r19, r19
    11a8:	34 f4       	brge	.+12     	; 0x11b6 <move_ghost+0x172>
    11aa:	21 50       	subi	r18, 0x01	; 1
    11ac:	31 09       	sbc	r19, r1
    11ae:	2c 6f       	ori	r18, 0xFC	; 252
    11b0:	3f 6f       	ori	r19, 0xFF	; 255
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	d2 2f       	mov	r29, r18
    11b8:	62 c0       	rjmp	.+196    	; 0x127e <move_ghost+0x23a>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    11ba:	00 2e       	mov	r0, r16
    11bc:	00 0c       	add	r0, r0
    11be:	11 0b       	sbc	r17, r17
    11c0:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <pacman_direction>
    11c4:	c8 01       	movw	r24, r16
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <move_ghost+0x18a>
    11ca:	95 95       	asr	r25
    11cc:	87 95       	ror	r24
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <move_ghost+0x186>
    11d2:	80 ff       	sbrs	r24, 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <move_ghost+0x196>
				// That direction is one of the valid options
				return pacman_direction;
    11d6:	d2 2f       	mov	r29, r18
    11d8:	52 c0       	rjmp	.+164    	; 0x127e <move_ghost+0x23a>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    11da:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <random>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	83 70       	andi	r24, 0x03	; 3
    11e4:	99 27       	eor	r25, r25
    11e6:	aa 27       	eor	r26, r26
    11e8:	b0 78       	andi	r27, 0x80	; 128
    11ea:	bb 23       	and	r27, r27
    11ec:	54 f4       	brge	.+20     	; 0x1202 <move_ghost+0x1be>
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	a1 09       	sbc	r26, r1
    11f2:	b1 09       	sbc	r27, r1
    11f4:	8c 6f       	ori	r24, 0xFC	; 252
    11f6:	9f 6f       	ori	r25, 0xFF	; 255
    11f8:	af 6f       	ori	r26, 0xFF	; 255
    11fa:	bf 6f       	ori	r27, 0xFF	; 255
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	a1 1d       	adc	r26, r1
    1200:	b1 1d       	adc	r27, r1
    1202:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1204:	68 2f       	mov	r22, r24
    1206:	88 0f       	add	r24, r24
    1208:	77 0b       	sbc	r23, r23
    120a:	9b 01       	movw	r18, r22
    120c:	23 70       	andi	r18, 0x03	; 3
    120e:	30 78       	andi	r19, 0x80	; 128
    1210:	33 23       	and	r19, r19
    1212:	34 f4       	brge	.+12     	; 0x1220 <move_ghost+0x1dc>
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	31 09       	sbc	r19, r1
    1218:	2c 6f       	ori	r18, 0xFC	; 252
    121a:	3f 6f       	ori	r19, 0xFF	; 255
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    1220:	c8 01       	movw	r24, r16
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <move_ghost+0x1e6>
    1226:	95 95       	asr	r25
    1228:	87 95       	ror	r24
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <move_ghost+0x1e2>
    122e:	80 fd       	sbrc	r24, 0
    1230:	23 c0       	rjmp	.+70     	; 0x1278 <move_ghost+0x234>
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	04 2e       	mov	r0, r20
    1238:	00 0c       	add	r0, r0
    123a:	55 0b       	sbc	r21, r21
    123c:	4c 5f       	subi	r20, 0xFC	; 252
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1240:	cb 01       	movw	r24, r22
    1242:	83 70       	andi	r24, 0x03	; 3
    1244:	90 78       	andi	r25, 0x80	; 128
    1246:	99 23       	and	r25, r25
    1248:	24 f4       	brge	.+8      	; 0x1252 <move_ghost+0x20e>
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	8c 6f       	ori	r24, 0xFC	; 252
    124e:	9f 6f       	ori	r25, 0xFF	; 255
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    1254:	f8 01       	movw	r30, r16
    1256:	02 c0       	rjmp	.+4      	; 0x125c <move_ghost+0x218>
    1258:	f5 95       	asr	r31
    125a:	e7 95       	ror	r30
    125c:	8a 95       	dec	r24
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <move_ghost+0x214>
    1260:	e0 fd       	sbrc	r30, 0
    1262:	0c c0       	rjmp	.+24     	; 0x127c <move_ghost+0x238>
    1264:	6f 5f       	subi	r22, 0xFF	; 255
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    1268:	64 17       	cp	r22, r20
    126a:	75 07       	cpc	r23, r21
    126c:	49 f7       	brne	.-46     	; 0x1240 <move_ghost+0x1fc>
    126e:	d6 c0       	rjmp	.+428    	; 0x141c <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1270:	d8 2f       	mov	r29, r24
    1272:	05 c0       	rjmp	.+10     	; 0x127e <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    1274:	d2 2f       	mov	r29, r18
    1276:	03 c0       	rjmp	.+6      	; 0x127e <move_ghost+0x23a>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1278:	d2 2f       	mov	r29, r18
    127a:	01 c0       	rjmp	.+2      	; 0x127e <move_ghost+0x23a>
    127c:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    127e:	dd 23       	and	r29, r29
    1280:	0c f4       	brge	.+2      	; 0x1284 <move_ghost+0x240>
    1282:	cc c0       	rjmp	.+408    	; 0x141c <move_ghost+0x3d8>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1284:	0c 2f       	mov	r16, r28
    1286:	0c 2e       	mov	r0, r28
    1288:	00 0c       	add	r0, r0
    128a:	11 0b       	sbc	r17, r17
    128c:	d8 01       	movw	r26, r16
    128e:	a1 55       	subi	r26, 0x51	; 81
    1290:	be 4f       	sbci	r27, 0xFE	; 254
    1292:	f8 01       	movw	r30, r16
    1294:	ed 54       	subi	r30, 0x4D	; 77
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	6c 91       	ld	r22, X
    129a:	80 81       	ld	r24, Z
    129c:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    12a0:	f8 01       	movw	r30, r16
    12a2:	e5 55       	subi	r30, 0x55	; 85
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    12a8:	d1 30       	cpi	r29, 0x01	; 1
    12aa:	b9 f0       	breq	.+46     	; 0x12da <move_ghost+0x296>
    12ac:	1c f4       	brge	.+6      	; 0x12b4 <move_ghost+0x270>
    12ae:	dd 23       	and	r29, r29
    12b0:	31 f0       	breq	.+12     	; 0x12be <move_ghost+0x27a>
    12b2:	20 c0       	rjmp	.+64     	; 0x12f4 <move_ghost+0x2b0>
    12b4:	d2 30       	cpi	r29, 0x02	; 2
    12b6:	51 f0       	breq	.+20     	; 0x12cc <move_ghost+0x288>
    12b8:	d3 30       	cpi	r29, 0x03	; 3
    12ba:	b1 f0       	breq	.+44     	; 0x12e8 <move_ghost+0x2a4>
    12bc:	1b c0       	rjmp	.+54     	; 0x12f4 <move_ghost+0x2b0>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    12be:	f8 01       	movw	r30, r16
    12c0:	ed 54       	subi	r30, 0x4D	; 77
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	80 81       	ld	r24, Z
    12c6:	81 50       	subi	r24, 0x01	; 1
    12c8:	80 83       	st	Z, r24
			break;
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <move_ghost+0x2b0>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    12cc:	f8 01       	movw	r30, r16
    12ce:	ed 54       	subi	r30, 0x4D	; 77
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
			break;
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <move_ghost+0x2b0>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    12da:	f8 01       	movw	r30, r16
    12dc:	e1 55       	subi	r30, 0x51	; 81
    12de:	fe 4f       	sbci	r31, 0xFE	; 254
    12e0:	80 81       	ld	r24, Z
    12e2:	81 50       	subi	r24, 0x01	; 1
    12e4:	80 83       	st	Z, r24
			break;
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <move_ghost+0x2b0>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    12e8:	f8 01       	movw	r30, r16
    12ea:	e1 55       	subi	r30, 0x51	; 81
    12ec:	fe 4f       	sbci	r31, 0xFE	; 254
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    12f4:	f8 01       	movw	r30, r16
    12f6:	e1 55       	subi	r30, 0x51	; 81
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	40 81       	ld	r20, Z
    12fc:	f8 01       	movw	r30, r16
    12fe:	ed 54       	subi	r30, 0x4D	; 77
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    1304:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <pacman_x>
    1308:	68 13       	cpse	r22, r24
    130a:	31 c0       	rjmp	.+98     	; 0x136e <move_ghost+0x32a>
    130c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <pacman_y>
    1310:	48 13       	cpse	r20, r24
    1312:	2d c0       	rjmp	.+90     	; 0x136e <move_ghost+0x32a>
    1314:	19 c0       	rjmp	.+50     	; 0x1348 <move_ghost+0x304>
		set_display_attribute(ghost_colours[ghostnum]);
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
    1316:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <normal_display_mode>
    131a:	80 c0       	rjmp	.+256    	; 0x141c <move_ghost+0x3d8>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    131c:	c1 30       	cpi	r28, 0x01	; 1
    131e:	09 f4       	brne	.+2      	; 0x1322 <move_ghost+0x2de>
    1320:	0c cf       	rjmp	.-488    	; 0x113a <move_ghost+0xf6>
    1322:	24 f4       	brge	.+8      	; 0x132c <move_ghost+0x2e8>
    1324:	cc 23       	and	r28, r28
    1326:	09 f4       	brne	.+2      	; 0x132a <move_ghost+0x2e6>
    1328:	b7 ce       	rjmp	.-658    	; 0x1098 <move_ghost+0x54>
    132a:	78 c0       	rjmp	.+240    	; 0x141c <move_ghost+0x3d8>
    132c:	c2 30       	cpi	r28, 0x02	; 2
    132e:	09 f4       	brne	.+2      	; 0x1332 <move_ghost+0x2ee>
    1330:	44 cf       	rjmp	.-376    	; 0x11ba <move_ghost+0x176>
    1332:	c3 30       	cpi	r28, 0x03	; 3
    1334:	09 f4       	brne	.+2      	; 0x1338 <move_ghost+0x2f4>
    1336:	01 cf       	rjmp	.-510    	; 0x113a <move_ghost+0xf6>
    1338:	71 c0       	rjmp	.+226    	; 0x141c <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    133a:	68 2f       	mov	r22, r24
    133c:	08 2e       	mov	r0, r24
    133e:	00 0c       	add	r0, r0
    1340:	77 0b       	sbc	r23, r23
    1342:	80 ff       	sbrs	r24, 0
    1344:	ea ce       	rjmp	.-556    	; 0x111a <move_ghost+0xd6>
    1346:	1b c0       	rjmp	.+54     	; 0x137e <move_ghost+0x33a>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		// Ghost has just moved into the pac-man. Game is over
		game_running = 0;
    1348:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <game_running>
		// We draw the background colour for the
		// ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    134c:	f8 01       	movw	r30, r16
    134e:	e9 56       	subi	r30, 0x69	; 105
    1350:	fe 4f       	sbci	r31, 0xFE	; 254
    1352:	80 81       	ld	r24, Z
    1354:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1358:	d8 01       	movw	r26, r16
    135a:	a1 55       	subi	r26, 0x51	; 81
    135c:	be 4f       	sbci	r27, 0xFE	; 254
    135e:	f8 01       	movw	r30, r16
    1360:	ed 54       	subi	r30, 0x4D	; 77
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	6c 91       	ld	r22, X
    1366:	80 81       	ld	r24, Z
    1368:	0e 94 c8 04 	call	0x990	; 0x990 <draw_pacman_at>
    136c:	d4 cf       	rjmp	.-88     	; 0x1316 <move_ghost+0x2d2>
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    136e:	8c 2f       	mov	r24, r28
    1370:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <draw_ghost_at>
    1374:	d0 cf       	rjmp	.-96     	; 0x1316 <move_ghost+0x2d2>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1376:	68 2f       	mov	r22, r24
    1378:	88 0f       	add	r24, r24
    137a:	77 0b       	sbc	r23, r23
    137c:	ce ce       	rjmp	.-612    	; 0x111a <move_ghost+0xd6>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    137e:	0c 2f       	mov	r16, r28
    1380:	0c 2e       	mov	r0, r28
    1382:	00 0c       	add	r0, r0
    1384:	11 0b       	sbc	r17, r17
    1386:	d8 01       	movw	r26, r16
    1388:	a1 55       	subi	r26, 0x51	; 81
    138a:	be 4f       	sbci	r27, 0xFE	; 254
    138c:	f8 01       	movw	r30, r16
    138e:	ed 54       	subi	r30, 0x4D	; 77
    1390:	fe 4f       	sbci	r31, 0xFE	; 254
    1392:	6c 91       	ld	r22, X
    1394:	80 81       	ld	r24, Z
    1396:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    139a:	f8 01       	movw	r30, r16
    139c:	e5 55       	subi	r30, 0x55	; 85
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	10 82       	st	Z, r1
    13a2:	8d cf       	rjmp	.-230    	; 0x12be <move_ghost+0x27a>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    13a4:	0c 2f       	mov	r16, r28
    13a6:	0c 2e       	mov	r0, r28
    13a8:	00 0c       	add	r0, r0
    13aa:	11 0b       	sbc	r17, r17
    13ac:	d8 01       	movw	r26, r16
    13ae:	a1 55       	subi	r26, 0x51	; 81
    13b0:	be 4f       	sbci	r27, 0xFE	; 254
    13b2:	f8 01       	movw	r30, r16
    13b4:	ed 54       	subi	r30, 0x4D	; 77
    13b6:	fe 4f       	sbci	r31, 0xFE	; 254
    13b8:	6c 91       	ld	r22, X
    13ba:	80 81       	ld	r24, Z
    13bc:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    13c0:	f8 01       	movw	r30, r16
    13c2:	e5 55       	subi	r30, 0x55	; 85
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	80 83       	st	Z, r24
    13ca:	80 cf       	rjmp	.-256    	; 0x12cc <move_ghost+0x288>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    13cc:	0c 2f       	mov	r16, r28
    13ce:	0c 2e       	mov	r0, r28
    13d0:	00 0c       	add	r0, r0
    13d2:	11 0b       	sbc	r17, r17
    13d4:	d8 01       	movw	r26, r16
    13d6:	a1 55       	subi	r26, 0x51	; 81
    13d8:	be 4f       	sbci	r27, 0xFE	; 254
    13da:	f8 01       	movw	r30, r16
    13dc:	ed 54       	subi	r30, 0x4D	; 77
    13de:	fe 4f       	sbci	r31, 0xFE	; 254
    13e0:	6c 91       	ld	r22, X
    13e2:	80 81       	ld	r24, Z
    13e4:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    13e8:	f8 01       	movw	r30, r16
    13ea:	e5 55       	subi	r30, 0x55	; 85
    13ec:	fe 4f       	sbci	r31, 0xFE	; 254
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 83       	st	Z, r24
    13f2:	73 cf       	rjmp	.-282    	; 0x12da <move_ghost+0x296>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    13f4:	0c 2f       	mov	r16, r28
    13f6:	0c 2e       	mov	r0, r28
    13f8:	00 0c       	add	r0, r0
    13fa:	11 0b       	sbc	r17, r17
    13fc:	d8 01       	movw	r26, r16
    13fe:	a1 55       	subi	r26, 0x51	; 81
    1400:	be 4f       	sbci	r27, 0xFE	; 254
    1402:	f8 01       	movw	r30, r16
    1404:	ed 54       	subi	r30, 0x4D	; 77
    1406:	fe 4f       	sbci	r31, 0xFE	; 254
    1408:	6c 91       	ld	r22, X
    140a:	80 81       	ld	r24, Z
    140c:	0e 94 24 05 	call	0xa48	; 0xa48 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1410:	f8 01       	movw	r30, r16
    1412:	e5 55       	subi	r30, 0x55	; 85
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	80 83       	st	Z, r24
    141a:	66 cf       	rjmp	.-308    	; 0x12e8 <move_ghost+0x2a4>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	08 95       	ret

00001428 <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <game_running>
    142e:	91 11       	cpse	r25, r1
    1430:	80 e0       	ldi	r24, 0x00	; 0
}
    1432:	08 95       	ret

00001434 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <num_pacdots>
    143a:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <num_pacdots+0x1>
    143e:	23 2b       	or	r18, r19
    1440:	09 f0       	breq	.+2      	; 0x1444 <is_level_complete+0x10>
    1442:	80 e0       	ldi	r24, 0x00	; 0
}
    1444:	08 95       	ret

00001446 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1446:	80 e8       	ldi	r24, 0x80	; 128
    1448:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <spi_setup_master>
    144c:	08 95       	ret

0000144e <ledmatrix_update_column>:
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	80 31       	cpi	r24, 0x10	; 16
    1458:	90 f4       	brcc	.+36     	; 0x147e <ledmatrix_update_column+0x30>
    145a:	8b 01       	movw	r16, r22
    145c:	c8 2f       	mov	r28, r24
    145e:	83 e0       	ldi	r24, 0x03	; 3
    1460:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    1464:	8c 2f       	mov	r24, r28
    1466:	8f 70       	andi	r24, 0x0F	; 15
    1468:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    146c:	e8 01       	movw	r28, r16
    146e:	08 5f       	subi	r16, 0xF8	; 248
    1470:	1f 4f       	sbci	r17, 0xFF	; 255
    1472:	89 91       	ld	r24, Y+
    1474:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    1478:	c0 17       	cp	r28, r16
    147a:	d1 07       	cpc	r29, r17
    147c:	d1 f7       	brne	.-12     	; 0x1472 <ledmatrix_update_column+0x24>
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <ledmatrix_shift_display_left>:
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    1494:	08 95       	ret

00001496 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1496:	8f e0       	ldi	r24, 0x0F	; 15
    1498:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <spi_send_byte>
    149c:	08 95       	ret

0000149e <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    149e:	0e 94 23 0a 	call	0x1446	; 0x1446 <ledmatrix_setup>
	init_button_interrupts();
    14a2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	7b e4       	ldi	r23, 0x4B	; 75
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <init_serial_stdio>
	
	init_timer0();
    14b4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <init_timer0>
	
	// Turn on global interrupts
	sei();
    14b8:	78 94       	sei
    14ba:	08 95       	ret

000014bc <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    14bc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <clear_terminal>
	move_cursor(10,10);
    14c0:	6a e0       	ldi	r22, 0x0A	; 10
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	8a e0       	ldi	r24, 0x0A	; 10
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("Pac-Man"));
    14cc:	8c e8       	ldi	r24, 0x8C	; 140
    14ce:	95 e0       	ldi	r25, 0x05	; 5
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	move_cursor(10,12);
    14d8:	6c e0       	ldi	r22, 0x0C	; 12
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	8a e0       	ldi	r24, 0x0A	; 10
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("CSSE2010 project by <Juan Espares>"));
    14e4:	89 e6       	ldi	r24, 0x69	; 105
    14e6:	95 e0       	ldi	r25, 0x05	; 5
    14e8:	9f 93       	push	r25
    14ea:	8f 93       	push	r24
    14ec:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	move_cursor(10,14); 
    14f0:	6e e0       	ldi	r22, 0x0E	; 14
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	8a e0       	ldi	r24, 0x0A	; 10
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("Student Number: 44317962")) ; 
    14fc:	80 e5       	ldi	r24, 0x50	; 80
    14fe:	95 e0       	ldi	r25, 0x05	; 5
    1500:	9f 93       	push	r25
    1502:	8f 93       	push	r24
    1504:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1508:	0e 94 4b 0a 	call	0x1496	; 0x1496 <ledmatrix_clear>
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("44317962", COLOUR_GREEN);
    1518:	60 ef       	ldi	r22, 0xF0	; 240
    151a:	8b e9       	ldi	r24, 0x9B	; 155
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 6f 0c 	call	0x18de	; 0x18de <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1522:	10 c0       	rjmp	.+32     	; 0x1544 <splash_screen+0x88>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1524:	2f e7       	ldi	r18, 0x7F	; 127
    1526:	89 ea       	ldi	r24, 0xA9	; 169
    1528:	93 e0       	ldi	r25, 0x03	; 3
    152a:	21 50       	subi	r18, 0x01	; 1
    152c:	80 40       	sbci	r24, 0x00	; 0
    152e:	90 40       	sbci	r25, 0x00	; 0
    1530:	e1 f7       	brne	.-8      	; 0x152a <splash_screen+0x6e>
    1532:	00 c0       	rjmp	.+0      	; 0x1534 <splash_screen+0x78>
    1534:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    1536:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    153a:	8f 3f       	cpi	r24, 0xFF	; 255
    153c:	19 f0       	breq	.+6      	; 0x1544 <splash_screen+0x88>
				ledmatrix_clear();
    153e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <ledmatrix_clear>
				return;
    1542:	08 95       	ret
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("44317962", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1544:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <scroll_display>
    1548:	81 11       	cpse	r24, r1
    154a:	ec cf       	rjmp	.-40     	; 0x1524 <splash_screen+0x68>
    154c:	e5 cf       	rjmp	.-54     	; 0x1518 <splash_screen+0x5c>

0000154e <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    154e:	0e 94 df 06 	call	0xdbe	; 0xdbe <initialise_game>
	
	// Initialise the score
	init_score();
    1552:	0e 94 36 0c 	call	0x186c	; 0x186c <init_score>
	init_score();
    1556:	0e 94 36 0c 	call	0x186c	; 0x186c <init_score>
	
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    155a:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
	clear_serial_input_buffer();
    155e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <clear_serial_input_buffer>
    1562:	08 95       	ret

00001564 <handle_level_complete>:
	}
	// We get here if the game is over.
}

void handle_level_complete(void) {
	move_cursor(35,10);
    1564:	6a e0       	ldi	r22, 0x0A	; 10
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	83 e2       	ldi	r24, 0x23	; 35
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("Level complete"));
    1570:	81 e4       	ldi	r24, 0x41	; 65
    1572:	95 e0       	ldi	r25, 0x05	; 5
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	move_cursor(35,11);
    157c:	6b e0       	ldi	r22, 0x0B	; 11
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	83 e2       	ldi	r24, 0x23	; 35
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("Push a button or key to continue"));
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	95 e0       	ldi	r25, 0x05	; 5
    158c:	9f 93       	push	r25
    158e:	8f 93       	push	r24
    1590:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	// Clear any characters in the serial input buffer - to make
	// sure we only use key presses from now on.
	clear_serial_input_buffer();
    1594:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <clear_serial_input_buffer>
	while(button_pushed() == NO_BUTTON_PUSHED && !serial_input_available()) {
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    15a4:	8f 3f       	cpi	r24, 0xFF	; 255
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <handle_level_complete+0x4c>
    15a8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <serial_input_available>
    15ac:	88 23       	and	r24, r24
    15ae:	c1 f3       	breq	.-16     	; 0x15a0 <handle_level_complete+0x3c>
		; // wait
	}
	// Throw away any characters in the serial input buffer
	clear_serial_input_buffer();
    15b0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <clear_serial_input_buffer>
    15b4:	08 95       	ret

000015b6 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	2c 97       	sbiw	r28, 0x0c	; 12
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	de bf       	out	0x3e, r29	; 62
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	cd bf       	out	0x3d, r28	; 61
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    15e8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <get_current_time>
    15ec:	4b 01       	movw	r8, r22
    15ee:	5c 01       	movw	r10, r24
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	ghost_last_move_time1 = current_time; 
	ghost_last_move_time2 = current_time; 
	ghost_last_move_time3 = current_time;
    15f0:	69 87       	std	Y+9, r22	; 0x09
    15f2:	7a 87       	std	Y+10, r23	; 0x0a
    15f4:	8b 87       	std	Y+11, r24	; 0x0b
    15f6:	9c 87       	std	Y+12, r25	; 0x0c
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	ghost_last_move_time1 = current_time; 
	ghost_last_move_time2 = current_time; 
    15f8:	6d 83       	std	Y+5, r22	; 0x05
    15fa:	7e 83       	std	Y+6, r23	; 0x06
    15fc:	8f 83       	std	Y+7, r24	; 0x07
    15fe:	98 87       	std	Y+8, r25	; 0x08
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	ghost_last_move_time1 = current_time; 
    1600:	69 83       	std	Y+1, r22	; 0x01
    1602:	7a 83       	std	Y+2, r23	; 0x02
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	9c 83       	std	Y+4, r25	; 0x04
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
    1608:	2b 01       	movw	r4, r22
    160a:	3c 01       	movw	r6, r24
	uint32_t ghost_last_move_time2; 
	uint32_t ghost_last_move_time3; 
	
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    160c:	31 2c       	mov	r3, r1
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    160e:	0f ef       	ldi	r16, 0xFF	; 255
	ghost_last_move_time2 = current_time; 
	ghost_last_move_time3 = current_time;
	 
	
	// We play the game until it's over
	while(!is_game_over()) {
    1610:	cc c0       	rjmp	.+408    	; 0x17aa <play_game+0x1f4>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1612:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1616:	18 2f       	mov	r17, r24
		
		if(button == NO_BUTTON_PUSHED) {
    1618:	8f 3f       	cpi	r24, 0xFF	; 255
    161a:	09 f0       	breq	.+2      	; 0x161e <play_game+0x68>
    161c:	d3 c0       	rjmp	.+422    	; 0x17c4 <play_game+0x20e>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    161e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <serial_input_available>
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <play_game+0x72>
    1626:	3f c0       	rjmp	.+126    	; 0x16a6 <play_game+0xf0>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1628:	e0 e6       	ldi	r30, 0x60	; 96
    162a:	f3 e0       	ldi	r31, 0x03	; 3
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	0e 94 29 10 	call	0x2052	; 0x2052 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1634:	31 10       	cpse	r3, r1
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <play_game+0x8c>
    1638:	8b 31       	cpi	r24, 0x1B	; 27
    163a:	09 f4       	brne	.+2      	; 0x163e <play_game+0x88>
    163c:	bc c0       	rjmp	.+376    	; 0x17b6 <play_game+0x200>
    163e:	90 2f       	mov	r25, r16
    1640:	0d c0       	rjmp	.+26     	; 0x165c <play_game+0xa6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1642:	f1 e0       	ldi	r31, 0x01	; 1
    1644:	3f 12       	cpse	r3, r31
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <play_game+0x9c>
    1648:	8b 35       	cpi	r24, 0x5B	; 91
    164a:	09 f4       	brne	.+2      	; 0x164e <play_game+0x98>
    164c:	b7 c0       	rjmp	.+366    	; 0x17bc <play_game+0x206>
    164e:	90 2f       	mov	r25, r16
    1650:	05 c0       	rjmp	.+10     	; 0x165c <play_game+0xa6>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	39 12       	cpse	r3, r25
    1656:	c4 c0       	rjmp	.+392    	; 0x17e0 <play_game+0x22a>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1658:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
    165a:	80 2f       	mov	r24, r16
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='A') {
    165c:	91 34       	cpi	r25, 0x41	; 65
    165e:	09 f0       	breq	.+2      	; 0x1662 <play_game+0xac>
    1660:	b4 c0       	rjmp	.+360    	; 0x17ca <play_game+0x214>
    1662:	31 2c       	mov	r3, r1
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0e 94 00 08 	call	0x1000	; 0x1000 <change_pacman_direction>
    166a:	1d c0       	rjmp	.+58     	; 0x16a6 <play_game+0xf0>
    166c:	31 2c       	mov	r3, r1
		} else if(button==2 || escape_sequence_char=='W') {
			// Button 2 pressed or up cursor key escape sequence completed
			// Attempt to move up 
			change_pacman_direction(DIRN_UP);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	0e 94 00 08 	call	0x1000	; 0x1000 <change_pacman_direction>
    1674:	18 c0       	rjmp	.+48     	; 0x16a6 <play_game+0xf0>
		} else if(button==1 || escape_sequence_char=='S') {
    1676:	11 30       	cpi	r17, 0x01	; 1
    1678:	11 f0       	breq	.+4      	; 0x167e <play_game+0xc8>
    167a:	93 35       	cpi	r25, 0x53	; 83
    167c:	21 f4       	brne	.+8      	; 0x1686 <play_game+0xd0>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Attempt to move down
			change_pacman_direction(DIRN_DOWN); 
    167e:	83 e0       	ldi	r24, 0x03	; 3
    1680:	0e 94 00 08 	call	0x1000	; 0x1000 <change_pacman_direction>
    1684:	10 c0       	rjmp	.+32     	; 0x16a6 <play_game+0xf0>
		} else if(button==0 || escape_sequence_char=='D') {
    1686:	11 23       	and	r17, r17
    1688:	11 f0       	breq	.+4      	; 0x168e <play_game+0xd8>
    168a:	94 34       	cpi	r25, 0x44	; 68
    168c:	21 f4       	brne	.+8      	; 0x1696 <play_game+0xe0>
			// Button 0 pressed OR right cursor key escape sequence completed 
			// Attempt to move right
			change_pacman_direction(DIRN_RIGHT);
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0e 94 00 08 	call	0x1000	; 0x1000 <change_pacman_direction>
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <play_game+0xf0>
		} else if(serial_input == 'p' || serial_input == 'P') {
    1696:	8f 7d       	andi	r24, 0xDF	; 223
    1698:	80 35       	cpi	r24, 0x50	; 80
    169a:	29 f0       	breq	.+10     	; 0x16a6 <play_game+0xf0>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
		} 
		else if (button == 'n' || button == 'N'){
    169c:	1f 7d       	andi	r17, 0xDF	; 223
    169e:	1e 34       	cpi	r17, 0x4E	; 78
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <play_game+0xf0>
			//New Game		
			new_game(); 
    16a2:	0e 94 a7 0a 	call	0x154e	; 0x154e <new_game>
		}
		
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    16a6:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <get_current_time>
    16aa:	6b 01       	movw	r12, r22
    16ac:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
    16ae:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    16b2:	81 11       	cpse	r24, r1
    16b4:	1e c0       	rjmp	.+60     	; 0x16f2 <play_game+0x13c>
    16b6:	d5 01       	movw	r26, r10
    16b8:	c4 01       	movw	r24, r8
    16ba:	80 57       	subi	r24, 0x70	; 112
    16bc:	9e 4f       	sbci	r25, 0xFE	; 254
    16be:	af 4f       	sbci	r26, 0xFF	; 255
    16c0:	bf 4f       	sbci	r27, 0xFF	; 255
    16c2:	c8 16       	cp	r12, r24
    16c4:	d9 06       	cpc	r13, r25
    16c6:	ea 06       	cpc	r14, r26
    16c8:	fb 06       	cpc	r15, r27
    16ca:	98 f0       	brcs	.+38     	; 0x16f2 <play_game+0x13c>
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
    16cc:	0e 94 e5 06 	call	0xdca	; 0xdca <move_pacman>
			pacman_last_move_time = current_time;
			
			// Check if the move finished the level - and restart if so
			if(is_level_complete()) {
    16d0:	0e 94 1a 0a 	call	0x1434	; 0x1434 <is_level_complete>
    16d4:	88 23       	and	r24, r24
    16d6:	59 f0       	breq	.+22     	; 0x16ee <play_game+0x138>
				handle_level_complete();	// This will pause until a button is pushed
    16d8:	0e 94 b2 0a 	call	0x1564	; 0x1564 <handle_level_complete>
				initialise_game_level();
    16dc:	0e 94 51 05 	call	0xaa2	; 0xaa2 <initialise_game_level>
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
    16e0:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <get_current_time>
    16e4:	4b 01       	movw	r8, r22
    16e6:	5c 01       	movw	r10, r24
    16e8:	2b 01       	movw	r4, r22
    16ea:	3c 01       	movw	r6, r24
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <play_game+0x13c>
		current_time = get_current_time();
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
			pacman_last_move_time = current_time;
    16ee:	46 01       	movw	r8, r12
    16f0:	57 01       	movw	r10, r14
				initialise_game_level();
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
			}
		}
		if(!is_game_over() && current_time >= ghost_last_move_time + 420) {
    16f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    16f6:	81 11       	cpse	r24, r1
    16f8:	10 c0       	rjmp	.+32     	; 0x171a <play_game+0x164>
    16fa:	d3 01       	movw	r26, r6
    16fc:	c2 01       	movw	r24, r4
    16fe:	8c 55       	subi	r24, 0x5C	; 92
    1700:	9e 4f       	sbci	r25, 0xFE	; 254
    1702:	af 4f       	sbci	r26, 0xFF	; 255
    1704:	bf 4f       	sbci	r27, 0xFF	; 255
    1706:	c8 16       	cp	r12, r24
    1708:	d9 06       	cpc	r13, r25
    170a:	ea 06       	cpc	r14, r26
    170c:	fb 06       	cpc	r15, r27
    170e:	28 f0       	brcs	.+10     	; 0x171a <play_game+0x164>
			// 500ms (0.5 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(0);
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	0e 94 22 08 	call	0x1044	; 0x1044 <move_ghost>
			ghost_last_move_time = current_time;
    1716:	26 01       	movw	r4, r12
    1718:	37 01       	movw	r6, r14
		}
		if (!is_game_over() && current_time >= ghost_last_move_time1 + 450){
    171a:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    171e:	81 11       	cpse	r24, r1
    1720:	14 c0       	rjmp	.+40     	; 0x174a <play_game+0x194>
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
    1726:	ab 81       	ldd	r26, Y+3	; 0x03
    1728:	bc 81       	ldd	r27, Y+4	; 0x04
    172a:	8e 53       	subi	r24, 0x3E	; 62
    172c:	9e 4f       	sbci	r25, 0xFE	; 254
    172e:	af 4f       	sbci	r26, 0xFF	; 255
    1730:	bf 4f       	sbci	r27, 0xFF	; 255
    1732:	c8 16       	cp	r12, r24
    1734:	d9 06       	cpc	r13, r25
    1736:	ea 06       	cpc	r14, r26
    1738:	fb 06       	cpc	r15, r27
    173a:	38 f0       	brcs	.+14     	; 0x174a <play_game+0x194>
			move_ghost(1); 
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	0e 94 22 08 	call	0x1044	; 0x1044 <move_ghost>
			ghost_last_move_time1 = current_time; 
    1742:	c9 82       	std	Y+1, r12	; 0x01
    1744:	da 82       	std	Y+2, r13	; 0x02
    1746:	eb 82       	std	Y+3, r14	; 0x03
    1748:	fc 82       	std	Y+4, r15	; 0x04
		}
		if (!is_game_over() && current_time >= ghost_last_move_time2 + 500){
    174a:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    174e:	81 11       	cpse	r24, r1
    1750:	14 c0       	rjmp	.+40     	; 0x177a <play_game+0x1c4>
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	af 81       	ldd	r26, Y+7	; 0x07
    1758:	b8 85       	ldd	r27, Y+8	; 0x08
    175a:	8c 50       	subi	r24, 0x0C	; 12
    175c:	9e 4f       	sbci	r25, 0xFE	; 254
    175e:	af 4f       	sbci	r26, 0xFF	; 255
    1760:	bf 4f       	sbci	r27, 0xFF	; 255
    1762:	c8 16       	cp	r12, r24
    1764:	d9 06       	cpc	r13, r25
    1766:	ea 06       	cpc	r14, r26
    1768:	fb 06       	cpc	r15, r27
    176a:	38 f0       	brcs	.+14     	; 0x177a <play_game+0x1c4>
			move_ghost(2); 
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	0e 94 22 08 	call	0x1044	; 0x1044 <move_ghost>
			ghost_last_move_time2 = current_time; 
    1772:	cd 82       	std	Y+5, r12	; 0x05
    1774:	de 82       	std	Y+6, r13	; 0x06
    1776:	ef 82       	std	Y+7, r14	; 0x07
    1778:	f8 86       	std	Y+8, r15	; 0x08
		}
		if (!is_game_over() && current_time >= ghost_last_move_time3 + 570){
    177a:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    177e:	81 11       	cpse	r24, r1
    1780:	14 c0       	rjmp	.+40     	; 0x17aa <play_game+0x1f4>
    1782:	89 85       	ldd	r24, Y+9	; 0x09
    1784:	9a 85       	ldd	r25, Y+10	; 0x0a
    1786:	ab 85       	ldd	r26, Y+11	; 0x0b
    1788:	bc 85       	ldd	r27, Y+12	; 0x0c
    178a:	86 5c       	subi	r24, 0xC6	; 198
    178c:	9d 4f       	sbci	r25, 0xFD	; 253
    178e:	af 4f       	sbci	r26, 0xFF	; 255
    1790:	bf 4f       	sbci	r27, 0xFF	; 255
    1792:	c8 16       	cp	r12, r24
    1794:	d9 06       	cpc	r13, r25
    1796:	ea 06       	cpc	r14, r26
    1798:	fb 06       	cpc	r15, r27
    179a:	38 f0       	brcs	.+14     	; 0x17aa <play_game+0x1f4>
			move_ghost(3); 
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	0e 94 22 08 	call	0x1044	; 0x1044 <move_ghost>
			ghost_last_move_time3 = current_time; 
    17a2:	c9 86       	std	Y+9, r12	; 0x09
    17a4:	da 86       	std	Y+10, r13	; 0x0a
    17a6:	eb 86       	std	Y+11, r14	; 0x0b
    17a8:	fc 86       	std	Y+12, r15	; 0x0c
	ghost_last_move_time2 = current_time; 
	ghost_last_move_time3 = current_time;
	 
	
	// We play the game until it's over
	while(!is_game_over()) {
    17aa:	0e 94 14 0a 	call	0x1428	; 0x1428 <is_game_over>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <play_game+0x1fe>
    17b2:	2f cf       	rjmp	.-418    	; 0x1612 <play_game+0x5c>
    17b4:	17 c0       	rjmp	.+46     	; 0x17e4 <play_game+0x22e>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    17b6:	33 24       	eor	r3, r3
    17b8:	33 94       	inc	r3
    17ba:	75 cf       	rjmp	.-278    	; 0x16a6 <play_game+0xf0>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    17bc:	68 94       	set
    17be:	33 24       	eor	r3, r3
    17c0:	31 f8       	bld	r3, 1
    17c2:	71 cf       	rjmp	.-286    	; 0x16a6 <play_game+0xf0>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='A') {
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	31 f4       	brne	.+12     	; 0x17d4 <play_game+0x21e>
    17c8:	4d cf       	rjmp	.-358    	; 0x1664 <play_game+0xae>
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if(button==2 || escape_sequence_char=='W') {
    17ca:	97 35       	cpi	r25, 0x57	; 87
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <play_game+0x21a>
    17ce:	4e cf       	rjmp	.-356    	; 0x166c <play_game+0xb6>
    17d0:	31 2c       	mov	r3, r1
    17d2:	51 cf       	rjmp	.-350    	; 0x1676 <play_game+0xc0>
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	09 f4       	brne	.+2      	; 0x17da <play_game+0x224>
    17d8:	4a cf       	rjmp	.-364    	; 0x166e <play_game+0xb8>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    17da:	90 2f       	mov	r25, r16
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    17dc:	80 2f       	mov	r24, r16
    17de:	4b cf       	rjmp	.-362    	; 0x1676 <play_game+0xc0>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    17e0:	31 2c       	mov	r3, r1
    17e2:	61 cf       	rjmp	.-318    	; 0x16a6 <play_game+0xf0>
		
		
		
	}
	// We get here if the game is over.
}
    17e4:	2c 96       	adiw	r28, 0x0c	; 12
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	08 95       	ret

00001814 <handle_game_over>:
	clear_serial_input_buffer();

}

void handle_game_over(void) {
	move_cursor(35,14);
    1814:	6e e0       	ldi	r22, 0x0E	; 14
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	83 e2       	ldi	r24, 0x23	; 35
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1820:	86 e1       	ldi	r24, 0x16	; 22
    1822:	95 e0       	ldi	r25, 0x05	; 5
    1824:	9f 93       	push	r25
    1826:	8f 93       	push	r24
    1828:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	move_cursor(35,16);
    182c:	60 e1       	ldi	r22, 0x10	; 16
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	83 e2       	ldi	r24, 0x23	; 35
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1838:	88 ef       	ldi	r24, 0xF8	; 248
    183a:	94 e0       	ldi	r25, 0x04	; 4
    183c:	9f 93       	push	r25
    183e:	8f 93       	push	r24
    1840:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1850:	8f 3f       	cpi	r24, 0xFF	; 255
    1852:	e1 f3       	breq	.-8      	; 0x184c <handle_game_over+0x38>
		; // wait
	}
	
}
    1854:	08 95       	ret

00001856 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1856:	0e 94 4f 0a 	call	0x149e	; 0x149e <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    185a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <splash_screen>
	
	while(1) {
		new_game();
    185e:	0e 94 a7 0a 	call	0x154e	; 0x154e <new_game>
		play_game();
    1862:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <play_game>
		handle_game_over();
    1866:	0e 94 0a 0c 	call	0x1814	; 0x1814 <handle_game_over>
    186a:	f9 cf       	rjmp	.-14     	; 0x185e <main+0x8>

0000186c <init_score>:
uint32_t score;
uint32_t high_score;

 
void init_score(void) {
	score = 0;
    186c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <score>
    1870:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <score+0x1>
    1874:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <score+0x2>
    1878:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <score+0x3>
    187c:	08 95       	ret

0000187e <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    187e:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <score>
    1882:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <score+0x1>
    1886:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <score+0x2>
    188a:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <score+0x3>
    188e:	48 0f       	add	r20, r24
    1890:	59 1f       	adc	r21, r25
    1892:	61 1d       	adc	r22, r1
    1894:	71 1d       	adc	r23, r1
    1896:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <score>
    189a:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <score+0x1>
    189e:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <score+0x2>
    18a2:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <score+0x3>
    18a6:	08 95       	ret

000018a8 <get_score>:
}

uint32_t get_score(void) {
	return score;
    18a8:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <score>
    18ac:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <score+0x1>
    18b0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <score+0x2>
    18b4:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <score+0x3>
}
    18b8:	08 95       	ret

000018ba <set_highscore>:

void set_highscore (uint32_t value) {
	high_score= value ; 
    18ba:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <high_score>
    18be:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <high_score+0x1>
    18c2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <high_score+0x2>
    18c6:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <high_score+0x3>
    18ca:	08 95       	ret

000018cc <get_highscore>:
}

uint32_t get_highscore(void){
		return high_score ; 	
    18cc:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <high_score>
    18d0:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <high_score+0x1>
    18d4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <high_score+0x2>
    18d8:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <high_score+0x3>
    18dc:	08 95       	ret

000018de <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    18de:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    18e2:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <display_string+0x1>
    18e6:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <display_string>
	next_col_ptr = 0;
    18ea:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <next_col_ptr+0x1>
    18ee:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <next_col_ptr>
	next_char_to_display = 0;
    18f2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <next_char_to_display+0x1>
    18f6:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <next_char_to_display>
    18fa:	08 95       	ret

000018fc <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	28 97       	sbiw	r28, 0x08	; 8
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1914:	e0 91 3d 02 	lds	r30, 0x023D	; 0x80023d <next_col_ptr>
    1918:	f0 91 3e 02 	lds	r31, 0x023E	; 0x80023e <next_col_ptr+0x1>
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	81 f0       	breq	.+32     	; 0x1940 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1920:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1922:	10 ff       	sbrs	r17, 0
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1926:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <next_col_ptr+0x1>
    192a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    192e:	00 e0       	ldi	r16, 0x00	; 0
    1930:	6b c0       	rjmp	.+214    	; 0x1a08 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1932:	31 96       	adiw	r30, 0x01	; 1
    1934:	f0 93 3e 02 	sts	0x023E, r31	; 0x80023e <next_col_ptr+0x1>
    1938:	e0 93 3d 02 	sts	0x023D, r30	; 0x80023d <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    193c:	00 e0       	ldi	r16, 0x00	; 0
    193e:	64 c0       	rjmp	.+200    	; 0x1a08 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1940:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <next_char_to_display>
    1944:	f0 91 3a 02 	lds	r31, 0x023A	; 0x80023a <next_char_to_display+0x1>
    1948:	30 97       	sbiw	r30, 0x00	; 0
    194a:	09 f4       	brne	.+2      	; 0x194e <scroll_display+0x52>
    194c:	49 c0       	rjmp	.+146    	; 0x19e0 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    194e:	cf 01       	movw	r24, r30
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <next_char_to_display+0x1>
    1956:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <next_char_to_display>
    195a:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    195c:	e1 11       	cpse	r30, r1
    195e:	0a c0       	rjmp	.+20     	; 0x1974 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1960:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <next_char_to_display+0x1>
    1964:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <next_char_to_display>
			shift_countdown = 16;
    1968:	80 e1       	ldi	r24, 0x10	; 16
    196a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    196e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1970:	10 e0       	ldi	r17, 0x00	; 0
    1972:	4a c0       	rjmp	.+148    	; 0x1a08 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1974:	8f e9       	ldi	r24, 0x9F	; 159
    1976:	8e 0f       	add	r24, r30
    1978:	8a 31       	cpi	r24, 0x1A	; 26
    197a:	70 f4       	brcc	.+28     	; 0x1998 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ea 51       	subi	r30, 0x1A	; 26
    1984:	fb 4f       	sbci	r31, 0xFB	; 251
    1986:	85 91       	lpm	r24, Z+
    1988:	94 91       	lpm	r25, Z
    198a:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <next_col_ptr+0x1>
    198e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1992:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	38 c0       	rjmp	.+112    	; 0x1a08 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1998:	8f eb       	ldi	r24, 0xBF	; 191
    199a:	8e 0f       	add	r24, r30
    199c:	8a 31       	cpi	r24, 0x1A	; 26
    199e:	70 f4       	brcc	.+28     	; 0x19bc <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	ea 5d       	subi	r30, 0xDA	; 218
    19a8:	fa 4f       	sbci	r31, 0xFA	; 250
    19aa:	85 91       	lpm	r24, Z+
    19ac:	94 91       	lpm	r25, Z
    19ae:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <next_col_ptr+0x1>
    19b2:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19b6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19b8:	10 e0       	ldi	r17, 0x00	; 0
    19ba:	26 c0       	rjmp	.+76     	; 0x1a08 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    19bc:	80 ed       	ldi	r24, 0xD0	; 208
    19be:	8e 0f       	add	r24, r30
    19c0:	8a 30       	cpi	r24, 0x0A	; 10
    19c2:	00 f5       	brcc	.+64     	; 0x1a04 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	ec 5c       	subi	r30, 0xCC	; 204
    19cc:	fa 4f       	sbci	r31, 0xFA	; 250
    19ce:	85 91       	lpm	r24, Z+
    19d0:	94 91       	lpm	r25, Z
    19d2:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <next_col_ptr+0x1>
    19d6:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19da:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19dc:	10 e0       	ldi	r17, 0x00	; 0
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    19e0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <display_string>
    19e4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19e8:	01 e0       	ldi	r16, 0x01	; 1
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <scroll_display+0xf4>
    19ee:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    19f0:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <next_char_to_display+0x1>
    19f4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <next_char_to_display>
		display_string = 0;
    19f8:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <display_string+0x1>
    19fc:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a00:	10 e0       	ldi	r17, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a04:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a06:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1a08:	0e 94 44 0a 	call	0x1488	; 0x1488 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1a0c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    1a10:	fe 01       	movw	r30, r28
    1a12:	38 96       	adiw	r30, 0x08	; 8
    1a14:	ce 01       	movw	r24, r28
    1a16:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1a18:	11 23       	and	r17, r17
    1a1a:	14 f4       	brge	.+4      	; 0x1a20 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1a1c:	20 83       	st	Z, r18
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1a20:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1a22:	11 0f       	add	r17, r17
    1a24:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1a26:	e8 17       	cp	r30, r24
    1a28:	f9 07       	cpc	r31, r25
    1a2a:	b1 f7       	brne	.-20     	; 0x1a18 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1a2e:	be 01       	movw	r22, r28
    1a30:	6f 5f       	subi	r22, 0xFF	; 255
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8f e0       	ldi	r24, 0x0F	; 15
    1a36:	0e 94 27 0a 	call	0x144e	; 0x144e <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1a3a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <shift_countdown.1854>
    1a3e:	88 23       	and	r24, r24
    1a40:	89 f0       	breq	.+34     	; 0x1a64 <scroll_display+0x168>
		shift_countdown--;
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1a48:	00 23       	and	r16, r16
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <scroll_display+0x154>
    1a4c:	88 23       	and	r24, r24
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <scroll_display+0x158>
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <scroll_display+0x15e>
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <scroll_display+0x15e>
    1a58:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	99 23       	and	r25, r25
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <scroll_display+0x16e>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1a64:	00 23       	and	r16, r16
    1a66:	a1 f3       	breq	.-24     	; 0x1a50 <scroll_display+0x154>
    1a68:	f7 cf       	rjmp	.-18     	; 0x1a58 <scroll_display+0x15c>
	return !finished;
}
    1a6a:	28 96       	adiw	r28, 0x08	; 8
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	08 95       	ret

00001a80 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1a80:	cf 93       	push	r28
    1a82:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1a8e:	9f b7       	in	r25, 0x3f	; 63
    1a90:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1a94:	99 23       	and	r25, r25
    1a96:	29 f1       	breq	.+74     	; 0x1ae2 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a98:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a9e:	d1 f3       	breq	.-12     	; 0x1a94 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1aa0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1aa2:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <out_insert_pos>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8e 0f       	add	r24, r30
    1aaa:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <out_insert_pos>
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	e2 5b       	subi	r30, 0xB2	; 178
    1ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1ab6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1ac0:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <out_insert_pos>
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	11 f4       	brne	.+4      	; 0x1acc <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1ac8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1acc:	e1 ec       	ldi	r30, 0xC1	; 193
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 62       	ori	r24, 0x20	; 32
    1ad4:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1ad6:	99 23       	and	r25, r25
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <uart_put_char+0x68>
		sei();
    1ada:	78 94       	sei
	}
	return 0;
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
}
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1af0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1af4:	88 23       	and	r24, r24
    1af6:	e1 f3       	breq	.-8      	; 0x1af0 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1af8:	2f b7       	in	r18, 0x3f	; 63
    1afa:	20 78       	andi	r18, 0x80	; 128
	cli();
    1afc:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1afe:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <input_insert_pos>
    1b02:	30 91 5f 03 	lds	r19, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	83 1b       	sub	r24, r19
    1b0a:	91 09       	sbc	r25, r1
    1b0c:	5a f4       	brpl	.+22     	; 0x1b24 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b0e:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <input_insert_pos>
    1b12:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	e8 1b       	sub	r30, r24
    1b1a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b1c:	e2 5a       	subi	r30, 0xA2	; 162
    1b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b20:	80 81       	ld	r24, Z
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1b24:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <input_insert_pos>
    1b28:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	e8 1b       	sub	r30, r24
    1b30:	f1 09       	sbc	r31, r1
    1b32:	e2 5b       	subi	r30, 0xB2	; 178
    1b34:	fc 4f       	sbci	r31, 0xFC	; 252
    1b36:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1b38:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1b3c:	91 50       	subi	r25, 0x01	; 1
    1b3e:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1b42:	22 23       	and	r18, r18
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <uart_get_char+0x58>
		sei();
    1b46:	78 94       	sei
	}	
	return c;
}
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	08 95       	ret

00001b4c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1b4c:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <out_insert_pos>
	bytes_in_out_buffer = 0;
    1b50:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <bytes_in_out_buffer>
	input_insert_pos = 0;
    1b54:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1b58:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <bytes_in_input_buffer>
	input_overrun = 0;
    1b5c:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1b60:	40 93 3f 02 	sts	0x023F, r20	; 0x80023f <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	aa 1f       	adc	r26, r26
    1b6e:	bb 1f       	adc	r27, r27
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	aa 1f       	adc	r26, r26
    1b76:	bb 1f       	adc	r27, r27
    1b78:	9c 01       	movw	r18, r24
    1b7a:	ad 01       	movw	r20, r26
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	44 1f       	adc	r20, r20
    1b82:	55 1f       	adc	r21, r21
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	72 e1       	ldi	r23, 0x12	; 18
    1b88:	8a e7       	ldi	r24, 0x7A	; 122
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__divmodsi4>
    1b90:	ba 01       	movw	r22, r20
    1b92:	a9 01       	movw	r20, r18
    1b94:	4f 5f       	subi	r20, 0xFF	; 255
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	6f 4f       	sbci	r22, 0xFF	; 255
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	db 01       	movw	r26, r22
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	1a f4       	brpl	.+6      	; 0x1ba8 <init_serial_stdio+0x5c>
    1ba2:	01 96       	adiw	r24, 0x01	; 1
    1ba4:	a1 1d       	adc	r26, r1
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	b5 95       	asr	r27
    1baa:	a7 95       	ror	r26
    1bac:	97 95       	ror	r25
    1bae:	87 95       	ror	r24
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1bb2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    1bb6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1bba:	e1 ec       	ldi	r30, 0xC1	; 193
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	88 e1       	ldi	r24, 0x18	; 24
    1bc0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 68       	ori	r24, 0x80	; 128
    1bc6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1bc8:	e0 e6       	ldi	r30, 0x60	; 96
    1bca:	f3 e0       	ldi	r31, 0x03	; 3
    1bcc:	85 e0       	ldi	r24, 0x05	; 5
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	93 83       	std	Z+3, r25	; 0x03
    1bd2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	08 95       	ret

00001bda <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1bda:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	91 11       	cpse	r25, r1
    1be2:	01 c0       	rjmp	.+2      	; 0x1be6 <serial_input_available+0xc>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
}
    1be6:	08 95       	ret

00001be8 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1be8:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <input_insert_pos>
	bytes_in_input_buffer = 0;
    1bec:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <bytes_in_input_buffer>
    1bf0:	08 95       	ret

00001bf2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	2f 93       	push	r18
    1bfe:	8f 93       	push	r24
    1c00:	9f 93       	push	r25
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1c06:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1c0a:	88 23       	and	r24, r24
    1c0c:	29 f1       	breq	.+74     	; 0x1c58 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1c0e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <out_insert_pos>
    1c12:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	82 1b       	sub	r24, r18
    1c1a:	91 09       	sbc	r25, r1
    1c1c:	5a f4       	brpl	.+22     	; 0x1c34 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c1e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <out_insert_pos>
    1c22:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	e8 1b       	sub	r30, r24
    1c2a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c2c:	e3 5b       	subi	r30, 0xB3	; 179
    1c2e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c30:	90 81       	ld	r25, Z
    1c32:	0a c0       	rjmp	.+20     	; 0x1c48 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1c34:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <out_insert_pos>
    1c38:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	e8 1b       	sub	r30, r24
    1c40:	f1 09       	sbc	r31, r1
    1c42:	e2 5b       	subi	r30, 0xB2	; 178
    1c44:	fd 4f       	sbci	r31, 0xFD	; 253
    1c46:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1c48:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1c4c:	81 50       	subi	r24, 0x01	; 1
    1c4e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1c52:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1c58:	e1 ec       	ldi	r30, 0xC1	; 193
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8f 7d       	andi	r24, 0xDF	; 223
    1c60:	80 83       	st	Z, r24
	}
}
    1c62:	ff 91       	pop	r31
    1c64:	ef 91       	pop	r30
    1c66:	9f 91       	pop	r25
    1c68:	8f 91       	pop	r24
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	5f 93       	push	r21
    1c88:	6f 93       	push	r22
    1c8a:	7f 93       	push	r23
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	cf 93       	push	r28
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1c9a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1c9e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <do_echo>
    1ca2:	88 23       	and	r24, r24
    1ca4:	49 f0       	breq	.+18     	; 0x1cb8 <__vector_20+0x42>
    1ca6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <bytes_in_out_buffer>
    1caa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cac:	29 f0       	breq	.+10     	; 0x1cb8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	8c 2f       	mov	r24, r28
    1cb4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1cb8:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	20 f0       	brcs	.+8      	; 0x1cc8 <__vector_20+0x52>
		input_overrun = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <input_overrun>
    1cc6:	18 c0       	rjmp	.+48     	; 0x1cf8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1cc8:	cd 30       	cpi	r28, 0x0D	; 13
    1cca:	09 f4       	brne	.+2      	; 0x1cce <__vector_20+0x58>
			c = '\n';
    1ccc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1cce:	e0 91 4d 03 	lds	r30, 0x034D	; 0x80034d <input_insert_pos>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	8e 0f       	add	r24, r30
    1cd6:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <input_insert_pos>
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	e2 5b       	subi	r30, 0xB2	; 178
    1cde:	fc 4f       	sbci	r31, 0xFC	; 252
    1ce0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1ce2:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <bytes_in_input_buffer>
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1cec:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <input_insert_pos>
    1cf0:	80 31       	cpi	r24, 0x10	; 16
    1cf2:	11 f4       	brne	.+4      	; 0x1cf8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1cf4:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <input_insert_pos>
		}
	}
}
    1cf8:	ff 91       	pop	r31
    1cfa:	ef 91       	pop	r30
    1cfc:	cf 91       	pop	r28
    1cfe:	bf 91       	pop	r27
    1d00:	af 91       	pop	r26
    1d02:	9f 91       	pop	r25
    1d04:	8f 91       	pop	r24
    1d06:	7f 91       	pop	r23
    1d08:	6f 91       	pop	r22
    1d0a:	5f 91       	pop	r21
    1d0c:	4f 91       	pop	r20
    1d0e:	3f 91       	pop	r19
    1d10:	2f 91       	pop	r18
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1d1c:	94 b1       	in	r25, 0x04	; 4
    1d1e:	90 6b       	ori	r25, 0xB0	; 176
    1d20:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1d22:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1d24:	90 e5       	ldi	r25, 0x50	; 80
    1d26:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1d28:	88 30       	cpi	r24, 0x08	; 8
    1d2a:	21 f0       	breq	.+8      	; 0x1d34 <spi_setup_master+0x18>
    1d2c:	80 32       	cpi	r24, 0x20	; 32
    1d2e:	11 f0       	breq	.+4      	; 0x1d34 <spi_setup_master+0x18>
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	19 f4       	brne	.+6      	; 0x1d3a <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	9d bd       	out	0x2d, r25	; 45
			break;
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1d3a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1d3c:	80 32       	cpi	r24, 0x20	; 32
    1d3e:	69 f0       	breq	.+26     	; 0x1d5a <spi_setup_master+0x3e>
    1d40:	28 f4       	brcc	.+10     	; 0x1d4c <spi_setup_master+0x30>
    1d42:	88 30       	cpi	r24, 0x08	; 8
    1d44:	71 f0       	breq	.+28     	; 0x1d62 <spi_setup_master+0x46>
    1d46:	80 31       	cpi	r24, 0x10	; 16
    1d48:	61 f0       	breq	.+24     	; 0x1d62 <spi_setup_master+0x46>
    1d4a:	0e c0       	rjmp	.+28     	; 0x1d68 <spi_setup_master+0x4c>
    1d4c:	80 34       	cpi	r24, 0x40	; 64
    1d4e:	29 f0       	breq	.+10     	; 0x1d5a <spi_setup_master+0x3e>
    1d50:	80 38       	cpi	r24, 0x80	; 128
    1d52:	51 f4       	brne	.+20     	; 0x1d68 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1d54:	8c b5       	in	r24, 0x2c	; 44
    1d56:	81 60       	ori	r24, 0x01	; 1
    1d58:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1d5a:	8c b5       	in	r24, 0x2c	; 44
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	8c bd       	out	0x2c, r24	; 44
			break;
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1d62:	8c b5       	in	r24, 0x2c	; 44
    1d64:	81 60       	ori	r24, 0x01	; 1
    1d66:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1d68:	2c 98       	cbi	0x05, 4	; 5
    1d6a:	08 95       	ret

00001d6c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1d6c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1d6e:	0d b4       	in	r0, 0x2d	; 45
    1d70:	07 fe       	sbrs	r0, 7
    1d72:	fd cf       	rjmp	.-6      	; 0x1d6e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1d74:	8e b5       	in	r24, 0x2e	; 46
    1d76:	08 95       	ret

00001d78 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	7f 93       	push	r23
    1d7e:	6f 93       	push	r22
    1d80:	89 e8       	ldi	r24, 0x89	; 137
    1d82:	96 e0       	ldi	r25, 0x06	; 6
    1d84:	9f 93       	push	r25
    1d86:	8f 93       	push	r24
    1d88:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	08 95       	ret

00001d9a <normal_display_mode>:
    1d9a:	84 e8       	ldi	r24, 0x84	; 132
    1d9c:	96 e0       	ldi	r25, 0x06	; 6
    1d9e:	9f 93       	push	r25
    1da0:	8f 93       	push	r24
    1da2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	08 95       	ret

00001dac <clear_terminal>:
    1dac:	8f e7       	ldi	r24, 0x7F	; 127
    1dae:	96 e0       	ldi	r25, 0x06	; 6
    1db0:	9f 93       	push	r25
    1db2:	8f 93       	push	r24
    1db4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	08 95       	ret

00001dbe <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1dbe:	1f 92       	push	r1
    1dc0:	8f 93       	push	r24
    1dc2:	89 e7       	ldi	r24, 0x79	; 121
    1dc4:	96 e0       	ldi	r25, 0x06	; 6
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	08 95       	ret

00001dd8 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1dd8:	82 e7       	ldi	r24, 0x72	; 114
    1dda:	96 e0       	ldi	r25, 0x06	; 6
    1ddc:	9f 93       	push	r25
    1dde:	8f 93       	push	r24
    1de0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <printf_P>
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	08 95       	ret

00001dea <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1dea:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <clockTicks>
    1dee:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <clockTicks+0x1>
    1df2:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <clockTicks+0x2>
    1df6:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1dfa:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1dfc:	8c e7       	ldi	r24, 0x7C	; 124
    1dfe:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1e08:	ee e6       	ldi	r30, 0x6E	; 110
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	82 60       	ori	r24, 0x02	; 2
    1e10:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1e12:	85 b3       	in	r24, 0x15	; 21
    1e14:	82 70       	andi	r24, 0x02	; 2
    1e16:	85 bb       	out	0x15, r24	; 21
    1e18:	08 95       	ret

00001e1a <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1e1a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1e1c:	f8 94       	cli
	returnValue = clockTicks;
    1e1e:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <clockTicks>
    1e22:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <clockTicks+0x1>
    1e26:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <clockTicks+0x2>
    1e2a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <clockTicks+0x3>
	if(interruptsOn) {
    1e2e:	22 23       	and	r18, r18
    1e30:	0c f4       	brge	.+2      	; 0x1e34 <get_current_time+0x1a>
		sei();
    1e32:	78 94       	sei
	}
	return returnValue;
}
    1e34:	08 95       	ret

00001e36 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1e36:	1f 92       	push	r1
    1e38:	0f 92       	push	r0
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	0f 92       	push	r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    1e48:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <clockTicks>
    1e4c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <clockTicks+0x1>
    1e50:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <clockTicks+0x2>
    1e54:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <clockTicks+0x3>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	a1 1d       	adc	r26, r1
    1e5c:	b1 1d       	adc	r27, r1
    1e5e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <clockTicks>
    1e62:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <clockTicks+0x1>
    1e66:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <clockTicks+0x2>
    1e6a:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <clockTicks+0x3>
}
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <__divmodsi4>:
    1e80:	05 2e       	mov	r0, r21
    1e82:	97 fb       	bst	r25, 7
    1e84:	1e f4       	brtc	.+6      	; 0x1e8c <__divmodsi4+0xc>
    1e86:	00 94       	com	r0
    1e88:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__negsi2>
    1e8c:	57 fd       	sbrc	r21, 7
    1e8e:	07 d0       	rcall	.+14     	; 0x1e9e <__divmodsi4_neg2>
    1e90:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__udivmodsi4>
    1e94:	07 fc       	sbrc	r0, 7
    1e96:	03 d0       	rcall	.+6      	; 0x1e9e <__divmodsi4_neg2>
    1e98:	4e f4       	brtc	.+18     	; 0x1eac <__divmodsi4_exit>
    1e9a:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__negsi2>

00001e9e <__divmodsi4_neg2>:
    1e9e:	50 95       	com	r21
    1ea0:	40 95       	com	r20
    1ea2:	30 95       	com	r19
    1ea4:	21 95       	neg	r18
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eaa:	5f 4f       	sbci	r21, 0xFF	; 255

00001eac <__divmodsi4_exit>:
    1eac:	08 95       	ret

00001eae <__negsi2>:
    1eae:	90 95       	com	r25
    1eb0:	80 95       	com	r24
    1eb2:	70 95       	com	r23
    1eb4:	61 95       	neg	r22
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	08 95       	ret

00001ebe <__tablejump2__>:
    1ebe:	ee 0f       	add	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	05 90       	lpm	r0, Z+
    1ec4:	f4 91       	lpm	r31, Z
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	09 94       	ijmp

00001eca <__udivmodsi4>:
    1eca:	a1 e2       	ldi	r26, 0x21	; 33
    1ecc:	1a 2e       	mov	r1, r26
    1ece:	aa 1b       	sub	r26, r26
    1ed0:	bb 1b       	sub	r27, r27
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	0d c0       	rjmp	.+26     	; 0x1ef0 <__udivmodsi4_ep>

00001ed6 <__udivmodsi4_loop>:
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	bb 1f       	adc	r27, r27
    1eda:	ee 1f       	adc	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	a2 17       	cp	r26, r18
    1ee0:	b3 07       	cpc	r27, r19
    1ee2:	e4 07       	cpc	r30, r20
    1ee4:	f5 07       	cpc	r31, r21
    1ee6:	20 f0       	brcs	.+8      	; 0x1ef0 <__udivmodsi4_ep>
    1ee8:	a2 1b       	sub	r26, r18
    1eea:	b3 0b       	sbc	r27, r19
    1eec:	e4 0b       	sbc	r30, r20
    1eee:	f5 0b       	sbc	r31, r21

00001ef0 <__udivmodsi4_ep>:
    1ef0:	66 1f       	adc	r22, r22
    1ef2:	77 1f       	adc	r23, r23
    1ef4:	88 1f       	adc	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	1a 94       	dec	r1
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <__udivmodsi4_loop>
    1efc:	60 95       	com	r22
    1efe:	70 95       	com	r23
    1f00:	80 95       	com	r24
    1f02:	90 95       	com	r25
    1f04:	9b 01       	movw	r18, r22
    1f06:	ac 01       	movw	r20, r24
    1f08:	bd 01       	movw	r22, r26
    1f0a:	cf 01       	movw	r24, r30
    1f0c:	08 95       	ret

00001f0e <random_r>:
    1f0e:	8f 92       	push	r8
    1f10:	9f 92       	push	r9
    1f12:	af 92       	push	r10
    1f14:	bf 92       	push	r11
    1f16:	cf 92       	push	r12
    1f18:	df 92       	push	r13
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
    1f24:	68 81       	ld	r22, Y
    1f26:	79 81       	ldd	r23, Y+1	; 0x01
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	61 15       	cp	r22, r1
    1f2e:	71 05       	cpc	r23, r1
    1f30:	81 05       	cpc	r24, r1
    1f32:	91 05       	cpc	r25, r1
    1f34:	21 f4       	brne	.+8      	; 0x1f3e <random_r+0x30>
    1f36:	64 e2       	ldi	r22, 0x24	; 36
    1f38:	79 ed       	ldi	r23, 0xD9	; 217
    1f3a:	8b e5       	ldi	r24, 0x5B	; 91
    1f3c:	97 e0       	ldi	r25, 0x07	; 7
    1f3e:	2d e1       	ldi	r18, 0x1D	; 29
    1f40:	33 ef       	ldi	r19, 0xF3	; 243
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__divmodsi4>
    1f4a:	49 01       	movw	r8, r18
    1f4c:	5a 01       	movw	r10, r20
    1f4e:	9b 01       	movw	r18, r22
    1f50:	ac 01       	movw	r20, r24
    1f52:	a7 ea       	ldi	r26, 0xA7	; 167
    1f54:	b1 e4       	ldi	r27, 0x41	; 65
    1f56:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__muluhisi3>
    1f5a:	6b 01       	movw	r12, r22
    1f5c:	7c 01       	movw	r14, r24
    1f5e:	ac ee       	ldi	r26, 0xEC	; 236
    1f60:	b4 ef       	ldi	r27, 0xF4	; 244
    1f62:	a5 01       	movw	r20, r10
    1f64:	94 01       	movw	r18, r8
    1f66:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulohisi3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	8c 0d       	add	r24, r12
    1f70:	9d 1d       	adc	r25, r13
    1f72:	ae 1d       	adc	r26, r14
    1f74:	bf 1d       	adc	r27, r15
    1f76:	b7 ff       	sbrs	r27, 7
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <random_r+0x72>
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	a1 09       	sbc	r26, r1
    1f7e:	b0 48       	sbci	r27, 0x80	; 128
    1f80:	88 83       	st	Y, r24
    1f82:	99 83       	std	Y+1, r25	; 0x01
    1f84:	aa 83       	std	Y+2, r26	; 0x02
    1f86:	bb 83       	std	Y+3, r27	; 0x03
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	9f 77       	andi	r25, 0x7F	; 127
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	ff 90       	pop	r15
    1f94:	ef 90       	pop	r14
    1f96:	df 90       	pop	r13
    1f98:	cf 90       	pop	r12
    1f9a:	bf 90       	pop	r11
    1f9c:	af 90       	pop	r10
    1f9e:	9f 90       	pop	r9
    1fa0:	8f 90       	pop	r8
    1fa2:	08 95       	ret

00001fa4 <random>:
    1fa4:	8f 92       	push	r8
    1fa6:	9f 92       	push	r9
    1fa8:	af 92       	push	r10
    1faa:	bf 92       	push	r11
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1fb8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1fbc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1fc0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1fc4:	61 15       	cp	r22, r1
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	81 05       	cpc	r24, r1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	21 f4       	brne	.+8      	; 0x1fd6 <random+0x32>
    1fce:	64 e2       	ldi	r22, 0x24	; 36
    1fd0:	79 ed       	ldi	r23, 0xD9	; 217
    1fd2:	8b e5       	ldi	r24, 0x5B	; 91
    1fd4:	97 e0       	ldi	r25, 0x07	; 7
    1fd6:	2d e1       	ldi	r18, 0x1D	; 29
    1fd8:	33 ef       	ldi	r19, 0xF3	; 243
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__divmodsi4>
    1fe2:	49 01       	movw	r8, r18
    1fe4:	5a 01       	movw	r10, r20
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	a7 ea       	ldi	r26, 0xA7	; 167
    1fec:	b1 e4       	ldi	r27, 0x41	; 65
    1fee:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__muluhisi3>
    1ff2:	6b 01       	movw	r12, r22
    1ff4:	7c 01       	movw	r14, r24
    1ff6:	ac ee       	ldi	r26, 0xEC	; 236
    1ff8:	b4 ef       	ldi	r27, 0xF4	; 244
    1ffa:	a5 01       	movw	r20, r10
    1ffc:	94 01       	movw	r18, r8
    1ffe:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulohisi3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8c 0d       	add	r24, r12
    2008:	9d 1d       	adc	r25, r13
    200a:	ae 1d       	adc	r26, r14
    200c:	bf 1d       	adc	r27, r15
    200e:	b7 ff       	sbrs	r27, 7
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <random+0x74>
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	a1 09       	sbc	r26, r1
    2016:	b0 48       	sbci	r27, 0x80	; 128
    2018:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    201c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2020:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2024:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	9f 77       	andi	r25, 0x7F	; 127
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	df 90       	pop	r13
    2034:	cf 90       	pop	r12
    2036:	bf 90       	pop	r11
    2038:	af 90       	pop	r10
    203a:	9f 90       	pop	r9
    203c:	8f 90       	pop	r8
    203e:	08 95       	ret

00002040 <srandom>:
    2040:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    2044:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    2048:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    204c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    2050:	08 95       	ret

00002052 <fgetc>:
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ec 01       	movw	r28, r24
    2058:	2b 81       	ldd	r18, Y+3	; 0x03
    205a:	20 ff       	sbrs	r18, 0
    205c:	33 c0       	rjmp	.+102    	; 0x20c4 <fgetc+0x72>
    205e:	26 ff       	sbrs	r18, 6
    2060:	0a c0       	rjmp	.+20     	; 0x2076 <fgetc+0x24>
    2062:	2f 7b       	andi	r18, 0xBF	; 191
    2064:	2b 83       	std	Y+3, r18	; 0x03
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	9f 83       	std	Y+7, r25	; 0x07
    206e:	8e 83       	std	Y+6, r24	; 0x06
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	29 c0       	rjmp	.+82     	; 0x20c8 <fgetc+0x76>
    2076:	22 ff       	sbrs	r18, 2
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <fgetc+0x46>
    207a:	e8 81       	ld	r30, Y
    207c:	f9 81       	ldd	r31, Y+1	; 0x01
    207e:	80 81       	ld	r24, Z
    2080:	08 2e       	mov	r0, r24
    2082:	00 0c       	add	r0, r0
    2084:	99 0b       	sbc	r25, r25
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	19 f4       	brne	.+6      	; 0x2090 <fgetc+0x3e>
    208a:	20 62       	ori	r18, 0x20	; 32
    208c:	2b 83       	std	Y+3, r18	; 0x03
    208e:	1a c0       	rjmp	.+52     	; 0x20c4 <fgetc+0x72>
    2090:	31 96       	adiw	r30, 0x01	; 1
    2092:	f9 83       	std	Y+1, r31	; 0x01
    2094:	e8 83       	st	Y, r30
    2096:	0e c0       	rjmp	.+28     	; 0x20b4 <fgetc+0x62>
    2098:	ea 85       	ldd	r30, Y+10	; 0x0a
    209a:	fb 85       	ldd	r31, Y+11	; 0x0b
    209c:	09 95       	icall
    209e:	97 ff       	sbrs	r25, 7
    20a0:	09 c0       	rjmp	.+18     	; 0x20b4 <fgetc+0x62>
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	01 96       	adiw	r24, 0x01	; 1
    20a6:	11 f0       	breq	.+4      	; 0x20ac <fgetc+0x5a>
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	01 c0       	rjmp	.+2      	; 0x20ae <fgetc+0x5c>
    20ac:	80 e1       	ldi	r24, 0x10	; 16
    20ae:	82 2b       	or	r24, r18
    20b0:	8b 83       	std	Y+3, r24	; 0x03
    20b2:	08 c0       	rjmp	.+16     	; 0x20c4 <fgetc+0x72>
    20b4:	2e 81       	ldd	r18, Y+6	; 0x06
    20b6:	3f 81       	ldd	r19, Y+7	; 0x07
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	3f 83       	std	Y+7, r19	; 0x07
    20be:	2e 83       	std	Y+6, r18	; 0x06
    20c0:	99 27       	eor	r25, r25
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <fgetc+0x76>
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	9f ef       	ldi	r25, 0xFF	; 255
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	08 95       	ret

000020ce <printf>:
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ed e6       	ldi	r30, 0x6D	; 109
    20d4:	f0 e1       	ldi	r31, 0x10	; 16
    20d6:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__prologue_saves__+0x20>
    20da:	ae 01       	movw	r20, r28
    20dc:	4b 5f       	subi	r20, 0xFB	; 251
    20de:	5f 4f       	sbci	r21, 0xFF	; 255
    20e0:	fa 01       	movw	r30, r20
    20e2:	61 91       	ld	r22, Z+
    20e4:	71 91       	ld	r23, Z+
    20e6:	af 01       	movw	r20, r30
    20e8:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__iob+0x2>
    20ec:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__iob+0x3>
    20f0:	0e 94 da 10 	call	0x21b4	; 0x21b4 <vfprintf>
    20f4:	e2 e0       	ldi	r30, 0x02	; 2
    20f6:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__epilogue_restores__+0x20>

000020fa <printf_P>:
    20fa:	a0 e0       	ldi	r26, 0x00	; 0
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 8c 13 	jmp	0x2718	; 0x2718 <__prologue_saves__+0x1c>
    2106:	ae 01       	movw	r20, r28
    2108:	49 5f       	subi	r20, 0xF9	; 249
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	da 01       	movw	r26, r20
    210e:	6d 91       	ld	r22, X+
    2110:	7d 91       	ld	r23, X+
    2112:	ad 01       	movw	r20, r26
    2114:	00 e6       	ldi	r16, 0x60	; 96
    2116:	13 e0       	ldi	r17, 0x03	; 3
    2118:	f8 01       	movw	r30, r16
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	dc 01       	movw	r26, r24
    2120:	13 96       	adiw	r26, 0x03	; 3
    2122:	2c 91       	ld	r18, X
    2124:	13 97       	sbiw	r26, 0x03	; 3
    2126:	28 60       	ori	r18, 0x08	; 8
    2128:	13 96       	adiw	r26, 0x03	; 3
    212a:	2c 93       	st	X, r18
    212c:	0e 94 da 10 	call	0x21b4	; 0x21b4 <vfprintf>
    2130:	d8 01       	movw	r26, r16
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	ed 91       	ld	r30, X+
    2136:	fc 91       	ld	r31, X
    2138:	13 97       	sbiw	r26, 0x03	; 3
    213a:	23 81       	ldd	r18, Z+3	; 0x03
    213c:	27 7f       	andi	r18, 0xF7	; 247
    213e:	23 83       	std	Z+3, r18	; 0x03
    2140:	e4 e0       	ldi	r30, 0x04	; 4
    2142:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <__epilogue_restores__+0x1c>

00002146 <putchar>:
    2146:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <__iob+0x2>
    214a:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <__iob+0x3>
    214e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    2152:	08 95       	ret

00002154 <puts>:
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	e0 91 62 03 	lds	r30, 0x0362	; 0x800362 <__iob+0x2>
    2160:	f0 91 63 03 	lds	r31, 0x0363	; 0x800363 <__iob+0x3>
    2164:	23 81       	ldd	r18, Z+3	; 0x03
    2166:	21 ff       	sbrs	r18, 1
    2168:	1b c0       	rjmp	.+54     	; 0x21a0 <puts+0x4c>
    216a:	8c 01       	movw	r16, r24
    216c:	d0 e0       	ldi	r29, 0x00	; 0
    216e:	c0 e0       	ldi	r28, 0x00	; 0
    2170:	f8 01       	movw	r30, r16
    2172:	81 91       	ld	r24, Z+
    2174:	8f 01       	movw	r16, r30
    2176:	60 91 62 03 	lds	r22, 0x0362	; 0x800362 <__iob+0x2>
    217a:	70 91 63 03 	lds	r23, 0x0363	; 0x800363 <__iob+0x3>
    217e:	db 01       	movw	r26, r22
    2180:	18 96       	adiw	r26, 0x08	; 8
    2182:	ed 91       	ld	r30, X+
    2184:	fc 91       	ld	r31, X
    2186:	19 97       	sbiw	r26, 0x09	; 9
    2188:	88 23       	and	r24, r24
    218a:	31 f0       	breq	.+12     	; 0x2198 <puts+0x44>
    218c:	09 95       	icall
    218e:	89 2b       	or	r24, r25
    2190:	79 f3       	breq	.-34     	; 0x2170 <puts+0x1c>
    2192:	df ef       	ldi	r29, 0xFF	; 255
    2194:	cf ef       	ldi	r28, 0xFF	; 255
    2196:	ec cf       	rjmp	.-40     	; 0x2170 <puts+0x1c>
    2198:	8a e0       	ldi	r24, 0x0A	; 10
    219a:	09 95       	icall
    219c:	89 2b       	or	r24, r25
    219e:	19 f0       	breq	.+6      	; 0x21a6 <puts+0x52>
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	9f ef       	ldi	r25, 0xFF	; 255
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <puts+0x56>
    21a6:	8d 2f       	mov	r24, r29
    21a8:	9c 2f       	mov	r25, r28
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <vfprintf>:
    21b4:	ab e0       	ldi	r26, 0x0B	; 11
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__prologue_saves__>
    21c0:	6c 01       	movw	r12, r24
    21c2:	7b 01       	movw	r14, r22
    21c4:	8a 01       	movw	r16, r20
    21c6:	fc 01       	movw	r30, r24
    21c8:	17 82       	std	Z+7, r1	; 0x07
    21ca:	16 82       	std	Z+6, r1	; 0x06
    21cc:	83 81       	ldd	r24, Z+3	; 0x03
    21ce:	81 ff       	sbrs	r24, 1
    21d0:	cc c1       	rjmp	.+920    	; 0x256a <vfprintf+0x3b6>
    21d2:	ce 01       	movw	r24, r28
    21d4:	01 96       	adiw	r24, 0x01	; 1
    21d6:	3c 01       	movw	r6, r24
    21d8:	f6 01       	movw	r30, r12
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	f7 01       	movw	r30, r14
    21de:	93 fd       	sbrc	r25, 3
    21e0:	85 91       	lpm	r24, Z+
    21e2:	93 ff       	sbrs	r25, 3
    21e4:	81 91       	ld	r24, Z+
    21e6:	7f 01       	movw	r14, r30
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <vfprintf+0x3a>
    21ec:	ba c1       	rjmp	.+884    	; 0x2562 <vfprintf+0x3ae>
    21ee:	85 32       	cpi	r24, 0x25	; 37
    21f0:	39 f4       	brne	.+14     	; 0x2200 <vfprintf+0x4c>
    21f2:	93 fd       	sbrc	r25, 3
    21f4:	85 91       	lpm	r24, Z+
    21f6:	93 ff       	sbrs	r25, 3
    21f8:	81 91       	ld	r24, Z+
    21fa:	7f 01       	movw	r14, r30
    21fc:	85 32       	cpi	r24, 0x25	; 37
    21fe:	29 f4       	brne	.+10     	; 0x220a <vfprintf+0x56>
    2200:	b6 01       	movw	r22, r12
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    2208:	e7 cf       	rjmp	.-50     	; 0x21d8 <vfprintf+0x24>
    220a:	91 2c       	mov	r9, r1
    220c:	21 2c       	mov	r2, r1
    220e:	31 2c       	mov	r3, r1
    2210:	ff e1       	ldi	r31, 0x1F	; 31
    2212:	f3 15       	cp	r31, r3
    2214:	d8 f0       	brcs	.+54     	; 0x224c <vfprintf+0x98>
    2216:	8b 32       	cpi	r24, 0x2B	; 43
    2218:	79 f0       	breq	.+30     	; 0x2238 <vfprintf+0x84>
    221a:	38 f4       	brcc	.+14     	; 0x222a <vfprintf+0x76>
    221c:	80 32       	cpi	r24, 0x20	; 32
    221e:	79 f0       	breq	.+30     	; 0x223e <vfprintf+0x8a>
    2220:	83 32       	cpi	r24, 0x23	; 35
    2222:	a1 f4       	brne	.+40     	; 0x224c <vfprintf+0x98>
    2224:	23 2d       	mov	r18, r3
    2226:	20 61       	ori	r18, 0x10	; 16
    2228:	1d c0       	rjmp	.+58     	; 0x2264 <vfprintf+0xb0>
    222a:	8d 32       	cpi	r24, 0x2D	; 45
    222c:	61 f0       	breq	.+24     	; 0x2246 <vfprintf+0x92>
    222e:	80 33       	cpi	r24, 0x30	; 48
    2230:	69 f4       	brne	.+26     	; 0x224c <vfprintf+0x98>
    2232:	23 2d       	mov	r18, r3
    2234:	21 60       	ori	r18, 0x01	; 1
    2236:	16 c0       	rjmp	.+44     	; 0x2264 <vfprintf+0xb0>
    2238:	83 2d       	mov	r24, r3
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	38 2e       	mov	r3, r24
    223e:	e3 2d       	mov	r30, r3
    2240:	e4 60       	ori	r30, 0x04	; 4
    2242:	3e 2e       	mov	r3, r30
    2244:	2a c0       	rjmp	.+84     	; 0x229a <vfprintf+0xe6>
    2246:	f3 2d       	mov	r31, r3
    2248:	f8 60       	ori	r31, 0x08	; 8
    224a:	1d c0       	rjmp	.+58     	; 0x2286 <vfprintf+0xd2>
    224c:	37 fc       	sbrc	r3, 7
    224e:	2d c0       	rjmp	.+90     	; 0x22aa <vfprintf+0xf6>
    2250:	20 ed       	ldi	r18, 0xD0	; 208
    2252:	28 0f       	add	r18, r24
    2254:	2a 30       	cpi	r18, 0x0A	; 10
    2256:	40 f0       	brcs	.+16     	; 0x2268 <vfprintf+0xb4>
    2258:	8e 32       	cpi	r24, 0x2E	; 46
    225a:	b9 f4       	brne	.+46     	; 0x228a <vfprintf+0xd6>
    225c:	36 fc       	sbrc	r3, 6
    225e:	81 c1       	rjmp	.+770    	; 0x2562 <vfprintf+0x3ae>
    2260:	23 2d       	mov	r18, r3
    2262:	20 64       	ori	r18, 0x40	; 64
    2264:	32 2e       	mov	r3, r18
    2266:	19 c0       	rjmp	.+50     	; 0x229a <vfprintf+0xe6>
    2268:	36 fe       	sbrs	r3, 6
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <vfprintf+0xc4>
    226c:	8a e0       	ldi	r24, 0x0A	; 10
    226e:	98 9e       	mul	r9, r24
    2270:	20 0d       	add	r18, r0
    2272:	11 24       	eor	r1, r1
    2274:	92 2e       	mov	r9, r18
    2276:	11 c0       	rjmp	.+34     	; 0x229a <vfprintf+0xe6>
    2278:	ea e0       	ldi	r30, 0x0A	; 10
    227a:	2e 9e       	mul	r2, r30
    227c:	20 0d       	add	r18, r0
    227e:	11 24       	eor	r1, r1
    2280:	22 2e       	mov	r2, r18
    2282:	f3 2d       	mov	r31, r3
    2284:	f0 62       	ori	r31, 0x20	; 32
    2286:	3f 2e       	mov	r3, r31
    2288:	08 c0       	rjmp	.+16     	; 0x229a <vfprintf+0xe6>
    228a:	8c 36       	cpi	r24, 0x6C	; 108
    228c:	21 f4       	brne	.+8      	; 0x2296 <vfprintf+0xe2>
    228e:	83 2d       	mov	r24, r3
    2290:	80 68       	ori	r24, 0x80	; 128
    2292:	38 2e       	mov	r3, r24
    2294:	02 c0       	rjmp	.+4      	; 0x229a <vfprintf+0xe6>
    2296:	88 36       	cpi	r24, 0x68	; 104
    2298:	41 f4       	brne	.+16     	; 0x22aa <vfprintf+0xf6>
    229a:	f7 01       	movw	r30, r14
    229c:	93 fd       	sbrc	r25, 3
    229e:	85 91       	lpm	r24, Z+
    22a0:	93 ff       	sbrs	r25, 3
    22a2:	81 91       	ld	r24, Z+
    22a4:	7f 01       	movw	r14, r30
    22a6:	81 11       	cpse	r24, r1
    22a8:	b3 cf       	rjmp	.-154    	; 0x2210 <vfprintf+0x5c>
    22aa:	98 2f       	mov	r25, r24
    22ac:	9f 7d       	andi	r25, 0xDF	; 223
    22ae:	95 54       	subi	r25, 0x45	; 69
    22b0:	93 30       	cpi	r25, 0x03	; 3
    22b2:	28 f4       	brcc	.+10     	; 0x22be <vfprintf+0x10a>
    22b4:	0c 5f       	subi	r16, 0xFC	; 252
    22b6:	1f 4f       	sbci	r17, 0xFF	; 255
    22b8:	9f e3       	ldi	r25, 0x3F	; 63
    22ba:	99 83       	std	Y+1, r25	; 0x01
    22bc:	0d c0       	rjmp	.+26     	; 0x22d8 <vfprintf+0x124>
    22be:	83 36       	cpi	r24, 0x63	; 99
    22c0:	31 f0       	breq	.+12     	; 0x22ce <vfprintf+0x11a>
    22c2:	83 37       	cpi	r24, 0x73	; 115
    22c4:	71 f0       	breq	.+28     	; 0x22e2 <vfprintf+0x12e>
    22c6:	83 35       	cpi	r24, 0x53	; 83
    22c8:	09 f0       	breq	.+2      	; 0x22cc <vfprintf+0x118>
    22ca:	59 c0       	rjmp	.+178    	; 0x237e <vfprintf+0x1ca>
    22cc:	21 c0       	rjmp	.+66     	; 0x2310 <vfprintf+0x15c>
    22ce:	f8 01       	movw	r30, r16
    22d0:	80 81       	ld	r24, Z
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	0e 5f       	subi	r16, 0xFE	; 254
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
    22d8:	88 24       	eor	r8, r8
    22da:	83 94       	inc	r8
    22dc:	91 2c       	mov	r9, r1
    22de:	53 01       	movw	r10, r6
    22e0:	13 c0       	rjmp	.+38     	; 0x2308 <vfprintf+0x154>
    22e2:	28 01       	movw	r4, r16
    22e4:	f2 e0       	ldi	r31, 0x02	; 2
    22e6:	4f 0e       	add	r4, r31
    22e8:	51 1c       	adc	r5, r1
    22ea:	f8 01       	movw	r30, r16
    22ec:	a0 80       	ld	r10, Z
    22ee:	b1 80       	ldd	r11, Z+1	; 0x01
    22f0:	36 fe       	sbrs	r3, 6
    22f2:	03 c0       	rjmp	.+6      	; 0x22fa <vfprintf+0x146>
    22f4:	69 2d       	mov	r22, r9
    22f6:	70 e0       	ldi	r23, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <vfprintf+0x14a>
    22fa:	6f ef       	ldi	r22, 0xFF	; 255
    22fc:	7f ef       	ldi	r23, 0xFF	; 255
    22fe:	c5 01       	movw	r24, r10
    2300:	0e 94 c6 12 	call	0x258c	; 0x258c <strnlen>
    2304:	4c 01       	movw	r8, r24
    2306:	82 01       	movw	r16, r4
    2308:	f3 2d       	mov	r31, r3
    230a:	ff 77       	andi	r31, 0x7F	; 127
    230c:	3f 2e       	mov	r3, r31
    230e:	16 c0       	rjmp	.+44     	; 0x233c <vfprintf+0x188>
    2310:	28 01       	movw	r4, r16
    2312:	22 e0       	ldi	r18, 0x02	; 2
    2314:	42 0e       	add	r4, r18
    2316:	51 1c       	adc	r5, r1
    2318:	f8 01       	movw	r30, r16
    231a:	a0 80       	ld	r10, Z
    231c:	b1 80       	ldd	r11, Z+1	; 0x01
    231e:	36 fe       	sbrs	r3, 6
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <vfprintf+0x174>
    2322:	69 2d       	mov	r22, r9
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	02 c0       	rjmp	.+4      	; 0x232c <vfprintf+0x178>
    2328:	6f ef       	ldi	r22, 0xFF	; 255
    232a:	7f ef       	ldi	r23, 0xFF	; 255
    232c:	c5 01       	movw	r24, r10
    232e:	0e 94 bb 12 	call	0x2576	; 0x2576 <strnlen_P>
    2332:	4c 01       	movw	r8, r24
    2334:	f3 2d       	mov	r31, r3
    2336:	f0 68       	ori	r31, 0x80	; 128
    2338:	3f 2e       	mov	r3, r31
    233a:	82 01       	movw	r16, r4
    233c:	33 fc       	sbrc	r3, 3
    233e:	1b c0       	rjmp	.+54     	; 0x2376 <vfprintf+0x1c2>
    2340:	82 2d       	mov	r24, r2
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	88 16       	cp	r8, r24
    2346:	99 06       	cpc	r9, r25
    2348:	b0 f4       	brcc	.+44     	; 0x2376 <vfprintf+0x1c2>
    234a:	b6 01       	movw	r22, r12
    234c:	80 e2       	ldi	r24, 0x20	; 32
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    2354:	2a 94       	dec	r2
    2356:	f4 cf       	rjmp	.-24     	; 0x2340 <vfprintf+0x18c>
    2358:	f5 01       	movw	r30, r10
    235a:	37 fc       	sbrc	r3, 7
    235c:	85 91       	lpm	r24, Z+
    235e:	37 fe       	sbrs	r3, 7
    2360:	81 91       	ld	r24, Z+
    2362:	5f 01       	movw	r10, r30
    2364:	b6 01       	movw	r22, r12
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    236c:	21 10       	cpse	r2, r1
    236e:	2a 94       	dec	r2
    2370:	21 e0       	ldi	r18, 0x01	; 1
    2372:	82 1a       	sub	r8, r18
    2374:	91 08       	sbc	r9, r1
    2376:	81 14       	cp	r8, r1
    2378:	91 04       	cpc	r9, r1
    237a:	71 f7       	brne	.-36     	; 0x2358 <vfprintf+0x1a4>
    237c:	e8 c0       	rjmp	.+464    	; 0x254e <vfprintf+0x39a>
    237e:	84 36       	cpi	r24, 0x64	; 100
    2380:	11 f0       	breq	.+4      	; 0x2386 <vfprintf+0x1d2>
    2382:	89 36       	cpi	r24, 0x69	; 105
    2384:	41 f5       	brne	.+80     	; 0x23d6 <vfprintf+0x222>
    2386:	f8 01       	movw	r30, r16
    2388:	37 fe       	sbrs	r3, 7
    238a:	07 c0       	rjmp	.+14     	; 0x239a <vfprintf+0x1e6>
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	82 81       	ldd	r24, Z+2	; 0x02
    2392:	93 81       	ldd	r25, Z+3	; 0x03
    2394:	0c 5f       	subi	r16, 0xFC	; 252
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	08 c0       	rjmp	.+16     	; 0x23aa <vfprintf+0x1f6>
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	07 2e       	mov	r0, r23
    23a0:	00 0c       	add	r0, r0
    23a2:	88 0b       	sbc	r24, r24
    23a4:	99 0b       	sbc	r25, r25
    23a6:	0e 5f       	subi	r16, 0xFE	; 254
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	f3 2d       	mov	r31, r3
    23ac:	ff 76       	andi	r31, 0x6F	; 111
    23ae:	3f 2e       	mov	r3, r31
    23b0:	97 ff       	sbrs	r25, 7
    23b2:	09 c0       	rjmp	.+18     	; 0x23c6 <vfprintf+0x212>
    23b4:	90 95       	com	r25
    23b6:	80 95       	com	r24
    23b8:	70 95       	com	r23
    23ba:	61 95       	neg	r22
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	8f 4f       	sbci	r24, 0xFF	; 255
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	f0 68       	ori	r31, 0x80	; 128
    23c4:	3f 2e       	mov	r3, r31
    23c6:	2a e0       	ldi	r18, 0x0A	; 10
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	a3 01       	movw	r20, r6
    23cc:	0e 94 0d 13 	call	0x261a	; 0x261a <__ultoa_invert>
    23d0:	88 2e       	mov	r8, r24
    23d2:	86 18       	sub	r8, r6
    23d4:	45 c0       	rjmp	.+138    	; 0x2460 <vfprintf+0x2ac>
    23d6:	85 37       	cpi	r24, 0x75	; 117
    23d8:	31 f4       	brne	.+12     	; 0x23e6 <vfprintf+0x232>
    23da:	23 2d       	mov	r18, r3
    23dc:	2f 7e       	andi	r18, 0xEF	; 239
    23de:	b2 2e       	mov	r11, r18
    23e0:	2a e0       	ldi	r18, 0x0A	; 10
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	25 c0       	rjmp	.+74     	; 0x2430 <vfprintf+0x27c>
    23e6:	93 2d       	mov	r25, r3
    23e8:	99 7f       	andi	r25, 0xF9	; 249
    23ea:	b9 2e       	mov	r11, r25
    23ec:	8f 36       	cpi	r24, 0x6F	; 111
    23ee:	c1 f0       	breq	.+48     	; 0x2420 <vfprintf+0x26c>
    23f0:	18 f4       	brcc	.+6      	; 0x23f8 <vfprintf+0x244>
    23f2:	88 35       	cpi	r24, 0x58	; 88
    23f4:	79 f0       	breq	.+30     	; 0x2414 <vfprintf+0x260>
    23f6:	b5 c0       	rjmp	.+362    	; 0x2562 <vfprintf+0x3ae>
    23f8:	80 37       	cpi	r24, 0x70	; 112
    23fa:	19 f0       	breq	.+6      	; 0x2402 <vfprintf+0x24e>
    23fc:	88 37       	cpi	r24, 0x78	; 120
    23fe:	21 f0       	breq	.+8      	; 0x2408 <vfprintf+0x254>
    2400:	b0 c0       	rjmp	.+352    	; 0x2562 <vfprintf+0x3ae>
    2402:	e9 2f       	mov	r30, r25
    2404:	e0 61       	ori	r30, 0x10	; 16
    2406:	be 2e       	mov	r11, r30
    2408:	b4 fe       	sbrs	r11, 4
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <vfprintf+0x272>
    240c:	fb 2d       	mov	r31, r11
    240e:	f4 60       	ori	r31, 0x04	; 4
    2410:	bf 2e       	mov	r11, r31
    2412:	09 c0       	rjmp	.+18     	; 0x2426 <vfprintf+0x272>
    2414:	34 fe       	sbrs	r3, 4
    2416:	0a c0       	rjmp	.+20     	; 0x242c <vfprintf+0x278>
    2418:	29 2f       	mov	r18, r25
    241a:	26 60       	ori	r18, 0x06	; 6
    241c:	b2 2e       	mov	r11, r18
    241e:	06 c0       	rjmp	.+12     	; 0x242c <vfprintf+0x278>
    2420:	28 e0       	ldi	r18, 0x08	; 8
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <vfprintf+0x27c>
    2426:	20 e1       	ldi	r18, 0x10	; 16
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <vfprintf+0x27c>
    242c:	20 e1       	ldi	r18, 0x10	; 16
    242e:	32 e0       	ldi	r19, 0x02	; 2
    2430:	f8 01       	movw	r30, r16
    2432:	b7 fe       	sbrs	r11, 7
    2434:	07 c0       	rjmp	.+14     	; 0x2444 <vfprintf+0x290>
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	0c 5f       	subi	r16, 0xFC	; 252
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	06 c0       	rjmp	.+12     	; 0x2450 <vfprintf+0x29c>
    2444:	60 81       	ld	r22, Z
    2446:	71 81       	ldd	r23, Z+1	; 0x01
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 5f       	subi	r16, 0xFE	; 254
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	a3 01       	movw	r20, r6
    2452:	0e 94 0d 13 	call	0x261a	; 0x261a <__ultoa_invert>
    2456:	88 2e       	mov	r8, r24
    2458:	86 18       	sub	r8, r6
    245a:	fb 2d       	mov	r31, r11
    245c:	ff 77       	andi	r31, 0x7F	; 127
    245e:	3f 2e       	mov	r3, r31
    2460:	36 fe       	sbrs	r3, 6
    2462:	0d c0       	rjmp	.+26     	; 0x247e <vfprintf+0x2ca>
    2464:	23 2d       	mov	r18, r3
    2466:	2e 7f       	andi	r18, 0xFE	; 254
    2468:	a2 2e       	mov	r10, r18
    246a:	89 14       	cp	r8, r9
    246c:	58 f4       	brcc	.+22     	; 0x2484 <vfprintf+0x2d0>
    246e:	34 fe       	sbrs	r3, 4
    2470:	0b c0       	rjmp	.+22     	; 0x2488 <vfprintf+0x2d4>
    2472:	32 fc       	sbrc	r3, 2
    2474:	09 c0       	rjmp	.+18     	; 0x2488 <vfprintf+0x2d4>
    2476:	83 2d       	mov	r24, r3
    2478:	8e 7e       	andi	r24, 0xEE	; 238
    247a:	a8 2e       	mov	r10, r24
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <vfprintf+0x2d4>
    247e:	b8 2c       	mov	r11, r8
    2480:	a3 2c       	mov	r10, r3
    2482:	03 c0       	rjmp	.+6      	; 0x248a <vfprintf+0x2d6>
    2484:	b8 2c       	mov	r11, r8
    2486:	01 c0       	rjmp	.+2      	; 0x248a <vfprintf+0x2d6>
    2488:	b9 2c       	mov	r11, r9
    248a:	a4 fe       	sbrs	r10, 4
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <vfprintf+0x2f8>
    248e:	fe 01       	movw	r30, r28
    2490:	e8 0d       	add	r30, r8
    2492:	f1 1d       	adc	r31, r1
    2494:	80 81       	ld	r24, Z
    2496:	80 33       	cpi	r24, 0x30	; 48
    2498:	21 f4       	brne	.+8      	; 0x24a2 <vfprintf+0x2ee>
    249a:	9a 2d       	mov	r25, r10
    249c:	99 7e       	andi	r25, 0xE9	; 233
    249e:	a9 2e       	mov	r10, r25
    24a0:	09 c0       	rjmp	.+18     	; 0x24b4 <vfprintf+0x300>
    24a2:	a2 fe       	sbrs	r10, 2
    24a4:	06 c0       	rjmp	.+12     	; 0x24b2 <vfprintf+0x2fe>
    24a6:	b3 94       	inc	r11
    24a8:	b3 94       	inc	r11
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <vfprintf+0x300>
    24ac:	8a 2d       	mov	r24, r10
    24ae:	86 78       	andi	r24, 0x86	; 134
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <vfprintf+0x300>
    24b2:	b3 94       	inc	r11
    24b4:	a3 fc       	sbrc	r10, 3
    24b6:	11 c0       	rjmp	.+34     	; 0x24da <vfprintf+0x326>
    24b8:	a0 fe       	sbrs	r10, 0
    24ba:	06 c0       	rjmp	.+12     	; 0x24c8 <vfprintf+0x314>
    24bc:	b2 14       	cp	r11, r2
    24be:	88 f4       	brcc	.+34     	; 0x24e2 <vfprintf+0x32e>
    24c0:	28 0c       	add	r2, r8
    24c2:	92 2c       	mov	r9, r2
    24c4:	9b 18       	sub	r9, r11
    24c6:	0e c0       	rjmp	.+28     	; 0x24e4 <vfprintf+0x330>
    24c8:	b2 14       	cp	r11, r2
    24ca:	60 f4       	brcc	.+24     	; 0x24e4 <vfprintf+0x330>
    24cc:	b6 01       	movw	r22, r12
    24ce:	80 e2       	ldi	r24, 0x20	; 32
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    24d6:	b3 94       	inc	r11
    24d8:	f7 cf       	rjmp	.-18     	; 0x24c8 <vfprintf+0x314>
    24da:	b2 14       	cp	r11, r2
    24dc:	18 f4       	brcc	.+6      	; 0x24e4 <vfprintf+0x330>
    24de:	2b 18       	sub	r2, r11
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <vfprintf+0x332>
    24e2:	98 2c       	mov	r9, r8
    24e4:	21 2c       	mov	r2, r1
    24e6:	a4 fe       	sbrs	r10, 4
    24e8:	10 c0       	rjmp	.+32     	; 0x250a <vfprintf+0x356>
    24ea:	b6 01       	movw	r22, r12
    24ec:	80 e3       	ldi	r24, 0x30	; 48
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    24f4:	a2 fe       	sbrs	r10, 2
    24f6:	17 c0       	rjmp	.+46     	; 0x2526 <vfprintf+0x372>
    24f8:	a1 fc       	sbrc	r10, 1
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <vfprintf+0x34e>
    24fc:	88 e7       	ldi	r24, 0x78	; 120
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <vfprintf+0x352>
    2502:	88 e5       	ldi	r24, 0x58	; 88
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	b6 01       	movw	r22, r12
    2508:	0c c0       	rjmp	.+24     	; 0x2522 <vfprintf+0x36e>
    250a:	8a 2d       	mov	r24, r10
    250c:	86 78       	andi	r24, 0x86	; 134
    250e:	59 f0       	breq	.+22     	; 0x2526 <vfprintf+0x372>
    2510:	a1 fe       	sbrs	r10, 1
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <vfprintf+0x364>
    2514:	8b e2       	ldi	r24, 0x2B	; 43
    2516:	01 c0       	rjmp	.+2      	; 0x251a <vfprintf+0x366>
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	a7 fc       	sbrc	r10, 7
    251c:	8d e2       	ldi	r24, 0x2D	; 45
    251e:	b6 01       	movw	r22, r12
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    2526:	89 14       	cp	r8, r9
    2528:	38 f4       	brcc	.+14     	; 0x2538 <vfprintf+0x384>
    252a:	b6 01       	movw	r22, r12
    252c:	80 e3       	ldi	r24, 0x30	; 48
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    2534:	9a 94       	dec	r9
    2536:	f7 cf       	rjmp	.-18     	; 0x2526 <vfprintf+0x372>
    2538:	8a 94       	dec	r8
    253a:	f3 01       	movw	r30, r6
    253c:	e8 0d       	add	r30, r8
    253e:	f1 1d       	adc	r31, r1
    2540:	80 81       	ld	r24, Z
    2542:	b6 01       	movw	r22, r12
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    254a:	81 10       	cpse	r8, r1
    254c:	f5 cf       	rjmp	.-22     	; 0x2538 <vfprintf+0x384>
    254e:	22 20       	and	r2, r2
    2550:	09 f4       	brne	.+2      	; 0x2554 <vfprintf+0x3a0>
    2552:	42 ce       	rjmp	.-892    	; 0x21d8 <vfprintf+0x24>
    2554:	b6 01       	movw	r22, r12
    2556:	80 e2       	ldi	r24, 0x20	; 32
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <fputc>
    255e:	2a 94       	dec	r2
    2560:	f6 cf       	rjmp	.-20     	; 0x254e <vfprintf+0x39a>
    2562:	f6 01       	movw	r30, r12
    2564:	86 81       	ldd	r24, Z+6	; 0x06
    2566:	97 81       	ldd	r25, Z+7	; 0x07
    2568:	02 c0       	rjmp	.+4      	; 0x256e <vfprintf+0x3ba>
    256a:	8f ef       	ldi	r24, 0xFF	; 255
    256c:	9f ef       	ldi	r25, 0xFF	; 255
    256e:	2b 96       	adiw	r28, 0x0b	; 11
    2570:	e2 e1       	ldi	r30, 0x12	; 18
    2572:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__epilogue_restores__>

00002576 <strnlen_P>:
    2576:	fc 01       	movw	r30, r24
    2578:	05 90       	lpm	r0, Z+
    257a:	61 50       	subi	r22, 0x01	; 1
    257c:	70 40       	sbci	r23, 0x00	; 0
    257e:	01 10       	cpse	r0, r1
    2580:	d8 f7       	brcc	.-10     	; 0x2578 <strnlen_P+0x2>
    2582:	80 95       	com	r24
    2584:	90 95       	com	r25
    2586:	8e 0f       	add	r24, r30
    2588:	9f 1f       	adc	r25, r31
    258a:	08 95       	ret

0000258c <strnlen>:
    258c:	fc 01       	movw	r30, r24
    258e:	61 50       	subi	r22, 0x01	; 1
    2590:	70 40       	sbci	r23, 0x00	; 0
    2592:	01 90       	ld	r0, Z+
    2594:	01 10       	cpse	r0, r1
    2596:	d8 f7       	brcc	.-10     	; 0x258e <strnlen+0x2>
    2598:	80 95       	com	r24
    259a:	90 95       	com	r25
    259c:	8e 0f       	add	r24, r30
    259e:	9f 1f       	adc	r25, r31
    25a0:	08 95       	ret

000025a2 <fputc>:
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	fb 01       	movw	r30, r22
    25ac:	23 81       	ldd	r18, Z+3	; 0x03
    25ae:	21 fd       	sbrc	r18, 1
    25b0:	03 c0       	rjmp	.+6      	; 0x25b8 <fputc+0x16>
    25b2:	8f ef       	ldi	r24, 0xFF	; 255
    25b4:	9f ef       	ldi	r25, 0xFF	; 255
    25b6:	2c c0       	rjmp	.+88     	; 0x2610 <fputc+0x6e>
    25b8:	22 ff       	sbrs	r18, 2
    25ba:	16 c0       	rjmp	.+44     	; 0x25e8 <fputc+0x46>
    25bc:	46 81       	ldd	r20, Z+6	; 0x06
    25be:	57 81       	ldd	r21, Z+7	; 0x07
    25c0:	24 81       	ldd	r18, Z+4	; 0x04
    25c2:	35 81       	ldd	r19, Z+5	; 0x05
    25c4:	42 17       	cp	r20, r18
    25c6:	53 07       	cpc	r21, r19
    25c8:	44 f4       	brge	.+16     	; 0x25da <fputc+0x38>
    25ca:	a0 81       	ld	r26, Z
    25cc:	b1 81       	ldd	r27, Z+1	; 0x01
    25ce:	9d 01       	movw	r18, r26
    25d0:	2f 5f       	subi	r18, 0xFF	; 255
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	31 83       	std	Z+1, r19	; 0x01
    25d6:	20 83       	st	Z, r18
    25d8:	8c 93       	st	X, r24
    25da:	26 81       	ldd	r18, Z+6	; 0x06
    25dc:	37 81       	ldd	r19, Z+7	; 0x07
    25de:	2f 5f       	subi	r18, 0xFF	; 255
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	37 83       	std	Z+7, r19	; 0x07
    25e4:	26 83       	std	Z+6, r18	; 0x06
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <fputc+0x6e>
    25e8:	8b 01       	movw	r16, r22
    25ea:	ec 01       	movw	r28, r24
    25ec:	fb 01       	movw	r30, r22
    25ee:	00 84       	ldd	r0, Z+8	; 0x08
    25f0:	f1 85       	ldd	r31, Z+9	; 0x09
    25f2:	e0 2d       	mov	r30, r0
    25f4:	09 95       	icall
    25f6:	89 2b       	or	r24, r25
    25f8:	e1 f6       	brne	.-72     	; 0x25b2 <fputc+0x10>
    25fa:	d8 01       	movw	r26, r16
    25fc:	16 96       	adiw	r26, 0x06	; 6
    25fe:	8d 91       	ld	r24, X+
    2600:	9c 91       	ld	r25, X
    2602:	17 97       	sbiw	r26, 0x07	; 7
    2604:	01 96       	adiw	r24, 0x01	; 1
    2606:	17 96       	adiw	r26, 0x07	; 7
    2608:	9c 93       	st	X, r25
    260a:	8e 93       	st	-X, r24
    260c:	16 97       	sbiw	r26, 0x06	; 6
    260e:	ce 01       	movw	r24, r28
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <__ultoa_invert>:
    261a:	fa 01       	movw	r30, r20
    261c:	aa 27       	eor	r26, r26
    261e:	28 30       	cpi	r18, 0x08	; 8
    2620:	51 f1       	breq	.+84     	; 0x2676 <__ultoa_invert+0x5c>
    2622:	20 31       	cpi	r18, 0x10	; 16
    2624:	81 f1       	breq	.+96     	; 0x2686 <__ultoa_invert+0x6c>
    2626:	e8 94       	clt
    2628:	6f 93       	push	r22
    262a:	6e 7f       	andi	r22, 0xFE	; 254
    262c:	6e 5f       	subi	r22, 0xFE	; 254
    262e:	7f 4f       	sbci	r23, 0xFF	; 255
    2630:	8f 4f       	sbci	r24, 0xFF	; 255
    2632:	9f 4f       	sbci	r25, 0xFF	; 255
    2634:	af 4f       	sbci	r26, 0xFF	; 255
    2636:	b1 e0       	ldi	r27, 0x01	; 1
    2638:	3e d0       	rcall	.+124    	; 0x26b6 <__ultoa_invert+0x9c>
    263a:	b4 e0       	ldi	r27, 0x04	; 4
    263c:	3c d0       	rcall	.+120    	; 0x26b6 <__ultoa_invert+0x9c>
    263e:	67 0f       	add	r22, r23
    2640:	78 1f       	adc	r23, r24
    2642:	89 1f       	adc	r24, r25
    2644:	9a 1f       	adc	r25, r26
    2646:	a1 1d       	adc	r26, r1
    2648:	68 0f       	add	r22, r24
    264a:	79 1f       	adc	r23, r25
    264c:	8a 1f       	adc	r24, r26
    264e:	91 1d       	adc	r25, r1
    2650:	a1 1d       	adc	r26, r1
    2652:	6a 0f       	add	r22, r26
    2654:	71 1d       	adc	r23, r1
    2656:	81 1d       	adc	r24, r1
    2658:	91 1d       	adc	r25, r1
    265a:	a1 1d       	adc	r26, r1
    265c:	20 d0       	rcall	.+64     	; 0x269e <__ultoa_invert+0x84>
    265e:	09 f4       	brne	.+2      	; 0x2662 <__ultoa_invert+0x48>
    2660:	68 94       	set
    2662:	3f 91       	pop	r19
    2664:	2a e0       	ldi	r18, 0x0A	; 10
    2666:	26 9f       	mul	r18, r22
    2668:	11 24       	eor	r1, r1
    266a:	30 19       	sub	r19, r0
    266c:	30 5d       	subi	r19, 0xD0	; 208
    266e:	31 93       	st	Z+, r19
    2670:	de f6       	brtc	.-74     	; 0x2628 <__ultoa_invert+0xe>
    2672:	cf 01       	movw	r24, r30
    2674:	08 95       	ret
    2676:	46 2f       	mov	r20, r22
    2678:	47 70       	andi	r20, 0x07	; 7
    267a:	40 5d       	subi	r20, 0xD0	; 208
    267c:	41 93       	st	Z+, r20
    267e:	b3 e0       	ldi	r27, 0x03	; 3
    2680:	0f d0       	rcall	.+30     	; 0x26a0 <__ultoa_invert+0x86>
    2682:	c9 f7       	brne	.-14     	; 0x2676 <__ultoa_invert+0x5c>
    2684:	f6 cf       	rjmp	.-20     	; 0x2672 <__ultoa_invert+0x58>
    2686:	46 2f       	mov	r20, r22
    2688:	4f 70       	andi	r20, 0x0F	; 15
    268a:	40 5d       	subi	r20, 0xD0	; 208
    268c:	4a 33       	cpi	r20, 0x3A	; 58
    268e:	18 f0       	brcs	.+6      	; 0x2696 <__ultoa_invert+0x7c>
    2690:	49 5d       	subi	r20, 0xD9	; 217
    2692:	31 fd       	sbrc	r19, 1
    2694:	40 52       	subi	r20, 0x20	; 32
    2696:	41 93       	st	Z+, r20
    2698:	02 d0       	rcall	.+4      	; 0x269e <__ultoa_invert+0x84>
    269a:	a9 f7       	brne	.-22     	; 0x2686 <__ultoa_invert+0x6c>
    269c:	ea cf       	rjmp	.-44     	; 0x2672 <__ultoa_invert+0x58>
    269e:	b4 e0       	ldi	r27, 0x04	; 4
    26a0:	a6 95       	lsr	r26
    26a2:	97 95       	ror	r25
    26a4:	87 95       	ror	r24
    26a6:	77 95       	ror	r23
    26a8:	67 95       	ror	r22
    26aa:	ba 95       	dec	r27
    26ac:	c9 f7       	brne	.-14     	; 0x26a0 <__ultoa_invert+0x86>
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	61 05       	cpc	r22, r1
    26b2:	71 05       	cpc	r23, r1
    26b4:	08 95       	ret
    26b6:	9b 01       	movw	r18, r22
    26b8:	ac 01       	movw	r20, r24
    26ba:	0a 2e       	mov	r0, r26
    26bc:	06 94       	lsr	r0
    26be:	57 95       	ror	r21
    26c0:	47 95       	ror	r20
    26c2:	37 95       	ror	r19
    26c4:	27 95       	ror	r18
    26c6:	ba 95       	dec	r27
    26c8:	c9 f7       	brne	.-14     	; 0x26bc <__ultoa_invert+0xa2>
    26ca:	62 0f       	add	r22, r18
    26cc:	73 1f       	adc	r23, r19
    26ce:	84 1f       	adc	r24, r20
    26d0:	95 1f       	adc	r25, r21
    26d2:	a0 1d       	adc	r26, r0
    26d4:	08 95       	ret

000026d6 <__muluhisi3>:
    26d6:	0e 94 b5 13 	call	0x276a	; 0x276a <__umulhisi3>
    26da:	a5 9f       	mul	r26, r21
    26dc:	90 0d       	add	r25, r0
    26de:	b4 9f       	mul	r27, r20
    26e0:	90 0d       	add	r25, r0
    26e2:	a4 9f       	mul	r26, r20
    26e4:	80 0d       	add	r24, r0
    26e6:	91 1d       	adc	r25, r1
    26e8:	11 24       	eor	r1, r1
    26ea:	08 95       	ret

000026ec <__mulshisi3>:
    26ec:	b7 ff       	sbrs	r27, 7
    26ee:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__muluhisi3>

000026f2 <__mulohisi3>:
    26f2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__muluhisi3>
    26f6:	82 1b       	sub	r24, r18
    26f8:	93 0b       	sbc	r25, r19
    26fa:	08 95       	ret

000026fc <__prologue_saves__>:
    26fc:	2f 92       	push	r2
    26fe:	3f 92       	push	r3
    2700:	4f 92       	push	r4
    2702:	5f 92       	push	r5
    2704:	6f 92       	push	r6
    2706:	7f 92       	push	r7
    2708:	8f 92       	push	r8
    270a:	9f 92       	push	r9
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	cf 93       	push	r28
    271e:	df 93       	push	r29
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	ca 1b       	sub	r28, r26
    2726:	db 0b       	sbc	r29, r27
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	09 94       	ijmp

00002734 <__epilogue_restores__>:
    2734:	2a 88       	ldd	r2, Y+18	; 0x12
    2736:	39 88       	ldd	r3, Y+17	; 0x11
    2738:	48 88       	ldd	r4, Y+16	; 0x10
    273a:	5f 84       	ldd	r5, Y+15	; 0x0f
    273c:	6e 84       	ldd	r6, Y+14	; 0x0e
    273e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2740:	8c 84       	ldd	r8, Y+12	; 0x0c
    2742:	9b 84       	ldd	r9, Y+11	; 0x0b
    2744:	aa 84       	ldd	r10, Y+10	; 0x0a
    2746:	b9 84       	ldd	r11, Y+9	; 0x09
    2748:	c8 84       	ldd	r12, Y+8	; 0x08
    274a:	df 80       	ldd	r13, Y+7	; 0x07
    274c:	ee 80       	ldd	r14, Y+6	; 0x06
    274e:	fd 80       	ldd	r15, Y+5	; 0x05
    2750:	0c 81       	ldd	r16, Y+4	; 0x04
    2752:	1b 81       	ldd	r17, Y+3	; 0x03
    2754:	aa 81       	ldd	r26, Y+2	; 0x02
    2756:	b9 81       	ldd	r27, Y+1	; 0x01
    2758:	ce 0f       	add	r28, r30
    275a:	d1 1d       	adc	r29, r1
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	ed 01       	movw	r28, r26
    2768:	08 95       	ret

0000276a <__umulhisi3>:
    276a:	a2 9f       	mul	r26, r18
    276c:	b0 01       	movw	r22, r0
    276e:	b3 9f       	mul	r27, r19
    2770:	c0 01       	movw	r24, r0
    2772:	a3 9f       	mul	r26, r19
    2774:	70 0d       	add	r23, r0
    2776:	81 1d       	adc	r24, r1
    2778:	11 24       	eor	r1, r1
    277a:	91 1d       	adc	r25, r1
    277c:	b2 9f       	mul	r27, r18
    277e:	70 0d       	add	r23, r0
    2780:	81 1d       	adc	r24, r1
    2782:	11 24       	eor	r1, r1
    2784:	91 1d       	adc	r25, r1
    2786:	08 95       	ret

00002788 <_exit>:
    2788:	f8 94       	cli

0000278a <__stop_program>:
    278a:	ff cf       	rjmp	.-2      	; 0x278a <__stop_program>
