
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00002fa4  00003038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024c  008001c2  008001c2  000030fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b1c  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015b4  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000236f  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c14  00000000  00000000  0000a978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001141  00000000  00000000  0000b58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ec1  00000000  00000000  0000c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000440  00000000  00000000  0000f58e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 03 	jmp	0x692	; 0x692 <__ctors_end>
       4:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       8:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      10:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      14:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_5>
      18:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      20:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      28:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      2c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      30:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      34:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      38:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      3c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      40:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__vector_16>
      44:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      4c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      50:	0c 94 33 12 	jmp	0x2466	; 0x2466 <__vector_20>
      54:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__vector_21>
      58:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      5c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      60:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      68:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      6c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      70:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      74:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      78:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__bad_interrupt>
      7c:	64 06       	cpc	r6, r20
      7e:	73 06       	cpc	r7, r19
      80:	73 06       	cpc	r7, r19
      82:	73 06       	cpc	r7, r19
      84:	73 06       	cpc	r7, r19
      86:	73 06       	cpc	r7, r19
      88:	73 06       	cpc	r7, r19
      8a:	73 06       	cpc	r7, r19
      8c:	73 06       	cpc	r7, r19
      8e:	73 06       	cpc	r7, r19
      90:	73 06       	cpc	r7, r19
      92:	59 06       	cpc	r5, r25
      94:	73 06       	cpc	r7, r19
      96:	e1 05       	cpc	r30, r1
      98:	6e 06       	cpc	r6, r30
      9a:	73 06       	cpc	r7, r19
      9c:	73 06       	cpc	r7, r19
      9e:	73 06       	cpc	r7, r19
      a0:	73 06       	cpc	r7, r19
      a2:	73 06       	cpc	r7, r19
      a4:	73 06       	cpc	r7, r19
      a6:	73 06       	cpc	r7, r19
      a8:	73 06       	cpc	r7, r19
      aa:	02 06       	cpc	r0, r18
      ac:	73 06       	cpc	r7, r19
      ae:	73 06       	cpc	r7, r19
      b0:	73 06       	cpc	r7, r19
      b2:	73 06       	cpc	r7, r19
      b4:	32 06       	cpc	r3, r18
      b6:	73 06       	cpc	r7, r19
      b8:	25 06       	cpc	r2, r21
      ba:	73 06       	cpc	r7, r19
      bc:	73 06       	cpc	r7, r19
      be:	73 06       	cpc	r7, r19
      c0:	73 06       	cpc	r7, r19
      c2:	73 06       	cpc	r7, r19
      c4:	73 06       	cpc	r7, r19
      c6:	73 06       	cpc	r7, r19
      c8:	f7 05       	cpc	r31, r7
      ca:	73 06       	cpc	r7, r19
      cc:	73 06       	cpc	r7, r19
      ce:	73 06       	cpc	r7, r19
      d0:	18 06       	cpc	r1, r24
      d2:	73 06       	cpc	r7, r19
      d4:	0d 06       	cpc	r0, r29
      d6:	73 06       	cpc	r7, r19
      d8:	73 06       	cpc	r7, r19
      da:	73 06       	cpc	r7, r19
      dc:	69 06       	cpc	r6, r25
      de:	73 06       	cpc	r7, r19
      e0:	73 06       	cpc	r7, r19
      e2:	73 06       	cpc	r7, r19
      e4:	73 06       	cpc	r7, r19
      e6:	73 06       	cpc	r7, r19
      e8:	73 06       	cpc	r7, r19
      ea:	73 06       	cpc	r7, r19
      ec:	73 06       	cpc	r7, r19
      ee:	73 06       	cpc	r7, r19
      f0:	73 06       	cpc	r7, r19
      f2:	73 06       	cpc	r7, r19
      f4:	73 06       	cpc	r7, r19
      f6:	73 06       	cpc	r7, r19
      f8:	3f 06       	cpc	r3, r31
      fa:	73 06       	cpc	r7, r19
      fc:	73 06       	cpc	r7, r19
      fe:	73 06       	cpc	r7, r19
     100:	73 06       	cpc	r7, r19
     102:	73 06       	cpc	r7, r19
     104:	73 06       	cpc	r7, r19
     106:	73 06       	cpc	r7, r19
     108:	73 06       	cpc	r7, r19
     10a:	73 06       	cpc	r7, r19
     10c:	73 06       	cpc	r7, r19
     10e:	73 06       	cpc	r7, r19
     110:	73 06       	cpc	r7, r19
     112:	73 06       	cpc	r7, r19
     114:	73 06       	cpc	r7, r19
     116:	73 06       	cpc	r7, r19
     118:	73 06       	cpc	r7, r19
     11a:	73 06       	cpc	r7, r19
     11c:	73 06       	cpc	r7, r19
     11e:	73 06       	cpc	r7, r19
     120:	73 06       	cpc	r7, r19
     122:	73 06       	cpc	r7, r19
     124:	73 06       	cpc	r7, r19
     126:	73 06       	cpc	r7, r19
     128:	4c 06       	cpc	r4, r28
     12a:	73 06       	cpc	r7, r19
     12c:	73 06       	cpc	r7, r19
     12e:	73 06       	cpc	r7, r19
     130:	73 06       	cpc	r7, r19
     132:	73 06       	cpc	r7, r19
     134:	ec 05       	cpc	r30, r12

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2324>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2322>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2314>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2312>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2283>:
     550:	53 74 75 64 65 6e 74 20 4e 75 6d 62 65 72 3a 20     Student Number: 
     560:	34 34 33 31 37 39 36 32 00                          44317962.

00000569 <__c.2281>:
     569:	43 53 53 45 32 30 31 30 20 70 72 6f 6a 65 63 74     CSSE2010 project
     579:	20 62 79 20 3c 4a 75 61 6e 20 45 73 70 61 72 65      by <Juan Espare
     589:	73 3e 00                                            s>.

0000058c <__c.2279>:
     58c:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000594 <numbers>:
     594:	ff 05 fc 05 f8 05 f4 05 f0 05 ec 05 e8 05 e4 05     ................
     5a4:	e0 05 dc 05                                         ....

000005a8 <letters>:
     5a8:	6e 06 6a 06 66 06 62 06 5e 06 5a 06 56 06 52 06     n.j.f.b.^.Z.V.R.
     5b8:	4f 06 4b 06 47 06 43 06 3e 06 3a 06 36 06 32 06     O.K.G.C.>.:.6.2.
     5c8:	2d 06 29 06 25 06 20 06 1c 06 17 06 12 06 0d 06     -.).%. .........
     5d8:	08 06 03 06                                         ....

000005dc <cols_9>:
     5dc:	64 92 92 7d                                         d..}

000005e0 <cols_8>:
     5e0:	6c 92 92 6d                                         l..m

000005e4 <cols_7>:
     5e4:	80 9e a0 c1                                         ....

000005e8 <cols_6>:
     5e8:	7c 92 92 4d                                         |..M

000005ec <cols_5>:
     5ec:	e4 a2 a2 9d                                         ....

000005f0 <cols_4>:
     5f0:	18 28 48 ff                                         .(H.

000005f4 <cols_3>:
     5f4:	44 92 92 6d                                         D..m

000005f8 <cols_2>:
     5f8:	46 8a 92 63                                         F..c

000005fc <cols_1>:
     5fc:	42 fe 03                                            B..

000005ff <cols_0>:
     5ff:	7c 92 a2 7d                                         |..}

00000603 <cols_Z>:
     603:	86 8a 92 a2 c3                                      .....

00000608 <cols_Y>:
     608:	e0 10 0e 10 e1                                      .....

0000060d <cols_X>:
     60d:	c6 28 10 28 c7                                      .(.(.

00000612 <cols_W>:
     612:	fc 02 1c 02 fd                                      .....

00000617 <cols_V>:
     617:	f8 04 02 04 f9                                      .....

0000061c <cols_U>:
     61c:	fc 02 02 fd                                         ....

00000620 <cols_T>:
     620:	80 80 fe 80 81                                      .....

00000625 <cols_S>:
     625:	64 92 92 4d                                         d..M

00000629 <cols_R>:
     629:	fe 90 98 67                                         ...g

0000062d <cols_Q>:
     62d:	7c 82 8a 7c 03                                      |..|.

00000632 <cols_P>:
     632:	fe 90 90 61                                         ...a

00000636 <cols_O>:
     636:	7c 82 82 7d                                         |..}

0000063a <cols_N>:
     63a:	fe 20 10 ff                                         . ..

0000063e <cols_M>:
     63e:	fe 40 30 40 ff                                      .@0@.

00000643 <cols_L>:
     643:	fe 02 02 03                                         ....

00000647 <cols_K>:
     647:	fe 10 28 c7                                         ..(.

0000064b <cols_J>:
     64b:	04 02 02 fd                                         ....

0000064f <cols_I>:
     64f:	82 fe 83                                            ...

00000652 <cols_H>:
     652:	fe 10 10 ff                                         ....

00000656 <cols_G>:
     656:	7c 82 92 5d                                         |..]

0000065a <cols_F>:
     65a:	fe 90 90 81                                         ....

0000065e <cols_E>:
     65e:	fe 92 92 83                                         ....

00000662 <cols_D>:
     662:	fe 82 82 7d                                         ...}

00000666 <cols_C>:
     666:	7c 82 82 45                                         |..E

0000066a <cols_B>:
     66a:	fe 92 92 6d                                         ...m

0000066e <cols_A>:
     66e:	7e 90 90 7f                                         ~...

00000672 <__c.2082>:
     672:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000679 <__c.2078>:
     679:	1b 5b 25 64 6d 00                                   .[%dm.

0000067f <__c.2068>:
     67f:	1b 5b 32 4a 00                                      .[2J.

00000684 <__c.2058>:
     684:	1b 5b 30 6d 00                                      .[0m.

00000689 <__c.2033>:
     689:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000692 <__ctors_end>:
     692:	11 24       	eor	r1, r1
     694:	1f be       	out	0x3f, r1	; 63
     696:	cf ef       	ldi	r28, 0xFF	; 255
     698:	d8 e0       	ldi	r29, 0x08	; 8
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	cd bf       	out	0x3d, r28	; 61

0000069e <__do_copy_data>:
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	e4 ea       	ldi	r30, 0xA4	; 164
     6a6:	ff e2       	ldi	r31, 0x2F	; 47
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__do_copy_data+0x10>
     6aa:	05 90       	lpm	r0, Z+
     6ac:	0d 92       	st	X+, r0
     6ae:	a2 3c       	cpi	r26, 0xC2	; 194
     6b0:	b1 07       	cpc	r27, r17
     6b2:	d9 f7       	brne	.-10     	; 0x6aa <__do_copy_data+0xc>

000006b4 <__do_clear_bss>:
     6b4:	24 e0       	ldi	r18, 0x04	; 4
     6b6:	a2 ec       	ldi	r26, 0xC2	; 194
     6b8:	b1 e0       	ldi	r27, 0x01	; 1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <.do_clear_bss_start>

000006bc <.do_clear_bss_loop>:
     6bc:	1d 92       	st	X+, r1

000006be <.do_clear_bss_start>:
     6be:	ae 30       	cpi	r26, 0x0E	; 14
     6c0:	b2 07       	cpc	r27, r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <.do_clear_bss_loop>
     6c4:	0e 94 20 10 	call	0x2040	; 0x2040 <main>
     6c8:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <_exit>

000006cc <__bad_interrupt>:
     6cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006d0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6d0:	e8 e6       	ldi	r30, 0x68	; 104
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	80 81       	ld	r24, Z
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6da:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6dc:	ec e6       	ldi	r30, 0x6C	; 108
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	8f 60       	ori	r24, 0x0F	; 15
     6e4:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6e6:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
     6ea:	08 95       	ret

000006ec <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6ec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
     6f0:	18 16       	cp	r1, r24
     6f2:	3c f5       	brge	.+78     	; 0x742 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6f8:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6fa:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6fc:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     700:	92 30       	cpi	r25, 0x02	; 2
     702:	b4 f0       	brlt	.+44     	; 0x730 <button_pushed+0x44>
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     70a:	f9 01       	movw	r30, r18
     70c:	ed 53       	subi	r30, 0x3D	; 61
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	40 81       	ld	r20, Z
     712:	f9 01       	movw	r30, r18
     714:	ee 53       	subi	r30, 0x3E	; 62
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     71a:	9f 5f       	subi	r25, 0xFF	; 255
     71c:	29 2f       	mov	r18, r25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 91 c2 01 	lds	r20, 0x01C2	; 0x8001c2 <__data_end>
     724:	04 2e       	mov	r0, r20
     726:	00 0c       	add	r0, r0
     728:	55 0b       	sbc	r21, r21
     72a:	24 17       	cp	r18, r20
     72c:	35 07       	cpc	r19, r21
     72e:	6c f3       	brlt	.-38     	; 0x70a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     730:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <__data_end>
     734:	91 50       	subi	r25, 0x01	; 1
     736:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__data_end>
		
		if(interrupts_were_enabled) {
     73a:	66 23       	and	r22, r22
     73c:	1c f4       	brge	.+6      	; 0x744 <button_pushed+0x58>
			// Turn them back on again
			sei();
     73e:	78 94       	sei
     740:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     742:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     744:	08 95       	ret

00000746 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     764:	43 b1       	in	r20, 0x03	; 3
     766:	4f 70       	andi	r20, 0x0F	; 15
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     76c:	64 2f       	mov	r22, r20
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__data_end>
     774:	24 30       	cpi	r18, 0x04	; 4
     776:	04 f5       	brge	.+64     	; 0x7b8 <__vector_5+0x72>
     778:	9b 01       	movw	r18, r22
     77a:	08 2e       	mov	r0, r24
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_5+0x3c>
     77e:	35 95       	asr	r19
     780:	27 95       	ror	r18
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <__vector_5+0x38>
     786:	20 ff       	sbrs	r18, 0
     788:	17 c0       	rjmp	.+46     	; 0x7b8 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     78a:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	08 2e       	mov	r0, r24
     792:	02 c0       	rjmp	.+4      	; 0x798 <__vector_5+0x52>
     794:	35 95       	asr	r19
     796:	27 95       	ror	r18
     798:	0a 94       	dec	r0
     79a:	e2 f7       	brpl	.-8      	; 0x794 <__vector_5+0x4e>
     79c:	20 fd       	sbrc	r18, 0
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     7a0:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <__data_end>
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	2e 0f       	add	r18, r30
     7a8:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <__data_end>
     7ac:	0e 2e       	mov	r0, r30
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 0b       	sbc	r31, r31
     7b2:	ed 53       	subi	r30, 0x3D	; 61
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	80 83       	st	Z, r24
     7b8:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	91 05       	cpc	r25, r1
     7be:	c1 f6       	brne	.-80     	; 0x770 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7c0:	40 93 c7 01 	sts	0x01C7, r20	; 0x8001c7 <last_button_state>
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <is_ghost_home>:

void set_lives(int8_t num){
	lives += num; 
	//cap max lives 
	if(lives > MAX_LIVES){
		lives = MAX_LIVES; 
     7e2:	6f 30       	cpi	r22, 0x0F	; 15
     7e4:	39 f4       	brne	.+14     	; 0x7f4 <is_ghost_home+0x12>
     7e6:	94 ef       	ldi	r25, 0xF4	; 244
     7e8:	98 0f       	add	r25, r24
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	97 30       	cpi	r25, 0x07	; 7
     7ee:	60 f0       	brcs	.+24     	; 0x808 <is_ghost_home+0x26>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret
     7f4:	6e 30       	cpi	r22, 0x0E	; 14
     7f6:	39 f4       	brne	.+14     	; 0x806 <is_ghost_home+0x24>
     7f8:	92 ef       	ldi	r25, 0xF2	; 242
     7fa:	98 0f       	add	r25, r24
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	93 30       	cpi	r25, 0x03	; 3
     800:	18 f0       	brcs	.+6      	; 0x808 <is_ghost_home+0x26>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret

0000080a <what_is_in_dirn>:
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <what_is_in_dirn+0x30>
     816:	28 f0       	brcs	.+10     	; 0x822 <what_is_in_dirn+0x18>
     818:	42 30       	cpi	r20, 0x02	; 2
     81a:	49 f0       	breq	.+18     	; 0x82e <what_is_in_dirn+0x24>
     81c:	43 30       	cpi	r20, 0x03	; 3
     81e:	99 f0       	breq	.+38     	; 0x846 <what_is_in_dirn+0x3c>
     820:	73 c0       	rjmp	.+230    	; 0x908 <__stack+0x9>
     822:	88 23       	and	r24, r24
     824:	09 f4       	brne	.+2      	; 0x828 <what_is_in_dirn+0x1e>
     826:	72 c0       	rjmp	.+228    	; 0x90c <__stack+0xd>
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	11 c0       	rjmp	.+34     	; 0x850 <what_is_in_dirn+0x46>
     82e:	8e 31       	cpi	r24, 0x1E	; 30
     830:	09 f4       	brne	.+2      	; 0x834 <what_is_in_dirn+0x2a>
     832:	6e c0       	rjmp	.+220    	; 0x910 <__stack+0x11>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0b c0       	rjmp	.+22     	; 0x850 <what_is_in_dirn+0x46>
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <what_is_in_dirn+0x36>
     83e:	6a c0       	rjmp	.+212    	; 0x914 <__stack+0x15>
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	05 c0       	rjmp	.+10     	; 0x850 <what_is_in_dirn+0x46>
     846:	6e 31       	cpi	r22, 0x1E	; 30
     848:	09 f4       	brne	.+2      	; 0x84c <what_is_in_dirn+0x42>
     84a:	66 c0       	rjmp	.+204    	; 0x918 <__stack+0x19>
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	62 0f       	add	r22, r18
     852:	89 0f       	add	r24, r25
     854:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <pacman_x>
     858:	89 13       	cpse	r24, r25
     85a:	05 c0       	rjmp	.+10     	; 0x866 <what_is_in_dirn+0x5c>
     85c:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <pacman_y>
     860:	69 17       	cp	r22, r25
     862:	09 f4       	brne	.+2      	; 0x866 <what_is_in_dirn+0x5c>
     864:	5b c0       	rjmp	.+182    	; 0x91c <__stack+0x1d>
     866:	a1 ed       	ldi	r26, 0xD1	; 209
     868:	b1 e0       	ldi	r27, 0x01	; 1
     86a:	ed ec       	ldi	r30, 0xCD	; 205
     86c:	f1 e0       	ldi	r31, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2d 91       	ld	r18, X+
     872:	82 13       	cpse	r24, r18
     874:	04 c0       	rjmp	.+8      	; 0x87e <what_is_in_dirn+0x74>
     876:	20 81       	ld	r18, Z
     878:	62 17       	cp	r22, r18
     87a:	09 f4       	brne	.+2      	; 0x87e <what_is_in_dirn+0x74>
     87c:	51 c0       	rjmp	.+162    	; 0x920 <__stack+0x21>
     87e:	9f 5f       	subi	r25, 0xFF	; 255
     880:	31 96       	adiw	r30, 0x01	; 1
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	a9 f7       	brne	.-22     	; 0x870 <what_is_in_dirn+0x66>
     886:	46 2f       	mov	r20, r22
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	fa 01       	movw	r30, r20
     890:	ee 0f       	add	r30, r30
     892:	ff 1f       	adc	r31, r31
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e6 5a       	subi	r30, 0xA6	; 166
     89a:	fd 4f       	sbci	r31, 0xFD	; 253
     89c:	c0 80       	ld	r12, Z
     89e:	d1 80       	ldd	r13, Z+1	; 0x01
     8a0:	e2 80       	ldd	r14, Z+2	; 0x02
     8a2:	f3 80       	ldd	r15, Z+3	; 0x03
     8a4:	08 2e       	mov	r0, r24
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <what_is_in_dirn+0xa6>
     8a8:	f6 94       	lsr	r15
     8aa:	e7 94       	ror	r14
     8ac:	d7 94       	ror	r13
     8ae:	c7 94       	ror	r12
     8b0:	0a 94       	dec	r0
     8b2:	d2 f7       	brpl	.-12     	; 0x8a8 <what_is_in_dirn+0x9e>
     8b4:	c0 fc       	sbrc	r12, 0
     8b6:	36 c0       	rjmp	.+108    	; 0x924 <__stack+0x25>
     8b8:	fa 01       	movw	r30, r20
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	ee 0f       	add	r30, r30
     8c0:	ff 1f       	adc	r31, r31
     8c2:	e2 52       	subi	r30, 0x22	; 34
     8c4:	fe 4f       	sbci	r31, 0xFE	; 254
     8c6:	c0 80       	ld	r12, Z
     8c8:	d1 80       	ldd	r13, Z+1	; 0x01
     8ca:	e2 80       	ldd	r14, Z+2	; 0x02
     8cc:	f3 80       	ldd	r15, Z+3	; 0x03
     8ce:	08 2e       	mov	r0, r24
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <what_is_in_dirn+0xd0>
     8d2:	f6 94       	lsr	r15
     8d4:	e7 94       	ror	r14
     8d6:	d7 94       	ror	r13
     8d8:	c7 94       	ror	r12
     8da:	0a 94       	dec	r0
     8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <what_is_in_dirn+0xc8>
     8de:	c0 fc       	sbrc	r12, 0
     8e0:	23 c0       	rjmp	.+70     	; 0x928 <__stack+0x29>
     8e2:	9f e1       	ldi	r25, 0x1F	; 31
     8e4:	94 9f       	mul	r25, r20
     8e6:	f0 01       	movw	r30, r0
     8e8:	95 9f       	mul	r25, r21
     8ea:	f0 0d       	add	r31, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	e2 0f       	add	r30, r18
     8f0:	f3 1f       	adc	r31, r19
     8f2:	ea 5c       	subi	r30, 0xCA	; 202
     8f4:	fe 4f       	sbci	r31, 0xFE	; 254
     8f6:	e4 91       	lpm	r30, Z
     8f8:	e0 32       	cpi	r30, 0x20	; 32
     8fa:	d1 f0       	breq	.+52     	; 0x930 <__stack+0x31>
     8fc:	ee 32       	cpi	r30, 0x2E	; 46
     8fe:	c1 f0       	breq	.+48     	; 0x930 <__stack+0x31>
     900:	e0 35       	cpi	r30, 0x50	; 80
     902:	b1 f0       	breq	.+44     	; 0x930 <__stack+0x31>
     904:	8e ef       	ldi	r24, 0xFE	; 254
     906:	19 c0       	rjmp	.+50     	; 0x93a <__stack+0x3b>
     908:	8e ef       	ldi	r24, 0xFE	; 254
     90a:	17 c0       	rjmp	.+46     	; 0x93a <__stack+0x3b>
     90c:	8e ef       	ldi	r24, 0xFE	; 254
     90e:	15 c0       	rjmp	.+42     	; 0x93a <__stack+0x3b>
     910:	8e ef       	ldi	r24, 0xFE	; 254
     912:	13 c0       	rjmp	.+38     	; 0x93a <__stack+0x3b>
     914:	8e ef       	ldi	r24, 0xFE	; 254
     916:	11 c0       	rjmp	.+34     	; 0x93a <__stack+0x3b>
     918:	8e ef       	ldi	r24, 0xFE	; 254
     91a:	0f c0       	rjmp	.+30     	; 0x93a <__stack+0x3b>
     91c:	8d ef       	ldi	r24, 0xFD	; 253
     91e:	0d c0       	rjmp	.+26     	; 0x93a <__stack+0x3b>
     920:	89 2f       	mov	r24, r25
     922:	0b c0       	rjmp	.+22     	; 0x93a <__stack+0x3b>
     924:	8c ef       	ldi	r24, 0xFC	; 252
     926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0x3b>
     928:	89 ef       	ldi	r24, 0xF9	; 249
     92a:	07 c0       	rjmp	.+14     	; 0x93a <__stack+0x3b>
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0x3b>
     930:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     934:	81 11       	cpse	r24, r1
     936:	fa cf       	rjmp	.-12     	; 0x92c <__stack+0x2d>
     938:	8b ef       	ldi	r24, 0xFB	; 251
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	08 95       	ret

00000944 <determine_dirns_ghost_can_move_in>:
     944:	cf 92       	push	r12
     946:	df 92       	push	r13
     948:	ef 92       	push	r14
     94a:	ff 92       	push	r15
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	08 2f       	mov	r16, r24
     956:	f6 2e       	mov	r15, r22
     958:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
     95c:	e8 2e       	mov	r14, r24
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	d0 e0       	ldi	r29, 0x00	; 0
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	cc 24       	eor	r12, r12
     966:	c3 94       	inc	r12
     968:	d1 2c       	mov	r13, r1
     96a:	4c 2f       	mov	r20, r28
     96c:	6f 2d       	mov	r22, r15
     96e:	80 2f       	mov	r24, r16
     970:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     974:	8e 3f       	cpi	r24, 0xFE	; 254
     976:	4c f4       	brge	.+18     	; 0x98a <determine_dirns_ghost_can_move_in+0x46>
     978:	c6 01       	movw	r24, r12
     97a:	0c 2e       	mov	r0, r28
     97c:	02 c0       	rjmp	.+4      	; 0x982 <determine_dirns_ghost_can_move_in+0x3e>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <determine_dirns_ghost_can_move_in+0x3a>
     986:	18 2b       	or	r17, r24
     988:	0c c0       	rjmp	.+24     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     98a:	ee 20       	and	r14, r14
     98c:	51 f0       	breq	.+20     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     98e:	8f 3f       	cpi	r24, 0xFF	; 255
     990:	41 f4       	brne	.+16     	; 0x9a2 <determine_dirns_ghost_can_move_in+0x5e>
     992:	c6 01       	movw	r24, r12
     994:	0c 2e       	mov	r0, r28
     996:	02 c0       	rjmp	.+4      	; 0x99c <determine_dirns_ghost_can_move_in+0x58>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <determine_dirns_ghost_can_move_in+0x54>
     9a0:	18 2b       	or	r17, r24
     9a2:	21 96       	adiw	r28, 0x01	; 1
     9a4:	c4 30       	cpi	r28, 0x04	; 4
     9a6:	d1 05       	cpc	r29, r1
     9a8:	01 f7       	brne	.-64     	; 0x96a <determine_dirns_ghost_can_move_in+0x26>
     9aa:	81 2f       	mov	r24, r17
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	08 95       	ret

000009be <draw_pacman_at>:
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	6f 5f       	subi	r22, 0xFF	; 255
     9c2:	7f 4f       	sbci	r23, 0xFF	; 255
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
     9cc:	81 e2       	ldi	r24, 0x21	; 33
     9ce:	0e 94 d7 12 	call	0x25ae	; 0x25ae <set_display_attribute>
     9d2:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <pacman_direction>
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	ea 56       	subi	r30, 0x6A	; 106
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	8f 93       	push	r24
     9e4:	80 81       	ld	r24, Z
     9e6:	8f 93       	push	r24
     9e8:	83 e1       	ldi	r24, 0x13	; 19
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     9f4:	0e 94 c5 12 	call	0x258a	; 0x258a <normal_display_mode>
     9f8:	0f 90       	pop	r0
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	08 95       	ret

00000a02 <draw_ghost_at>:
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	18 2f       	mov	r17, r24
     a0c:	06 2f       	mov	r16, r22
     a0e:	c4 2f       	mov	r28, r20
     a10:	d0 e0       	ldi	r29, 0x00	; 0
     a12:	86 2f       	mov	r24, r22
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	be 01       	movw	r22, r28
     a18:	6f 5f       	subi	r22, 0xFF	; 255
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
     a22:	e1 2f       	mov	r30, r17
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e2 56       	subi	r30, 0x62	; 98
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <set_display_attribute>
     a30:	fe 01       	movw	r30, r28
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e6 5a       	subi	r30, 0xA6	; 166
     a3c:	fd 4f       	sbci	r31, 0xFD	; 253
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	a2 81       	ldd	r26, Z+2	; 0x02
     a44:	b3 81       	ldd	r27, Z+3	; 0x03
     a46:	00 2e       	mov	r0, r16
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <draw_ghost_at+0x50>
     a4a:	b6 95       	lsr	r27
     a4c:	a7 95       	ror	r26
     a4e:	97 95       	ror	r25
     a50:	87 95       	ror	r24
     a52:	0a 94       	dec	r0
     a54:	d2 f7       	brpl	.-12     	; 0xa4a <draw_ghost_at+0x48>
     a56:	80 ff       	sbrs	r24, 0
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <draw_ghost_at+0x62>
     a5a:	8e e2       	ldi	r24, 0x2E	; 46
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     a62:	1c c0       	rjmp	.+56     	; 0xa9c <draw_ghost_at+0x9a>
     a64:	cc 0f       	add	r28, r28
     a66:	dd 1f       	adc	r29, r29
     a68:	cc 0f       	add	r28, r28
     a6a:	dd 1f       	adc	r29, r29
     a6c:	c2 52       	subi	r28, 0x22	; 34
     a6e:	de 4f       	sbci	r29, 0xFE	; 254
     a70:	88 81       	ld	r24, Y
     a72:	99 81       	ldd	r25, Y+1	; 0x01
     a74:	aa 81       	ldd	r26, Y+2	; 0x02
     a76:	bb 81       	ldd	r27, Y+3	; 0x03
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <draw_ghost_at+0x80>
     a7a:	b6 95       	lsr	r27
     a7c:	a7 95       	ror	r26
     a7e:	97 95       	ror	r25
     a80:	87 95       	ror	r24
     a82:	0a 95       	dec	r16
     a84:	d2 f7       	brpl	.-12     	; 0xa7a <draw_ghost_at+0x78>
     a86:	80 ff       	sbrs	r24, 0
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <draw_ghost_at+0x92>
     a8a:	80 e5       	ldi	r24, 0x50	; 80
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <draw_ghost_at+0x9a>
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     a9c:	0e 94 c5 12 	call	0x258a	; 0x258a <normal_display_mode>
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <erase_pixel_at>:
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	18 2f       	mov	r17, r24
     ab2:	c6 2f       	mov	r28, r22
     ab4:	d0 e0       	ldi	r29, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	be 01       	movw	r22, r28
     aba:	6f 5f       	subi	r22, 0xFF	; 255
     abc:	7f 4f       	sbci	r23, 0xFF	; 255
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
     ac4:	fe 01       	movw	r30, r28
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	e6 5a       	subi	r30, 0xA6	; 166
     ad0:	fd 4f       	sbci	r31, 0xFD	; 253
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	a2 81       	ldd	r26, Z+2	; 0x02
     ad8:	b3 81       	ldd	r27, Z+3	; 0x03
     ada:	01 2e       	mov	r0, r17
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <erase_pixel_at+0x3c>
     ade:	b6 95       	lsr	r27
     ae0:	a7 95       	ror	r26
     ae2:	97 95       	ror	r25
     ae4:	87 95       	ror	r24
     ae6:	0a 94       	dec	r0
     ae8:	d2 f7       	brpl	.-12     	; 0xade <erase_pixel_at+0x34>
     aea:	80 ff       	sbrs	r24, 0
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <erase_pixel_at+0x4e>
     aee:	8e e2       	ldi	r24, 0x2E	; 46
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     af6:	1c c0       	rjmp	.+56     	; 0xb30 <erase_pixel_at+0x86>
     af8:	cc 0f       	add	r28, r28
     afa:	dd 1f       	adc	r29, r29
     afc:	cc 0f       	add	r28, r28
     afe:	dd 1f       	adc	r29, r29
     b00:	c2 52       	subi	r28, 0x22	; 34
     b02:	de 4f       	sbci	r29, 0xFE	; 254
     b04:	88 81       	ld	r24, Y
     b06:	99 81       	ldd	r25, Y+1	; 0x01
     b08:	aa 81       	ldd	r26, Y+2	; 0x02
     b0a:	bb 81       	ldd	r27, Y+3	; 0x03
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <erase_pixel_at+0x6c>
     b0e:	b6 95       	lsr	r27
     b10:	a7 95       	ror	r26
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	1a 95       	dec	r17
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <erase_pixel_at+0x64>
     b1a:	80 ff       	sbrs	r24, 0
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <erase_pixel_at+0x7e>
     b1e:	80 e5       	ldi	r24, 0x50	; 80
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <erase_pixel_at+0x86>
     b28:	80 e2       	ldi	r24, 0x20	; 32
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <get_lives>:
     b38:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
     b3c:	08 95       	ret

00000b3e <reset_lives>:
		lives  = 0; 
	}
	
}
void reset_lives(void){
	lives = MAX_LIVES; 
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <lives>
     b44:	08 95       	ret

00000b46 <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     b46:	2f 92       	push	r2
     b48:	3f 92       	push	r3
     b4a:	4f 92       	push	r4
     b4c:	5f 92       	push	r5
     b4e:	6f 92       	push	r6
     b50:	7f 92       	push	r7
     b52:	8f 92       	push	r8
     b54:	9f 92       	push	r9
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	cf 92       	push	r12
     b5c:	df 92       	push	r13
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     b6a:	0e 94 ce 12 	call	0x259c	; 0x259c <clear_terminal>
	normal_display_mode();
     b6e:	0e 94 c5 12 	call	0x258a	; 0x258a <normal_display_mode>
	hide_cursor();
     b72:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
     b82:	0f 2e       	mov	r0, r31
     b84:	f5 e5       	ldi	r31, 0x55	; 85
     b86:	6f 2e       	mov	r6, r31
     b88:	f1 e0       	ldi	r31, 0x01	; 1
     b8a:	7f 2e       	mov	r7, r31
     b8c:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     b8e:	0f 2e       	mov	r0, r31
     b90:	fe e3       	ldi	r31, 0x3E	; 62
     b92:	2f 2e       	mov	r2, r31
     b94:	f1 e0       	ldi	r31, 0x01	; 1
     b96:	3f 2e       	mov	r3, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	0f 2e       	mov	r0, r31
     b9c:	f3 e1       	ldi	r31, 0x13	; 19
     b9e:	4f 2e       	mov	r4, r31
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	5f 2e       	mov	r5, r31
     ba4:	f0 2d       	mov	r31, r0
     ba6:	b6 c0       	rjmp	.+364    	; 0xd14 <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     ba8:	f6 01       	movw	r30, r12
     baa:	84 91       	lpm	r24, Z
			switch(wall_character) {
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	fc 01       	movw	r30, r24
     bb0:	b0 97       	sbiw	r30, 0x20	; 32
     bb2:	ed 35       	cpi	r30, 0x5D	; 93
     bb4:	f1 05       	cpc	r31, r1
     bb6:	08 f0       	brcs	.+2      	; 0xbba <initialise_game_level+0x74>
     bb8:	96 c0       	rjmp	.+300    	; 0xce6 <initialise_game_level+0x1a0>
     bba:	e2 5c       	subi	r30, 0xC2	; 194
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     bc2:	9f 92       	push	r9
     bc4:	8f 92       	push	r8
     bc6:	5f 92       	push	r5
     bc8:	4f 92       	push	r4
     bca:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	8b c0       	rjmp	.+278    	; 0xcee <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     bd8:	bf 92       	push	r11
     bda:	af 92       	push	r10
     bdc:	5f 92       	push	r5
     bde:	4f 92       	push	r4
     be0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	80 c0       	rjmp	.+256    	; 0xcee <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	5f 92       	push	r5
     bf4:	4f 92       	push	r4
     bf6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	75 c0       	rjmp	.+234    	; 0xcee <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c04:	1f 93       	push	r17
     c06:	0f 93       	push	r16
     c08:	5f 92       	push	r5
     c0a:	4f 92       	push	r4
     c0c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	6a c0       	rjmp	.+212    	; 0xcee <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c1a:	ff 92       	push	r15
     c1c:	ef 92       	push	r14
     c1e:	5f 92       	push	r5
     c20:	4f 92       	push	r4
     c22:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	5f c0       	rjmp	.+190    	; 0xcee <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     c30:	8a e2       	ldi	r24, 0x2A	; 42
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	5f 92       	push	r5
     c3a:	4f 92       	push	r4
     c3c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	52 c0       	rjmp	.+164    	; 0xcee <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     c4a:	8e e2       	ldi	r24, 0x2E	; 46
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	5f 92       	push	r5
     c54:	4f 92       	push	r4
     c56:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	45 c0       	rjmp	.+138    	; 0xcee <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     c64:	82 e3       	ldi	r24, 0x32	; 50
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	5f 92       	push	r5
     c6e:	4f 92       	push	r4
     c70:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	38 c0       	rjmp	.+112    	; 0xcee <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     c7e:	86 e3       	ldi	r24, 0x36	; 54
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	5f 92       	push	r5
     c88:	4f 92       	push	r4
     c8a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	2b c0       	rjmp	.+86     	; 0xcee <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     c98:	8a e3       	ldi	r24, 0x3A	; 58
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	5f 92       	push	r5
     ca2:	4f 92       	push	r4
     ca4:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	1e c0       	rjmp	.+60     	; 0xcee <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     cb2:	3f 92       	push	r3
     cb4:	2f 92       	push	r2
     cb6:	5f 92       	push	r5
     cb8:	4f 92       	push	r4
     cba:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     cc8:	80 e2       	ldi	r24, 0x20	; 32
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     cd0:	0e c0       	rjmp	.+28     	; 0xcee <initialise_game_level+0x1a8>
				case 'P':	printf("P"); break;	// power-pellet initially just implemented as a pac-dot
     cd2:	80 e5       	ldi	r24, 0x50	; 80
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     cda:	09 c0       	rjmp	.+18     	; 0xcee <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     cdc:	8e e2       	ldi	r24, 0x2E	; 46
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     ce6:	88 e7       	ldi	r24, 0x78	; 120
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	cf 1a       	sub	r12, r31
     cf2:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     cf4:	6c 14       	cp	r6, r12
     cf6:	7d 04       	cpc	r7, r13
     cf8:	09 f0       	breq	.+2      	; 0xcfc <initialise_game_level+0x1b6>
     cfa:	56 cf       	rjmp	.-340    	; 0xba8 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 af 14 	call	0x295e	; 0x295e <putchar>
     d04:	2f e1       	ldi	r18, 0x1F	; 31
     d06:	62 0e       	add	r6, r18
     d08:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d0a:	86 e1       	ldi	r24, 0x16	; 22
     d0c:	95 e0       	ldi	r25, 0x05	; 5
     d0e:	86 15       	cp	r24, r6
     d10:	97 05       	cpc	r25, r7
     d12:	d9 f0       	breq	.+54     	; 0xd4a <initialise_game_level+0x204>
     d14:	63 01       	movw	r12, r6
     d16:	9f e1       	ldi	r25, 0x1F	; 31
     d18:	c9 1a       	sub	r12, r25
     d1a:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     d1c:	0f 2e       	mov	r0, r31
     d1e:	f6 e2       	ldi	r31, 0x26	; 38
     d20:	ef 2e       	mov	r14, r31
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	ff 2e       	mov	r15, r31
     d26:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     d28:	02 e2       	ldi	r16, 0x22	; 34
     d2a:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     d2c:	ce e1       	ldi	r28, 0x1E	; 30
     d2e:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     d30:	0f 2e       	mov	r0, r31
     d32:	fa e1       	ldi	r31, 0x1A	; 26
     d34:	af 2e       	mov	r10, r31
     d36:	f1 e0       	ldi	r31, 0x01	; 1
     d38:	bf 2e       	mov	r11, r31
     d3a:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f6 e1       	ldi	r31, 0x16	; 22
     d40:	8f 2e       	mov	r8, r31
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	9f 2e       	mov	r9, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	2f cf       	rjmp	.-418    	; 0xba8 <initialise_game_level+0x62>
     d4a:	0a e5       	ldi	r16, 0x5A	; 90
     d4c:	12 e0       	ldi	r17, 0x02	; 2
     d4e:	6e ed       	ldi	r22, 0xDE	; 222
     d50:	71 e0       	ldi	r23, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' ) {
				pacdots[y] |= (1UL<<x);
				num_pacdots++;
			}else if (wall_character =='P'){
				pellets[y] |= (1UL<<x); 
     d5a:	c1 2c       	mov	r12, r1
     d5c:	d1 2c       	mov	r13, r1
     d5e:	76 01       	movw	r14, r12
     d60:	c3 94       	inc	r12
     d62:	d8 01       	movw	r26, r16

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     d64:	f8 01       	movw	r30, r16
     d66:	10 82       	st	Z, r1
     d68:	11 82       	std	Z+1, r1	; 0x01
     d6a:	12 82       	std	Z+2, r1	; 0x02
     d6c:	13 82       	std	Z+3, r1	; 0x03
     d6e:	eb 01       	movw	r28, r22
		pellets[y] = 0; 
     d70:	18 82       	st	Y, r1
     d72:	19 82       	std	Y+1, r1	; 0x01
     d74:	1a 82       	std	Y+2, r1	; 0x02
     d76:	1b 82       	std	Y+3, r1	; 0x03
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	ea 5c       	subi	r30, 0xCA	; 202
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	e4 91       	lpm	r30, Z
			if(wall_character == '.' ) {
     d88:	ee 32       	cpi	r30, 0x2E	; 46
     d8a:	d9 f4       	brne	.+54     	; 0xdc2 <initialise_game_level+0x27c>
				pacdots[y] |= (1UL<<x);
     d8c:	4d 90       	ld	r4, X+
     d8e:	5d 90       	ld	r5, X+
     d90:	6d 90       	ld	r6, X+
     d92:	7c 90       	ld	r7, X
     d94:	13 97       	sbiw	r26, 0x03	; 3
     d96:	46 01       	movw	r8, r12
     d98:	57 01       	movw	r10, r14
     d9a:	08 2e       	mov	r0, r24
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <initialise_game_level+0x260>
     d9e:	88 0c       	add	r8, r8
     da0:	99 1c       	adc	r9, r9
     da2:	aa 1c       	adc	r10, r10
     da4:	bb 1c       	adc	r11, r11
     da6:	0a 94       	dec	r0
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <initialise_game_level+0x258>
     daa:	84 28       	or	r8, r4
     dac:	95 28       	or	r9, r5
     dae:	a6 28       	or	r10, r6
     db0:	b7 28       	or	r11, r7
     db2:	8d 92       	st	X+, r8
     db4:	9d 92       	st	X+, r9
     db6:	ad 92       	st	X+, r10
     db8:	bc 92       	st	X, r11
     dba:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     dbc:	4f 5f       	subi	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	18 c0       	rjmp	.+48     	; 0xdf2 <initialise_game_level+0x2ac>
			}else if (wall_character =='P'){
     dc2:	e0 35       	cpi	r30, 0x50	; 80
     dc4:	b1 f4       	brne	.+44     	; 0xdf2 <initialise_game_level+0x2ac>
				pellets[y] |= (1UL<<x); 
     dc6:	48 80       	ld	r4, Y
     dc8:	59 80       	ldd	r5, Y+1	; 0x01
     dca:	6a 80       	ldd	r6, Y+2	; 0x02
     dcc:	7b 80       	ldd	r7, Y+3	; 0x03
     dce:	46 01       	movw	r8, r12
     dd0:	57 01       	movw	r10, r14
     dd2:	08 2e       	mov	r0, r24
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <initialise_game_level+0x298>
     dd6:	88 0c       	add	r8, r8
     dd8:	99 1c       	adc	r9, r9
     dda:	aa 1c       	adc	r10, r10
     ddc:	bb 1c       	adc	r11, r11
     dde:	0a 94       	dec	r0
     de0:	d2 f7       	brpl	.-12     	; 0xdd6 <initialise_game_level+0x290>
     de2:	84 28       	or	r8, r4
     de4:	95 28       	or	r9, r5
     de6:	a6 28       	or	r10, r6
     de8:	b7 28       	or	r11, r7
     dea:	88 82       	st	Y, r8
     dec:	99 82       	std	Y+1, r9	; 0x01
     dee:	aa 82       	std	Y+2, r10	; 0x02
     df0:	bb 82       	std	Y+3, r11	; 0x03
     df2:	01 96       	adiw	r24, 0x01	; 1
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		pellets[y] = 0; 
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     df4:	8f 31       	cpi	r24, 0x1F	; 31
     df6:	91 05       	cpc	r25, r1
     df8:	09 f0       	breq	.+2      	; 0xdfc <initialise_game_level+0x2b6>
     dfa:	c0 cf       	rjmp	.-128    	; 0xd7c <initialise_game_level+0x236>
     dfc:	21 5e       	subi	r18, 0xE1	; 225
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	0c 5f       	subi	r16, 0xFC	; 252
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	6c 5f       	subi	r22, 0xFC	; 252
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     e08:	21 3c       	cpi	r18, 0xC1	; 193
     e0a:	f3 e0       	ldi	r31, 0x03	; 3
     e0c:	3f 07       	cpc	r19, r31
     e0e:	09 f0       	breq	.+2      	; 0xe12 <initialise_game_level+0x2cc>
     e10:	a8 cf       	rjmp	.-176    	; 0xd62 <initialise_game_level+0x21c>
     e12:	50 93 dd 01 	sts	0x01DD, r21	; 0x8001dd <num_pacdots+0x1>
     e16:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     e1a:	8f e0       	ldi	r24, 0x0F	; 15
     e1c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     e20:	87 e1       	ldi	r24, 0x17	; 23
     e22:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     e2c:	67 e1       	ldi	r22, 0x17	; 23
     e2e:	8f e0       	ldi	r24, 0x0F	; 15
     e30:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
     e34:	0f 2e       	mov	r0, r31
     e36:	f1 ed       	ldi	r31, 0xD1	; 209
     e38:	af 2e       	mov	r10, r31
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	bf 2e       	mov	r11, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	0f 2e       	mov	r0, r31
     e42:	fd ec       	ldi	r31, 0xCD	; 205
     e44:	cf 2e       	mov	r12, r31
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	df 2e       	mov	r13, r31
     e4a:	f0 2d       	mov	r31, r0
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f9 ec       	ldi	r31, 0xC9	; 201
     e50:	ef 2e       	mov	r14, r31
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	ff 2e       	mov	r15, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     e5a:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     e5c:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     e5e:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     e60:	f5 01       	movw	r30, r10
     e62:	d1 93       	st	Z+, r29
     e64:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     e66:	f6 01       	movw	r30, r12
     e68:	11 93       	st	Z+, r17
     e6a:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     e6c:	f7 01       	movw	r30, r14
     e6e:	01 93       	st	Z+, r16
     e70:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     e72:	41 2f       	mov	r20, r17
     e74:	6d 2f       	mov	r22, r29
     e76:	8c 2f       	mov	r24, r28
     e78:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
     e7c:	cf 5f       	subi	r28, 0xFF	; 255
     e7e:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     e80:	c4 30       	cpi	r28, 0x04	; 4
     e82:	71 f7       	brne	.-36     	; 0xe60 <initialise_game_level+0x31a>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	9f 90       	pop	r9
     e9a:	8f 90       	pop	r8
     e9c:	7f 90       	pop	r7
     e9e:	6f 90       	pop	r6
     ea0:	5f 90       	pop	r5
     ea2:	4f 90       	pop	r4
     ea4:	3f 90       	pop	r3
     ea6:	2f 90       	pop	r2
     ea8:	08 95       	ret

00000eaa <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     eaa:	0e 94 a3 05 	call	0xb46	; 0xb46 <initialise_game_level>
	game_running = 1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <game_running>
     eb4:	08 95       	ret

00000eb6 <move_pacman>:
}

int8_t move_pacman(void) {
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
	if(!game_running) {
     ec6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <game_running>
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <move_pacman+0x1a>
     ece:	87 c2       	rjmp	.+1294   	; 0x13de <move_pacman+0x528>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     ed0:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
     ed4:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
     ed8:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <pacman_direction>
     edc:	61 2f       	mov	r22, r17
     ede:	8d 2f       	mov	r24, r29
     ee0:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
     ee4:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL)  {
     ee6:	8e 3f       	cpi	r24, 0xFE	; 254
     ee8:	09 f4       	brne	.+2      	; 0xeec <move_pacman+0x36>
     eea:	7b c2       	rjmp	.+1270   	; 0x13e2 <move_pacman+0x52c>
		
		
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     eec:	61 2f       	mov	r22, r17
     eee:	8d 2f       	mov	r24, r29
     ef0:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	// Update the pac-man location
	
	 if (pacman_direction == DIRN_LEFT) {
     ef4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <pacman_direction>
     ef8:	81 11       	cpse	r24, r1
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <move_pacman+0x64>
		 pacman_x--;
     efc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f00:	81 50       	subi	r24, 0x01	; 1
     f02:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>

		 if (pacman_x == 0 && pacman_y == 15 ) {
     f06:	81 11       	cpse	r24, r1
     f08:	25 c0       	rjmp	.+74     	; 0xf54 <move_pacman+0x9e>
     f0a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f0e:	8f 30       	cpi	r24, 0x0F	; 15
     f10:	09 f5       	brne	.+66     	; 0xf54 <move_pacman+0x9e>
			 pacman_x = 30 ;
     f12:	8e e1       	ldi	r24, 0x1E	; 30
     f14:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
     f18:	1d c0       	rjmp	.+58     	; 0xf54 <move_pacman+0x9e>
		 }
		 
		 } else if (pacman_direction == DIRN_RIGHT) {
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	71 f4       	brne	.+28     	; 0xf3a <move_pacman+0x84>
		 pacman_x++;
     f1e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <pacman_x>
		 if (pacman_x == 30 && pacman_y == 15 ) {
     f28:	8e 31       	cpi	r24, 0x1E	; 30
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <move_pacman+0x9e>
     f2c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f30:	8f 30       	cpi	r24, 0x0F	; 15
     f32:	81 f4       	brne	.+32     	; 0xf54 <move_pacman+0x9e>
			 pacman_x = 0 ;
     f34:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <pacman_x>
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <move_pacman+0x9e>
		 }
	 }
		else if(pacman_direction == DIRN_UP) {
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	31 f4       	brne	.+12     	; 0xf4a <move_pacman+0x94>
		 pacman_y--;
     f3e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f42:	81 50       	subi	r24, 0x01	; 1
     f44:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <move_pacman+0x9e>
		 } else {
		 pacman_y++;
     f4a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
     f4e:	8f 5f       	subi	r24, 0xFF	; 255
     f50:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <pacman_y>
	 }

	if(cell_contents >= 0 && powerup == 0) {
     f54:	cc 23       	and	r28, r28
     f56:	0c f4       	brge	.+2      	; 0xf5a <move_pacman+0xa4>
     f58:	ef c0       	rjmp	.+478    	; 0x1138 <move_pacman+0x282>
     f5a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <powerup>
     f5e:	81 11       	cpse	r24, r1
     f60:	3a c0       	rjmp	.+116    	; 0xfd6 <move_pacman+0x120>
		
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     f62:	0c 2f       	mov	r16, r28
     f64:	0c 2e       	mov	r0, r28
     f66:	00 0c       	add	r0, r0
     f68:	11 0b       	sbc	r17, r17
     f6a:	f8 01       	movw	r30, r16
     f6c:	e2 56       	subi	r30, 0x62	; 98
     f6e:	fe 4f       	sbci	r31, 0xFE	; 254
     f70:	80 81       	ld	r24, Z
     f72:	0e 94 d7 12 	call	0x25ae	; 0x25ae <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     f76:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
     f7a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
     f7e:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		lives--; 
     f82:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
     f86:	81 50       	subi	r24, 0x01	; 1
     f88:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <lives>
		move_cursor(37, 5 );
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	85 e2       	ldi	r24, 0x25	; 37
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf(("Lives: %5d"), get_lives());
     f98:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
     f9c:	1f 92       	push	r1
     f9e:	8f 93       	push	r24
     fa0:	82 e4       	ldi	r24, 0x42	; 66
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	9f 93       	push	r25
     fa6:	8f 93       	push	r24
     fa8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
		//Reset Ghost back to home.
		ghost_x[cell_contents] = GHOST_HOME_X_LEFT ;
     fac:	f8 01       	movw	r30, r16
     fae:	ef 52       	subi	r30, 0x2F	; 47
     fb0:	fe 4f       	sbci	r31, 0xFE	; 254
     fb2:	8c e0       	ldi	r24, 0x0C	; 12
     fb4:	80 83       	st	Z, r24
		ghost_y[cell_contents] = GHOST_HOME_Y ;
     fb6:	f8 01       	movw	r30, r16
     fb8:	e3 53       	subi	r30, 0x33	; 51
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	8f e0       	ldi	r24, 0x0F	; 15
     fbe:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
     fc0:	4f e0       	ldi	r20, 0x0F	; 15
     fc2:	6c e0       	ldi	r22, 0x0C	; 12
     fc4:	8c 2f       	mov	r24, r28
     fc6:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
		printf(("Lives: %5d"), get_lives());
		//Reset Ghost back to home.
		ghost_x[cell_contents] = GHOST_HOME_X_LEFT ;
		ghost_y[cell_contents] = GHOST_HOME_Y ;
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
     fd4:	07 c2       	rjmp	.+1038   	; 0x13e4 <move_pacman+0x52e>
		
		
	} else if(cell_contents >= 0 && powerup == 1){
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	09 f0       	breq	.+2      	; 0xfdc <move_pacman+0x126>
     fda:	ae c0       	rjmp	.+348    	; 0x1138 <move_pacman+0x282>
		//Reset Ghost back to home.
		ghost_x[cell_contents] = GHOST_HOME_X_LEFT ;
     fdc:	8c 2f       	mov	r24, r28
     fde:	0c 2e       	mov	r0, r28
     fe0:	00 0c       	add	r0, r0
     fe2:	99 0b       	sbc	r25, r25
     fe4:	fc 01       	movw	r30, r24
     fe6:	ef 52       	subi	r30, 0x2F	; 47
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	2c e0       	ldi	r18, 0x0C	; 12
     fec:	20 83       	st	Z, r18
		ghost_y[cell_contents] = GHOST_HOME_Y ;
     fee:	fc 01       	movw	r30, r24
     ff0:	e3 53       	subi	r30, 0x33	; 51
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	2f e0       	ldi	r18, 0x0F	; 15
     ff6:	20 83       	st	Z, r18
		//Draw ghost back home.
		draw_ghost_at(cell_contents, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
     ff8:	4f e0       	ldi	r20, 0x0F	; 15
     ffa:	6c e0       	ldi	r22, 0x0C	; 12
     ffc:	8c 2f       	mov	r24, r28
     ffe:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
		if(ghost_eat==1){
    1002:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    1006:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	71 f4       	brne	.+28     	; 0x102c <move_pacman+0x176>
			add_to_score(200);
    1010:	88 ec       	ldi	r24, 0xC8	; 200
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++ ; 
    1018:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    101c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    1026:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    102a:	28 c0       	rjmp	.+80     	; 0x107c <move_pacman+0x1c6>
		}else if(ghost_eat==2){
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	91 05       	cpc	r25, r1
    1030:	71 f4       	brne	.+28     	; 0x104e <move_pacman+0x198>
			add_to_score(400); 
    1032:	80 e9       	ldi	r24, 0x90	; 144
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++; 
    103a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    103e:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    1048:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    104c:	17 c0       	rjmp	.+46     	; 0x107c <move_pacman+0x1c6>
		}else if(ghost_eat==3){
    104e:	83 30       	cpi	r24, 0x03	; 3
    1050:	91 05       	cpc	r25, r1
    1052:	71 f4       	brne	.+28     	; 0x1070 <move_pacman+0x1ba>
			add_to_score(800);
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++; 
    105c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    1060:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    106a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    106e:	06 c0       	rjmp	.+12     	; 0x107c <move_pacman+0x1c6>
		}else if(ghost_eat==4){
    1070:	04 97       	sbiw	r24, 0x04	; 4
    1072:	21 f4       	brne	.+8      	; 0x107c <move_pacman+0x1c6>
			add_to_score(1600);
    1074:	80 e4       	ldi	r24, 0x40	; 64
    1076:	96 e0       	ldi	r25, 0x06	; 6
    1078:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
		} 
		move_cursor (37, 8);
    107c:	68 e0       	ldi	r22, 0x08	; 8
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	85 e2       	ldi	r24, 0x25	; 37
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%13s", "Score: \n");
    1088:	8d e4       	ldi	r24, 0x4D	; 77
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	86 e5       	ldi	r24, 0x56	; 86
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
		move_cursor(37,9);
    109c:	69 e0       	ldi	r22, 0x09	; 9
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	85 e2       	ldi	r24, 0x25	; 37
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%11lu\n", get_score());
    10a8:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    10ac:	9f 93       	push	r25
    10ae:	8f 93       	push	r24
    10b0:	7f 93       	push	r23
    10b2:	6f 93       	push	r22
    10b4:	8b e5       	ldi	r24, 0x5B	; 91
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	9f 93       	push	r25
    10ba:	8f 93       	push	r24
    10bc:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>

		if (get_score() > get_highscore()) {
    10c0:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    10c4:	6b 01       	movw	r12, r22
    10c6:	7c 01       	movw	r14, r24
    10c8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    10cc:	2d b7       	in	r18, 0x3d	; 61
    10ce:	3e b7       	in	r19, 0x3e	; 62
    10d0:	26 5f       	subi	r18, 0xF6	; 246
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	3e bf       	out	0x3e, r19	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	2d bf       	out	0x3d, r18	; 61
    10de:	6c 15       	cp	r22, r12
    10e0:	7d 05       	cpc	r23, r13
    10e2:	8e 05       	cpc	r24, r14
    10e4:	9f 05       	cpc	r25, r15
    10e6:	20 f4       	brcc	.+8      	; 0x10f0 <move_pacman+0x23a>
			set_highscore(get_score()) ;
    10e8:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    10ec:	0e 94 55 10 	call	0x20aa	; 0x20aa <set_highscore>
		}
		
		move_cursor(37, 10) ;
    10f0:	6a e0       	ldi	r22, 0x0A	; 10
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	85 e2       	ldi	r24, 0x25	; 37
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%s", "High Score:\n");
    10fc:	82 e6       	ldi	r24, 0x62	; 98
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	0e 94 b6 14 	call	0x296c	; 0x296c <puts>
		
		move_cursor(37,11);
    1104:	6b e0       	ldi	r22, 0x0B	; 11
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	85 e2       	ldi	r24, 0x25	; 37
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%11lu\n", get_highscore() );
    1110:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	7f 93       	push	r23
    111a:	6f 93       	push	r22
    111c:	8b e5       	ldi	r24, 0x5B	; 91
    111e:	91 e0       	ldi	r25, 0x01	; 1
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
    1134:	81 e0       	ldi	r24, 0x01	; 1
		
		move_cursor(37, 10) ;
		printf("%s", "High Score:\n");
		
		move_cursor(37,11);
		printf("%11lu\n", get_highscore() );
    1136:	56 c1       	rjmp	.+684    	; 0x13e4 <move_pacman+0x52e>
	}
	else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
    1138:	cc 3f       	cpi	r28, 0xFC	; 252
    113a:	09 f0       	breq	.+2      	; 0x113e <move_pacman+0x288>
    113c:	b4 c0       	rjmp	.+360    	; 0x12a6 <move_pacman+0x3f0>
// count of remaining pac-dots.
// See initialise_pacdots() below for information on how the pacdots array
// is initialised.
static void eat_pacdot(void) {
	uint32_t maskval = 1UL << pacman_x; 
	pacdots[pacman_y] &= ~(maskval); 
    113e:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pacman_y>
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	e6 5a       	subi	r30, 0xA6	; 166
    114e:	fd 4f       	sbci	r31, 0xFD	; 253
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a0 e0       	ldi	r26, 0x00	; 0
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	00 90 d7 01 	lds	r0, 0x01D7	; 0x8001d7 <pacman_x>
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <move_pacman+0x2b0>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	aa 1f       	adc	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	0a 94       	dec	r0
    1168:	d2 f7       	brpl	.-12     	; 0x115e <move_pacman+0x2a8>
    116a:	80 95       	com	r24
    116c:	90 95       	com	r25
    116e:	a0 95       	com	r26
    1170:	b0 95       	com	r27
    1172:	40 81       	ld	r20, Z
    1174:	51 81       	ldd	r21, Z+1	; 0x01
    1176:	62 81       	ldd	r22, Z+2	; 0x02
    1178:	73 81       	ldd	r23, Z+3	; 0x03
    117a:	84 23       	and	r24, r20
    117c:	95 23       	and	r25, r21
    117e:	a6 23       	and	r26, r22
    1180:	b7 23       	and	r27, r23
    1182:	80 83       	st	Z, r24
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	a2 83       	std	Z+2, r26	; 0x02
    1188:	b3 83       	std	Z+3, r27	; 0x03
	num_pacdots--;
    118a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <num_pacdots>
    118e:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <num_pacdots+0x1>
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <num_pacdots+0x1>
    1198:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <num_pacdots>
	add_to_score(10);
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
	
	move_cursor (37, 8); 
    11a4:	68 e0       	ldi	r22, 0x08	; 8
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	85 e2       	ldi	r24, 0x25	; 37
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%13s", "Score: \n"); 
    11b0:	8d e4       	ldi	r24, 0x4D	; 77
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	9f 93       	push	r25
    11b6:	8f 93       	push	r24
    11b8:	86 e5       	ldi	r24, 0x56	; 86
    11ba:	91 e0       	ldi	r25, 0x01	; 1
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	move_cursor(37,9); 
    11c4:	69 e0       	ldi	r22, 0x09	; 9
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	85 e2       	ldi	r24, 0x25	; 37
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%11lu\n", get_score());
    11d0:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    11d4:	9f 93       	push	r25
    11d6:	8f 93       	push	r24
    11d8:	7f 93       	push	r23
    11da:	6f 93       	push	r22
    11dc:	8b e5       	ldi	r24, 0x5B	; 91
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	9f 93       	push	r25
    11e2:	8f 93       	push	r24
    11e4:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>

	if (get_score() > get_highscore()) {
    11e8:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    11ec:	6b 01       	movw	r12, r22
    11ee:	7c 01       	movw	r14, r24
    11f0:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    11f4:	2d b7       	in	r18, 0x3d	; 61
    11f6:	3e b7       	in	r19, 0x3e	; 62
    11f8:	26 5f       	subi	r18, 0xF6	; 246
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	3e bf       	out	0x3e, r19	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	2d bf       	out	0x3d, r18	; 61
    1206:	6c 15       	cp	r22, r12
    1208:	7d 05       	cpc	r23, r13
    120a:	8e 05       	cpc	r24, r14
    120c:	9f 05       	cpc	r25, r15
    120e:	20 f4       	brcc	.+8      	; 0x1218 <move_pacman+0x362>
		set_highscore(get_score()) ; 
    1210:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    1214:	0e 94 55 10 	call	0x20aa	; 0x20aa <set_highscore>
	}
	
	move_cursor(37, 10) ;
    1218:	6a e0       	ldi	r22, 0x0A	; 10
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	85 e2       	ldi	r24, 0x25	; 37
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%s", "High Score:\n");
    1224:	82 e6       	ldi	r24, 0x62	; 98
    1226:	91 e0       	ldi	r25, 0x01	; 1
    1228:	0e 94 b6 14 	call	0x296c	; 0x296c <puts>
	
	move_cursor(37,11); 
    122c:	6b e0       	ldi	r22, 0x0B	; 11
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	85 e2       	ldi	r24, 0x25	; 37
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%11lu\n", get_highscore() );
    1238:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    123c:	9f 93       	push	r25
    123e:	8f 93       	push	r24
    1240:	7f 93       	push	r23
    1242:	6f 93       	push	r22
    1244:	8b e5       	ldi	r24, 0x5B	; 91
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	
	move_cursor(37, 13);
    1250:	6d e0       	ldi	r22, 0x0D	; 13
    1252:	70 e0       	ldi	r23, 0x00	; 0
    1254:	85 e2       	ldi	r24, 0x25	; 37
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf(("Pacdots Remaining: %11d"), num_pacdots);
    125c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <num_pacdots+0x1>
    1260:	8f 93       	push	r24
    1262:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <num_pacdots>
    1266:	8f 93       	push	r24
    1268:	8e e6       	ldi	r24, 0x6E	; 110
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	9f 93       	push	r25
    126e:	8f 93       	push	r24
    1270:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	
	move_cursor(37, 5 );
    1274:	65 e0       	ldi	r22, 0x05	; 5
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	85 e2       	ldi	r24, 0x25	; 37
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf(("Lives: %5d"), get_lives());
    1280:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
    1284:	1f 92       	push	r1
    1286:	8f 93       	push	r24
    1288:	82 e4       	ldi	r24, 0x42	; 66
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	9f 93       	push	r25
    128e:	8f 93       	push	r24
    1290:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
    1294:	8d b7       	in	r24, 0x3d	; 61
    1296:	9e b7       	in	r25, 0x3e	; 62
    1298:	0e 96       	adiw	r24, 0x0e	; 14
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	9e bf       	out	0x3e, r25	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	8d bf       	out	0x3d, r24	; 61
    12a4:	94 c0       	rjmp	.+296    	; 0x13ce <move_pacman+0x518>
		printf("%11lu\n", get_highscore() );
	}
	else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
    12a6:	c9 3f       	cpi	r28, 0xF9	; 249
    12a8:	09 f0       	breq	.+2      	; 0x12ac <move_pacman+0x3f6>
    12aa:	91 c0       	rjmp	.+290    	; 0x13ce <move_pacman+0x518>
	printf(("Lives: %5d"), get_lives());
	
}
static void eat_pellet(void){
	uint32_t maskval = 1UL << pacman_x;
	pellets[pacman_y] &= ~(maskval);
    12ac:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <pacman_y>
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	e2 52       	subi	r30, 0x22	; 34
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a0 e0       	ldi	r26, 0x00	; 0
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	00 90 d7 01 	lds	r0, 0x01D7	; 0x8001d7 <pacman_x>
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <move_pacman+0x41e>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	aa 1f       	adc	r26, r26
    12d2:	bb 1f       	adc	r27, r27
    12d4:	0a 94       	dec	r0
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <move_pacman+0x416>
    12d8:	80 95       	com	r24
    12da:	90 95       	com	r25
    12dc:	a0 95       	com	r26
    12de:	b0 95       	com	r27
    12e0:	40 81       	ld	r20, Z
    12e2:	51 81       	ldd	r21, Z+1	; 0x01
    12e4:	62 81       	ldd	r22, Z+2	; 0x02
    12e6:	73 81       	ldd	r23, Z+3	; 0x03
    12e8:	84 23       	and	r24, r20
    12ea:	95 23       	and	r25, r21
    12ec:	a6 23       	and	r26, r22
    12ee:	b7 23       	and	r27, r23
    12f0:	80 83       	st	Z, r24
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	a2 83       	std	Z+2, r26	; 0x02
    12f6:	b3 83       	std	Z+3, r27	; 0x03
	add_to_score(50);
    12f8:	82 e3       	ldi	r24, 0x32	; 50
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
	move_cursor (37, 8);
    1300:	68 e0       	ldi	r22, 0x08	; 8
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	85 e2       	ldi	r24, 0x25	; 37
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%13s", "Score: \n");
    130c:	8d e4       	ldi	r24, 0x4D	; 77
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9f 93       	push	r25
    1312:	8f 93       	push	r24
    1314:	86 e5       	ldi	r24, 0x56	; 86
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	9f 93       	push	r25
    131a:	8f 93       	push	r24
    131c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	move_cursor(37,9);
    1320:	69 e0       	ldi	r22, 0x09	; 9
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	85 e2       	ldi	r24, 0x25	; 37
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%11lu\n", get_score());
    132c:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    1330:	9f 93       	push	r25
    1332:	8f 93       	push	r24
    1334:	7f 93       	push	r23
    1336:	6f 93       	push	r22
    1338:	8b e5       	ldi	r24, 0x5B	; 91
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	9f 93       	push	r25
    133e:	8f 93       	push	r24
    1340:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	if (get_score() > get_highscore()) {
    1344:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    1348:	6b 01       	movw	r12, r22
    134a:	7c 01       	movw	r14, r24
    134c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    1350:	2d b7       	in	r18, 0x3d	; 61
    1352:	3e b7       	in	r19, 0x3e	; 62
    1354:	26 5f       	subi	r18, 0xF6	; 246
    1356:	3f 4f       	sbci	r19, 0xFF	; 255
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	3e bf       	out	0x3e, r19	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	2d bf       	out	0x3d, r18	; 61
    1362:	6c 15       	cp	r22, r12
    1364:	7d 05       	cpc	r23, r13
    1366:	8e 05       	cpc	r24, r14
    1368:	9f 05       	cpc	r25, r15
    136a:	20 f4       	brcc	.+8      	; 0x1374 <move_pacman+0x4be>
		set_highscore(get_score()) ;
    136c:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    1370:	0e 94 55 10 	call	0x20aa	; 0x20aa <set_highscore>
	}
	move_cursor(37, 10) ;
    1374:	6a e0       	ldi	r22, 0x0A	; 10
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	85 e2       	ldi	r24, 0x25	; 37
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%s", "High Score:\n");
    1380:	82 e6       	ldi	r24, 0x62	; 98
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 b6 14 	call	0x296c	; 0x296c <puts>
	move_cursor(37,11);
    1388:	6b e0       	ldi	r22, 0x0B	; 11
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	85 e2       	ldi	r24, 0x25	; 37
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
	printf("%11lu\n", get_highscore() );
    1394:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	7f 93       	push	r23
    139e:	6f 93       	push	r22
    13a0:	8b e5       	ldi	r24, 0x5B	; 91
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
	powerup = 1; 
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <powerup>
	ghost_eat =1; 
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    13ba:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
	powerup_time_start = get_current_time(); 
    13be:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		} else if (cell_contents == CELL_CONTAINS_PELLET) {
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
    13ce:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <pacman_y>
    13d2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    13d6:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
	}
	return 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	03 c0       	rjmp	.+6      	; 0x13e4 <move_pacman+0x52e>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <move_pacman+0x52e>
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL)  {
		
		
		return 0;	// We can't move - wall is straight ahead
    13e2:	80 e0       	ldi	r24, 0x00	; 0
			eat_pellet(); 
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	08 95       	ret

000013f6 <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
	if(!game_running) {
    13fc:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    1400:	99 23       	and	r25, r25
    1402:	a1 f0       	breq	.+40     	; 0x142c <change_pacman_direction+0x36>
    1404:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
    1406:	10 91 d6 01 	lds	r17, 0x01D6	; 0x8001d6 <pacman_y>
    140a:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <pacman_x>
    140e:	48 2f       	mov	r20, r24
    1410:	61 2f       	mov	r22, r17
    1412:	8d 2f       	mov	r24, r29
    1414:	0e 94 05 04 	call	0x80a	; 0x80a <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
    1418:	8e 3f       	cpi	r24, 0xFE	; 254
    141a:	51 f0       	breq	.+20     	; 0x1430 <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
    141c:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
    1420:	61 2f       	mov	r22, r17
    1422:	8d 2f       	mov	r24, r29
    1424:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		return 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
    1430:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	08 95       	ret

0000143a <move_ghost>:


void move_ghost(int8_t ghostnum) {
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
	if(!game_running) {
    144a:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    144e:	99 23       	and	r25, r25
    1450:	09 f4       	brne	.+2      	; 0x1454 <move_ghost+0x1a>
    1452:	c4 c2       	rjmp	.+1416   	; 0x19dc <move_ghost+0x5a2>
    1454:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	fc 01       	movw	r30, r24
    145a:	ef 52       	subi	r30, 0x2F	; 47
    145c:	fe 4f       	sbci	r31, 0xFE	; 254
    145e:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
    1460:	fc 01       	movw	r30, r24
    1462:	e3 53       	subi	r30, 0x33	; 51
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
    1468:	fc 01       	movw	r30, r24
    146a:	e7 53       	subi	r30, 0x37	; 55
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
    1470:	6f 2d       	mov	r22, r15
    1472:	81 2f       	mov	r24, r17
    1474:	0e 94 a2 04 	call	0x944	; 0x944 <determine_dirns_ghost_can_move_in>
    1478:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
    147a:	88 23       	and	r24, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <move_ghost+0x46>
    147e:	ae c2       	rjmp	.+1372   	; 0x19dc <move_ghost+0x5a2>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
    1480:	6f 2d       	mov	r22, r15
    1482:	81 2f       	mov	r24, r17
    1484:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <is_ghost_home>
    1488:	88 23       	and	r24, r24
    148a:	09 f4       	brne	.+2      	; 0x148e <move_ghost+0x54>
    148c:	39 c2       	rjmp	.+1138   	; 0x1900 <move_ghost+0x4c6>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
    148e:	01 ff       	sbrs	r16, 1
    1490:	37 c2       	rjmp	.+1134   	; 0x1900 <move_ghost+0x4c6>
    1492:	7c c2       	rjmp	.+1272   	; 0x198c <move_ghost+0x552>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
    1494:	00 91 d7 01 	lds	r16, 0x01D7	; 0x8001d7 <pacman_x>
    1498:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
    149a:	d0 91 d6 01 	lds	r29, 0x01D6	; 0x8001d6 <pacman_y>
    149e:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
    14a0:	6f 2d       	mov	r22, r15
    14a2:	81 2f       	mov	r24, r17
    14a4:	0e 94 a2 04 	call	0x944	; 0x944 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <move_ghost+0x74>
    14ac:	97 c2       	rjmp	.+1326   	; 0x19dc <move_ghost+0x5a2>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
    14ae:	40 2f       	mov	r20, r16
    14b0:	00 2e       	mov	r0, r16
    14b2:	00 0c       	add	r0, r0
    14b4:	55 0b       	sbc	r21, r21
    14b6:	55 23       	and	r21, r21
    14b8:	1c f4       	brge	.+6      	; 0x14c0 <move_ghost+0x86>
    14ba:	51 95       	neg	r21
    14bc:	41 95       	neg	r20
    14be:	51 09       	sbc	r21, r1
    14c0:	2d 2f       	mov	r18, r29
    14c2:	0d 2e       	mov	r0, r29
    14c4:	00 0c       	add	r0, r0
    14c6:	33 0b       	sbc	r19, r19
    14c8:	33 23       	and	r19, r19
    14ca:	1c f4       	brge	.+6      	; 0x14d2 <move_ghost+0x98>
    14cc:	31 95       	neg	r19
    14ce:	21 95       	neg	r18
    14d0:	31 09       	sbc	r19, r1
    14d2:	42 17       	cp	r20, r18
    14d4:	53 07       	cpc	r21, r19
    14d6:	4c f4       	brge	.+18     	; 0x14ea <move_ghost+0xb0>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
    14d8:	dd 23       	and	r29, r29
    14da:	1c f4       	brge	.+6      	; 0x14e2 <move_ghost+0xa8>
			if(dirn_options & (1 << DIRN_UP)) {
    14dc:	81 ff       	sbrs	r24, 1
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <move_ghost+0xb0>
    14e0:	55 c2       	rjmp	.+1194   	; 0x198c <move_ghost+0x552>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
    14e2:	1d 16       	cp	r1, r29
    14e4:	14 f4       	brge	.+4      	; 0x14ea <move_ghost+0xb0>
			if(dirn_options & (1 << DIRN_DOWN)) {
    14e6:	83 fd       	sbrc	r24, 3
    14e8:	65 c2       	rjmp	.+1226   	; 0x19b4 <move_ghost+0x57a>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
    14ea:	00 23       	and	r16, r16
    14ec:	54 f4       	brge	.+20     	; 0x1502 <move_ghost+0xc8>
		if(dirn_options & (1 << DIRN_LEFT)) {
    14ee:	80 fd       	sbrc	r24, 0
    14f0:	26 c2       	rjmp	.+1100   	; 0x193e <move_ghost+0x504>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
    14f2:	dd 23       	and	r29, r29
    14f4:	1c f4       	brge	.+6      	; 0x14fc <move_ghost+0xc2>
			if(dirn_options & (1 << DIRN_UP)) {
    14f6:	81 ff       	sbrs	r24, 1
    14f8:	1e c2       	rjmp	.+1084   	; 0x1936 <move_ghost+0x4fc>
    14fa:	48 c2       	rjmp	.+1168   	; 0x198c <move_ghost+0x552>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    14fc:	83 fd       	sbrc	r24, 3
    14fe:	5a c2       	rjmp	.+1204   	; 0x19b4 <move_ghost+0x57a>
    1500:	1a c2       	rjmp	.+1076   	; 0x1936 <move_ghost+0x4fc>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
    1502:	82 fd       	sbrc	r24, 2
    1504:	2f c2       	rjmp	.+1118   	; 0x1964 <move_ghost+0x52a>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
    1506:	dd 23       	and	r29, r29
    1508:	1c f4       	brge	.+6      	; 0x1510 <move_ghost+0xd6>
			if(dirn_options & (1 << DIRN_UP)) {
    150a:	81 ff       	sbrs	r24, 1
    150c:	08 c2       	rjmp	.+1040   	; 0x191e <move_ghost+0x4e4>
    150e:	3e c2       	rjmp	.+1148   	; 0x198c <move_ghost+0x552>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
    1510:	83 fd       	sbrc	r24, 3
    1512:	50 c2       	rjmp	.+1184   	; 0x19b4 <move_ghost+0x57a>
    1514:	04 c2       	rjmp	.+1032   	; 0x191e <move_ghost+0x4e4>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    151a:	ab 01       	movw	r20, r22
    151c:	08 2e       	mov	r0, r24
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <move_ghost+0xea>
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <move_ghost+0xe6>
    1528:	40 fd       	sbrc	r20, 0
    152a:	a0 c0       	rjmp	.+320    	; 0x166c <move_ghost+0x232>
    152c:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	91 05       	cpc	r25, r1
    1532:	99 f7       	brne	.-26     	; 0x151a <move_ghost+0xe0>
    1534:	53 c2       	rjmp	.+1190   	; 0x19dc <move_ghost+0x5a2>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
    1536:	00 2e       	mov	r0, r16
    1538:	00 0c       	add	r0, r0
    153a:	11 0b       	sbc	r17, r17
    153c:	4d 2f       	mov	r20, r29
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	c8 01       	movw	r24, r16
    1542:	0d 2e       	mov	r0, r29
    1544:	02 c0       	rjmp	.+4      	; 0x154a <move_ghost+0x110>
    1546:	95 95       	asr	r25
    1548:	87 95       	ror	r24
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <move_ghost+0x10c>
    154e:	80 fd       	sbrc	r24, 0
    1550:	94 c0       	rjmp	.+296    	; 0x167a <move_ghost+0x240>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
    1552:	dc 0f       	add	r29, r28
    1554:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
    1556:	2d 2f       	mov	r18, r29
    1558:	0d 2e       	mov	r0, r29
    155a:	00 0c       	add	r0, r0
    155c:	33 0b       	sbc	r19, r19
    155e:	c8 01       	movw	r24, r16
    1560:	0d 2e       	mov	r0, r29
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <move_ghost+0x12e>
    1564:	95 95       	asr	r25
    1566:	87 95       	ror	r24
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <move_ghost+0x12a>
    156c:	80 fd       	sbrc	r24, 0
    156e:	85 c0       	rjmp	.+266    	; 0x167a <move_ghost+0x240>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
    1570:	2e 5f       	subi	r18, 0xFE	; 254
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	23 70       	andi	r18, 0x03	; 3
    1576:	30 78       	andi	r19, 0x80	; 128
    1578:	33 23       	and	r19, r19
    157a:	34 f4       	brge	.+12     	; 0x1588 <move_ghost+0x14e>
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	31 09       	sbc	r19, r1
    1580:	2c 6f       	ori	r18, 0xFC	; 252
    1582:	3f 6f       	ori	r19, 0xFF	; 255
    1584:	2f 5f       	subi	r18, 0xFF	; 255
    1586:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <move_ghost+0x156>
    158c:	15 95       	asr	r17
    158e:	07 95       	ror	r16
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <move_ghost+0x152>
    1594:	00 fd       	sbrc	r16, 0
    1596:	6c c0       	rjmp	.+216    	; 0x1670 <move_ghost+0x236>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    1598:	9a 01       	movw	r18, r20
    159a:	2e 5f       	subi	r18, 0xFE	; 254
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	23 70       	andi	r18, 0x03	; 3
    15a0:	30 78       	andi	r19, 0x80	; 128
    15a2:	33 23       	and	r19, r19
    15a4:	34 f4       	brge	.+12     	; 0x15b2 <move_ghost+0x178>
    15a6:	21 50       	subi	r18, 0x01	; 1
    15a8:	31 09       	sbc	r19, r1
    15aa:	2c 6f       	ori	r18, 0xFC	; 252
    15ac:	3f 6f       	ori	r19, 0xFF	; 255
    15ae:	2f 5f       	subi	r18, 0xFF	; 255
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	d2 2f       	mov	r29, r18
    15b4:	62 c0       	rjmp	.+196    	; 0x167a <move_ghost+0x240>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    15b6:	00 2e       	mov	r0, r16
    15b8:	00 0c       	add	r0, r0
    15ba:	11 0b       	sbc	r17, r17
    15bc:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <pacman_direction>
    15c0:	c8 01       	movw	r24, r16
    15c2:	02 2e       	mov	r0, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <move_ghost+0x190>
    15c6:	95 95       	asr	r25
    15c8:	87 95       	ror	r24
    15ca:	0a 94       	dec	r0
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <move_ghost+0x18c>
    15ce:	80 ff       	sbrs	r24, 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <move_ghost+0x19c>
				// That direction is one of the valid options
				return pacman_direction;
    15d2:	d2 2f       	mov	r29, r18
    15d4:	52 c0       	rjmp	.+164    	; 0x167a <move_ghost+0x240>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    15d6:	0e 94 de 13 	call	0x27bc	; 0x27bc <random>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	83 70       	andi	r24, 0x03	; 3
    15e0:	99 27       	eor	r25, r25
    15e2:	aa 27       	eor	r26, r26
    15e4:	b0 78       	andi	r27, 0x80	; 128
    15e6:	bb 23       	and	r27, r27
    15e8:	54 f4       	brge	.+20     	; 0x15fe <move_ghost+0x1c4>
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	a1 09       	sbc	r26, r1
    15ee:	b1 09       	sbc	r27, r1
    15f0:	8c 6f       	ori	r24, 0xFC	; 252
    15f2:	9f 6f       	ori	r25, 0xFF	; 255
    15f4:	af 6f       	ori	r26, 0xFF	; 255
    15f6:	bf 6f       	ori	r27, 0xFF	; 255
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	a1 1d       	adc	r26, r1
    15fc:	b1 1d       	adc	r27, r1
    15fe:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1600:	68 2f       	mov	r22, r24
    1602:	88 0f       	add	r24, r24
    1604:	77 0b       	sbc	r23, r23
    1606:	9b 01       	movw	r18, r22
    1608:	23 70       	andi	r18, 0x03	; 3
    160a:	30 78       	andi	r19, 0x80	; 128
    160c:	33 23       	and	r19, r19
    160e:	34 f4       	brge	.+12     	; 0x161c <move_ghost+0x1e2>
    1610:	21 50       	subi	r18, 0x01	; 1
    1612:	31 09       	sbc	r19, r1
    1614:	2c 6f       	ori	r18, 0xFC	; 252
    1616:	3f 6f       	ori	r19, 0xFF	; 255
    1618:	2f 5f       	subi	r18, 0xFF	; 255
    161a:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    161c:	c8 01       	movw	r24, r16
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <move_ghost+0x1ec>
    1622:	95 95       	asr	r25
    1624:	87 95       	ror	r24
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <move_ghost+0x1e8>
    162a:	80 fd       	sbrc	r24, 0
    162c:	23 c0       	rjmp	.+70     	; 0x1674 <move_ghost+0x23a>
    162e:	6f 5f       	subi	r22, 0xFF	; 255
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	04 2e       	mov	r0, r20
    1634:	00 0c       	add	r0, r0
    1636:	55 0b       	sbc	r21, r21
    1638:	4c 5f       	subi	r20, 0xFC	; 252
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    163c:	cb 01       	movw	r24, r22
    163e:	83 70       	andi	r24, 0x03	; 3
    1640:	90 78       	andi	r25, 0x80	; 128
    1642:	99 23       	and	r25, r25
    1644:	24 f4       	brge	.+8      	; 0x164e <move_ghost+0x214>
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	8c 6f       	ori	r24, 0xFC	; 252
    164a:	9f 6f       	ori	r25, 0xFF	; 255
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    1650:	f8 01       	movw	r30, r16
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <move_ghost+0x21e>
    1654:	f5 95       	asr	r31
    1656:	e7 95       	ror	r30
    1658:	8a 95       	dec	r24
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <move_ghost+0x21a>
    165c:	e0 fd       	sbrc	r30, 0
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <move_ghost+0x23e>
    1660:	6f 5f       	subi	r22, 0xFF	; 255
    1662:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    1664:	64 17       	cp	r22, r20
    1666:	75 07       	cpc	r23, r21
    1668:	49 f7       	brne	.-46     	; 0x163c <move_ghost+0x202>
    166a:	b8 c1       	rjmp	.+880    	; 0x19dc <move_ghost+0x5a2>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    166c:	d8 2f       	mov	r29, r24
    166e:	05 c0       	rjmp	.+10     	; 0x167a <move_ghost+0x240>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    1670:	d2 2f       	mov	r29, r18
    1672:	03 c0       	rjmp	.+6      	; 0x167a <move_ghost+0x240>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1674:	d2 2f       	mov	r29, r18
    1676:	01 c0       	rjmp	.+2      	; 0x167a <move_ghost+0x240>
    1678:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    167a:	dd 23       	and	r29, r29
    167c:	0c f4       	brge	.+2      	; 0x1680 <move_ghost+0x246>
    167e:	ae c1       	rjmp	.+860    	; 0x19dc <move_ghost+0x5a2>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1680:	0c 2f       	mov	r16, r28
    1682:	0c 2e       	mov	r0, r28
    1684:	00 0c       	add	r0, r0
    1686:	11 0b       	sbc	r17, r17
    1688:	d8 01       	movw	r26, r16
    168a:	a3 53       	subi	r26, 0x33	; 51
    168c:	be 4f       	sbci	r27, 0xFE	; 254
    168e:	f8 01       	movw	r30, r16
    1690:	ef 52       	subi	r30, 0x2F	; 47
    1692:	fe 4f       	sbci	r31, 0xFE	; 254
    1694:	6c 91       	ld	r22, X
    1696:	80 81       	ld	r24, Z
    1698:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    169c:	f8 01       	movw	r30, r16
    169e:	e7 53       	subi	r30, 0x37	; 55
    16a0:	fe 4f       	sbci	r31, 0xFE	; 254
    16a2:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    16a4:	d1 30       	cpi	r29, 0x01	; 1
    16a6:	b9 f0       	breq	.+46     	; 0x16d6 <move_ghost+0x29c>
    16a8:	1c f4       	brge	.+6      	; 0x16b0 <move_ghost+0x276>
    16aa:	dd 23       	and	r29, r29
    16ac:	31 f0       	breq	.+12     	; 0x16ba <move_ghost+0x280>
    16ae:	20 c0       	rjmp	.+64     	; 0x16f0 <move_ghost+0x2b6>
    16b0:	d2 30       	cpi	r29, 0x02	; 2
    16b2:	51 f0       	breq	.+20     	; 0x16c8 <move_ghost+0x28e>
    16b4:	d3 30       	cpi	r29, 0x03	; 3
    16b6:	b1 f0       	breq	.+44     	; 0x16e4 <move_ghost+0x2aa>
    16b8:	1b c0       	rjmp	.+54     	; 0x16f0 <move_ghost+0x2b6>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    16ba:	f8 01       	movw	r30, r16
    16bc:	ef 52       	subi	r30, 0x2F	; 47
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	80 81       	ld	r24, Z
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	80 83       	st	Z, r24
			break;
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <move_ghost+0x2b6>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    16c8:	f8 01       	movw	r30, r16
    16ca:	ef 52       	subi	r30, 0x2F	; 47
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	80 83       	st	Z, r24
			break;
    16d4:	0d c0       	rjmp	.+26     	; 0x16f0 <move_ghost+0x2b6>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    16d6:	f8 01       	movw	r30, r16
    16d8:	e3 53       	subi	r30, 0x33	; 51
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	80 81       	ld	r24, Z
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	80 83       	st	Z, r24
			break;
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <move_ghost+0x2b6>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    16e4:	f8 01       	movw	r30, r16
    16e6:	e3 53       	subi	r30, 0x33	; 51
    16e8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]) && powerup == 0) {
    16f0:	f8 01       	movw	r30, r16
    16f2:	e3 53       	subi	r30, 0x33	; 51
    16f4:	fe 4f       	sbci	r31, 0xFE	; 254
    16f6:	40 81       	ld	r20, Z
    16f8:	f8 01       	movw	r30, r16
    16fa:	ef 52       	subi	r30, 0x2F	; 47
    16fc:	fe 4f       	sbci	r31, 0xFE	; 254
    16fe:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    1700:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <pacman_x>
    1704:	68 13       	cpse	r22, r24
    1706:	f6 c0       	rjmp	.+492    	; 0x18f4 <move_ghost+0x4ba>
    1708:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <pacman_y>
    170c:	48 13       	cpse	r20, r24
    170e:	f2 c0       	rjmp	.+484    	; 0x18f4 <move_ghost+0x4ba>
    1710:	0d c1       	rjmp	.+538    	; 0x192c <move_ghost+0x4f2>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]) && powerup == 0) {
		// Ghost has just moved into the pac-man. Lose 1 life.
		lives--;
    1712:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
    1716:	81 50       	subi	r24, 0x01	; 1
    1718:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <lives>
		move_cursor(37, 5 );
    171c:	65 e0       	ldi	r22, 0x05	; 5
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	85 e2       	ldi	r24, 0x25	; 37
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf(("Lives: %5d"), get_lives());
    1728:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <lives>
    172c:	1f 92       	push	r1
    172e:	8f 93       	push	r24
    1730:	82 e4       	ldi	r24, 0x42	; 66
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	9f 93       	push	r25
    1736:	8f 93       	push	r24
    1738:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
		
		// We draw the background colour for the
		//ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    173c:	f8 01       	movw	r30, r16
    173e:	e2 56       	subi	r30, 0x62	; 98
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	80 81       	ld	r24, Z
    1744:	0e 94 d7 12 	call	0x25ae	; 0x25ae <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1748:	98 01       	movw	r18, r16
    174a:	23 53       	subi	r18, 0x33	; 51
    174c:	3e 4f       	sbci	r19, 0xFE	; 254
    174e:	79 01       	movw	r14, r18
    1750:	0f 52       	subi	r16, 0x2F	; 47
    1752:	1e 4f       	sbci	r17, 0xFE	; 254
    1754:	f9 01       	movw	r30, r18
    1756:	60 81       	ld	r22, Z
    1758:	f8 01       	movw	r30, r16
    175a:	80 81       	ld	r24, Z
    175c:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		//Reset Ghost back to home. 
		ghost_x[ghostnum] = GHOST_HOME_X_LEFT ; 
    1760:	8c e0       	ldi	r24, 0x0C	; 12
    1762:	f8 01       	movw	r30, r16
    1764:	80 83       	st	Z, r24
		ghost_y[ghostnum] = GHOST_HOME_Y ; 
    1766:	8f e0       	ldi	r24, 0x0F	; 15
    1768:	f7 01       	movw	r30, r14
    176a:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(ghostnum, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
    176c:	4f e0       	ldi	r20, 0x0F	; 15
    176e:	6c e0       	ldi	r22, 0x0C	; 12
    1770:	8c 2f       	mov	r24, r28
    1772:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	bd c0       	rjmp	.+378    	; 0x18fa <move_ghost+0x4c0>
		
	} else if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]) && powerup == 1)
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	09 f0       	breq	.+2      	; 0x1786 <move_ghost+0x34c>
    1784:	b7 c0       	rjmp	.+366    	; 0x18f4 <move_ghost+0x4ba>
	{
		set_display_attribute(ghost_colours[ghostnum]);
    1786:	f8 01       	movw	r30, r16
    1788:	e2 56       	subi	r30, 0x62	; 98
    178a:	fe 4f       	sbci	r31, 0xFE	; 254
    178c:	80 81       	ld	r24, Z
    178e:	0e 94 d7 12 	call	0x25ae	; 0x25ae <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1792:	98 01       	movw	r18, r16
    1794:	23 53       	subi	r18, 0x33	; 51
    1796:	3e 4f       	sbci	r19, 0xFE	; 254
    1798:	79 01       	movw	r14, r18
    179a:	0f 52       	subi	r16, 0x2F	; 47
    179c:	1e 4f       	sbci	r17, 0xFE	; 254
    179e:	f9 01       	movw	r30, r18
    17a0:	60 81       	ld	r22, Z
    17a2:	f8 01       	movw	r30, r16
    17a4:	80 81       	ld	r24, Z
    17a6:	0e 94 df 04 	call	0x9be	; 0x9be <draw_pacman_at>
		//Reset Ghost back to home.
		ghost_x[ghostnum] = GHOST_HOME_X_LEFT ;
    17aa:	8c e0       	ldi	r24, 0x0C	; 12
    17ac:	f8 01       	movw	r30, r16
    17ae:	80 83       	st	Z, r24
		ghost_y[ghostnum] = GHOST_HOME_Y ;
    17b0:	8f e0       	ldi	r24, 0x0F	; 15
    17b2:	f7 01       	movw	r30, r14
    17b4:	80 83       	st	Z, r24
		//Draw ghost back home.
		draw_ghost_at(ghostnum, GHOST_HOME_X_LEFT, GHOST_HOME_Y);
    17b6:	4f e0       	ldi	r20, 0x0F	; 15
    17b8:	6c e0       	ldi	r22, 0x0C	; 12
    17ba:	8c 2f       	mov	r24, r28
    17bc:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
		
		if(ghost_eat==1){
    17c0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    17c4:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	71 f4       	brne	.+28     	; 0x17ea <move_ghost+0x3b0>
			add_to_score(200);
    17ce:	88 ec       	ldi	r24, 0xC8	; 200
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++ ;
    17d6:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    17da:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    17e4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    17e8:	28 c0       	rjmp	.+80     	; 0x183a <move_ghost+0x400>
			}else if(ghost_eat==2){
    17ea:	82 30       	cpi	r24, 0x02	; 2
    17ec:	91 05       	cpc	r25, r1
    17ee:	71 f4       	brne	.+28     	; 0x180c <move_ghost+0x3d2>
			add_to_score(400);
    17f0:	80 e9       	ldi	r24, 0x90	; 144
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++;
    17f8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    17fc:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    1800:	01 96       	adiw	r24, 0x01	; 1
    1802:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    1806:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    180a:	17 c0       	rjmp	.+46     	; 0x183a <move_ghost+0x400>
			}else if(ghost_eat==3){
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	71 f4       	brne	.+28     	; 0x182e <move_ghost+0x3f4>
			add_to_score(800);
    1812:	80 e2       	ldi	r24, 0x20	; 32
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			ghost_eat++;
    181a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ghost_eat>
    181e:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ghost_eat+0x1>
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <ghost_eat+0x1>
    1828:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ghost_eat>
    182c:	06 c0       	rjmp	.+12     	; 0x183a <move_ghost+0x400>
			}else if(ghost_eat==4){
    182e:	04 97       	sbiw	r24, 0x04	; 4
    1830:	21 f4       	brne	.+8      	; 0x183a <move_ghost+0x400>
			add_to_score(1600);
    1832:	80 e4       	ldi	r24, 0x40	; 64
    1834:	96 e0       	ldi	r25, 0x06	; 6
    1836:	0e 94 37 10 	call	0x206e	; 0x206e <add_to_score>
			
		}
		move_cursor (37, 8);
    183a:	68 e0       	ldi	r22, 0x08	; 8
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	85 e2       	ldi	r24, 0x25	; 37
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%13s", "Score: \n");
    1846:	8d e4       	ldi	r24, 0x4D	; 77
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	9f 93       	push	r25
    184c:	8f 93       	push	r24
    184e:	86 e5       	ldi	r24, 0x56	; 86
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	9f 93       	push	r25
    1854:	8f 93       	push	r24
    1856:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
		move_cursor(37,9);
    185a:	69 e0       	ldi	r22, 0x09	; 9
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	85 e2       	ldi	r24, 0x25	; 37
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%11lu\n", get_score());
    1866:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    186a:	9f 93       	push	r25
    186c:	8f 93       	push	r24
    186e:	7f 93       	push	r23
    1870:	6f 93       	push	r22
    1872:	8b e5       	ldi	r24, 0x5B	; 91
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	9f 93       	push	r25
    1878:	8f 93       	push	r24
    187a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>

		if (get_score() > get_highscore()) {
    187e:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    1882:	6b 01       	movw	r12, r22
    1884:	7c 01       	movw	r14, r24
    1886:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    188a:	2d b7       	in	r18, 0x3d	; 61
    188c:	3e b7       	in	r19, 0x3e	; 62
    188e:	26 5f       	subi	r18, 0xF6	; 246
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	3e bf       	out	0x3e, r19	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	2d bf       	out	0x3d, r18	; 61
    189c:	6c 15       	cp	r22, r12
    189e:	7d 05       	cpc	r23, r13
    18a0:	8e 05       	cpc	r24, r14
    18a2:	9f 05       	cpc	r25, r15
    18a4:	20 f4       	brcc	.+8      	; 0x18ae <move_ghost+0x474>
			set_highscore(get_score()) ;
    18a6:	0e 94 4c 10 	call	0x2098	; 0x2098 <get_score>
    18aa:	0e 94 55 10 	call	0x20aa	; 0x20aa <set_highscore>
		}
		
		move_cursor(37, 10) ;
    18ae:	6a e0       	ldi	r22, 0x0A	; 10
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	85 e2       	ldi	r24, 0x25	; 37
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%s", "High Score:\n");
    18ba:	82 e6       	ldi	r24, 0x62	; 98
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 b6 14 	call	0x296c	; 0x296c <puts>
		
		move_cursor(37,11);
    18c2:	6b e0       	ldi	r22, 0x0B	; 11
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	85 e2       	ldi	r24, 0x25	; 37
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
		printf("%11lu\n", get_highscore() );
    18ce:	0e 94 5e 10 	call	0x20bc	; 0x20bc <get_highscore>
    18d2:	9f 93       	push	r25
    18d4:	8f 93       	push	r24
    18d6:	7f 93       	push	r23
    18d8:	6f 93       	push	r22
    18da:	8b e5       	ldi	r24, 0x5B	; 91
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	9f 93       	push	r25
    18e0:	8f 93       	push	r24
    18e2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <move_ghost+0x4c0>
		
	}
	else {
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    18f4:	8c 2f       	mov	r24, r28
    18f6:	0e 94 01 05 	call	0xa02	; 0xa02 <draw_ghost_at>
		
	}
	normal_display_mode();
    18fa:	0e 94 c5 12 	call	0x258a	; 0x258a <normal_display_mode>
    18fe:	6e c0       	rjmp	.+220    	; 0x19dc <move_ghost+0x5a2>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    1900:	c1 30       	cpi	r28, 0x01	; 1
    1902:	09 f4       	brne	.+2      	; 0x1906 <move_ghost+0x4cc>
    1904:	18 ce       	rjmp	.-976    	; 0x1536 <move_ghost+0xfc>
    1906:	24 f4       	brge	.+8      	; 0x1910 <move_ghost+0x4d6>
    1908:	cc 23       	and	r28, r28
    190a:	09 f4       	brne	.+2      	; 0x190e <move_ghost+0x4d4>
    190c:	c3 cd       	rjmp	.-1146   	; 0x1494 <move_ghost+0x5a>
    190e:	66 c0       	rjmp	.+204    	; 0x19dc <move_ghost+0x5a2>
    1910:	c2 30       	cpi	r28, 0x02	; 2
    1912:	09 f4       	brne	.+2      	; 0x1916 <move_ghost+0x4dc>
    1914:	50 ce       	rjmp	.-864    	; 0x15b6 <move_ghost+0x17c>
    1916:	c3 30       	cpi	r28, 0x03	; 3
    1918:	09 f4       	brne	.+2      	; 0x191c <move_ghost+0x4e2>
    191a:	0d ce       	rjmp	.-998    	; 0x1536 <move_ghost+0xfc>
    191c:	5f c0       	rjmp	.+190    	; 0x19dc <move_ghost+0x5a2>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    191e:	68 2f       	mov	r22, r24
    1920:	08 2e       	mov	r0, r24
    1922:	00 0c       	add	r0, r0
    1924:	77 0b       	sbc	r23, r23
    1926:	80 ff       	sbrs	r24, 0
    1928:	f6 cd       	rjmp	.-1044   	; 0x1516 <move_ghost+0xdc>
    192a:	09 c0       	rjmp	.+18     	; 0x193e <move_ghost+0x504>
			ghost_y[ghostnum]++;
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]) && powerup == 0) {
    192c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <powerup>
    1930:	81 11       	cpse	r24, r1
    1932:	26 cf       	rjmp	.-436    	; 0x1780 <move_ghost+0x346>
    1934:	ee ce       	rjmp	.-548    	; 0x1712 <move_ghost+0x2d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    1936:	68 2f       	mov	r22, r24
    1938:	88 0f       	add	r24, r24
    193a:	77 0b       	sbc	r23, r23
    193c:	ec cd       	rjmp	.-1064   	; 0x1516 <move_ghost+0xdc>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    193e:	0c 2f       	mov	r16, r28
    1940:	0c 2e       	mov	r0, r28
    1942:	00 0c       	add	r0, r0
    1944:	11 0b       	sbc	r17, r17
    1946:	d8 01       	movw	r26, r16
    1948:	a3 53       	subi	r26, 0x33	; 51
    194a:	be 4f       	sbci	r27, 0xFE	; 254
    194c:	f8 01       	movw	r30, r16
    194e:	ef 52       	subi	r30, 0x2F	; 47
    1950:	fe 4f       	sbci	r31, 0xFE	; 254
    1952:	6c 91       	ld	r22, X
    1954:	80 81       	ld	r24, Z
    1956:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    195a:	f8 01       	movw	r30, r16
    195c:	e7 53       	subi	r30, 0x37	; 55
    195e:	fe 4f       	sbci	r31, 0xFE	; 254
    1960:	10 82       	st	Z, r1
    1962:	ab ce       	rjmp	.-682    	; 0x16ba <move_ghost+0x280>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1964:	0c 2f       	mov	r16, r28
    1966:	0c 2e       	mov	r0, r28
    1968:	00 0c       	add	r0, r0
    196a:	11 0b       	sbc	r17, r17
    196c:	d8 01       	movw	r26, r16
    196e:	a3 53       	subi	r26, 0x33	; 51
    1970:	be 4f       	sbci	r27, 0xFE	; 254
    1972:	f8 01       	movw	r30, r16
    1974:	ef 52       	subi	r30, 0x2F	; 47
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	6c 91       	ld	r22, X
    197a:	80 81       	ld	r24, Z
    197c:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1980:	f8 01       	movw	r30, r16
    1982:	e7 53       	subi	r30, 0x37	; 55
    1984:	fe 4f       	sbci	r31, 0xFE	; 254
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	80 83       	st	Z, r24
    198a:	9e ce       	rjmp	.-708    	; 0x16c8 <move_ghost+0x28e>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    198c:	0c 2f       	mov	r16, r28
    198e:	0c 2e       	mov	r0, r28
    1990:	00 0c       	add	r0, r0
    1992:	11 0b       	sbc	r17, r17
    1994:	d8 01       	movw	r26, r16
    1996:	a3 53       	subi	r26, 0x33	; 51
    1998:	be 4f       	sbci	r27, 0xFE	; 254
    199a:	f8 01       	movw	r30, r16
    199c:	ef 52       	subi	r30, 0x2F	; 47
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	6c 91       	ld	r22, X
    19a2:	80 81       	ld	r24, Z
    19a4:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    19a8:	f8 01       	movw	r30, r16
    19aa:	e7 53       	subi	r30, 0x37	; 55
    19ac:	fe 4f       	sbci	r31, 0xFE	; 254
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	80 83       	st	Z, r24
    19b2:	91 ce       	rjmp	.-734    	; 0x16d6 <move_ghost+0x29c>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    19b4:	0c 2f       	mov	r16, r28
    19b6:	0c 2e       	mov	r0, r28
    19b8:	00 0c       	add	r0, r0
    19ba:	11 0b       	sbc	r17, r17
    19bc:	d8 01       	movw	r26, r16
    19be:	a3 53       	subi	r26, 0x33	; 51
    19c0:	be 4f       	sbci	r27, 0xFE	; 254
    19c2:	f8 01       	movw	r30, r16
    19c4:	ef 52       	subi	r30, 0x2F	; 47
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	6c 91       	ld	r22, X
    19ca:	80 81       	ld	r24, Z
    19cc:	0e 94 55 05 	call	0xaaa	; 0xaaa <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    19d0:	f8 01       	movw	r30, r16
    19d2:	e7 53       	subi	r30, 0x37	; 55
    19d4:	fe 4f       	sbci	r31, 0xFE	; 254
    19d6:	83 e0       	ldi	r24, 0x03	; 3
    19d8:	80 83       	st	Z, r24
    19da:	84 ce       	rjmp	.-760    	; 0x16e4 <move_ghost+0x2aa>
		
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
		
	}
	normal_display_mode();
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	df 90       	pop	r13
    19ea:	cf 90       	pop	r12
    19ec:	08 95       	ret

000019ee <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <game_running>
    19f4:	91 11       	cpse	r25, r1
    19f6:	80 e0       	ldi	r24, 0x00	; 0
}
    19f8:	08 95       	ret

000019fa <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	20 91 dc 01 	lds	r18, 0x01DC	; 0x8001dc <num_pacdots>
    1a00:	30 91 dd 01 	lds	r19, 0x01DD	; 0x8001dd <num_pacdots+0x1>
    1a04:	23 2b       	or	r18, r19
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <is_level_complete+0x10>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
}
    1a0a:	08 95       	ret

00001a0c <initialise_joystick>:
static uint8_t prev_dir =0; 
static uint32_t prev_time; 

void initialise_joystick(void){
	//Setup ADC
	ADMUX = (1 <<REFS0); 
    1a0c:	80 e4       	ldi	r24, 0x40	; 64
    1a0e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 
    1a12:	86 e8       	ldi	r24, 0x86	; 134
    1a14:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1a18:	08 95       	ret

00001a1a <joystick_dir>:
		; //wait
	}
	adc_y = ADC;  //read value 
}

uint8_t joystick_dir(void){
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	ADCSRA= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ; 

}
static void get_ADCval(void){
	//x axis 
	ADMUX &= ~1; 
    1a1e:	ec e7       	ldi	r30, 0x7C	; 124
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8e 7f       	andi	r24, 0xFE	; 254
    1a26:	80 83       	st	Z, r24
	//convert ADC 
	ADCSRA |= (1<<ADSC) ; 
    1a28:	ea e7       	ldi	r30, 0x7A	; 122
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 64       	ori	r24, 0x40	; 64
    1a30:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){
    1a32:	80 81       	ld	r24, Z
    1a34:	86 fd       	sbrc	r24, 6
    1a36:	fd cf       	rjmp	.-6      	; 0x1a32 <joystick_dir+0x18>
		; //wait conversion. 
	}
	adc_x = ADC;  //read value 
    1a38:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1a3c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1a40:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <adc_x+0x1>
    1a44:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <adc_x>
	
	//read y axis 
	ADMUX |= 1; 
    1a48:	ec e7       	ldi	r30, 0x7C	; 124
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); 
    1a52:	ea e7       	ldi	r30, 0x7A	; 122
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	80 83       	st	Z, r24
	while (ADCSRA & (1<<ADSC)){
    1a5c:	90 81       	ld	r25, Z
    1a5e:	89 2f       	mov	r24, r25
    1a60:	80 74       	andi	r24, 0x40	; 64
    1a62:	96 fd       	sbrc	r25, 6
    1a64:	fb cf       	rjmp	.-10     	; 0x1a5c <joystick_dir+0x42>
		; //wait
	}
	adc_y = ADC;  //read value 
    1a66:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1a6a:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1a6e:	50 93 dc 02 	sts	0x02DC, r21	; 0x8002dc <adc_y+0x1>
    1a72:	40 93 db 02 	sts	0x02DB, r20	; 0x8002db <adc_y>
uint8_t joystick_dir(void){
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
    1a76:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <adc_x>
    1a7a:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <adc_x+0x1>
    1a7e:	21 30       	cpi	r18, 0x01	; 1
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	39 07       	cpc	r19, r25
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <joystick_dir+0x6e>
    1a86:	59 c0       	rjmp	.+178    	; 0x1b3a <joystick_dir+0x120>
		direction = 4 ; 
	} else if (adc_x < 257){
    1a88:	21 30       	cpi	r18, 0x01	; 1
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	08 f4       	brcc	.+2      	; 0x1a92 <joystick_dir+0x78>
    1a90:	56 c0       	rjmp	.+172    	; 0x1b3e <joystick_dir+0x124>
		direction = 3; 
	}else if (adc_y >768){
    1a92:	41 30       	cpi	r20, 0x01	; 1
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	59 07       	cpc	r21, r25
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <joystick_dir+0x82>
    1a9a:	53 c0       	rjmp	.+166    	; 0x1b42 <joystick_dir+0x128>
		direction =1; 
	}else if (adc_y <257){
    1a9c:	41 30       	cpi	r20, 0x01	; 1
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	59 07       	cpc	r21, r25
    1aa2:	08 f4       	brcc	.+2      	; 0x1aa6 <joystick_dir+0x8c>
    1aa4:	50 c0       	rjmp	.+160    	; 0x1b46 <joystick_dir+0x12c>
		direction = 2; 
	}else {
		if (prev_dir == 3){
    1aa6:	d0 91 da 02 	lds	r29, 0x02DA	; 0x8002da <prev_dir>
    1aaa:	d3 30       	cpi	r29, 0x03	; 3
    1aac:	31 f4       	brne	.+12     	; 0x1aba <joystick_dir+0xa0>
			// if adc_x < 386 then direction = direction, otherwise direction = middle
			direction = (adc_x <386 ? 3:-1) ; 
    1aae:	22 38       	cpi	r18, 0x82	; 130
    1ab0:	31 40       	sbci	r19, 0x01	; 1
    1ab2:	08 f4       	brcc	.+2      	; 0x1ab6 <joystick_dir+0x9c>
    1ab4:	51 c0       	rjmp	.+162    	; 0x1b58 <joystick_dir+0x13e>
    1ab6:	cf ef       	ldi	r28, 0xFF	; 255
    1ab8:	30 c0       	rjmp	.+96     	; 0x1b1a <joystick_dir+0x100>
		}
		else if(prev_dir == 1){
    1aba:	d1 30       	cpi	r29, 0x01	; 1
    1abc:	31 f4       	brne	.+12     	; 0x1aca <joystick_dir+0xb0>
			direction = (adc_y > 641 ? 1:-1); 
    1abe:	42 38       	cpi	r20, 0x82	; 130
    1ac0:	52 40       	sbci	r21, 0x02	; 2
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <joystick_dir+0xac>
    1ac4:	49 c0       	rjmp	.+146    	; 0x1b58 <joystick_dir+0x13e>
    1ac6:	cf ef       	ldi	r28, 0xFF	; 255
    1ac8:	28 c0       	rjmp	.+80     	; 0x1b1a <joystick_dir+0x100>
		}else if(prev_dir ==2){
    1aca:	d2 30       	cpi	r29, 0x02	; 2
    1acc:	31 f4       	brne	.+12     	; 0x1ada <joystick_dir+0xc0>
			direction = (adc_y < 386 ? 2:-1); 
    1ace:	42 38       	cpi	r20, 0x82	; 130
    1ad0:	51 40       	sbci	r21, 0x01	; 1
    1ad2:	08 f4       	brcc	.+2      	; 0x1ad6 <joystick_dir+0xbc>
    1ad4:	41 c0       	rjmp	.+130    	; 0x1b58 <joystick_dir+0x13e>
    1ad6:	cf ef       	ldi	r28, 0xFF	; 255
    1ad8:	20 c0       	rjmp	.+64     	; 0x1b1a <joystick_dir+0x100>
		}else if (prev_dir == 4) {
    1ada:	d4 30       	cpi	r29, 0x04	; 4
    1adc:	d1 f5       	brne	.+116    	; 0x1b52 <joystick_dir+0x138>
			direction =(adc_x > 641 ? 4:-1); 
    1ade:	22 38       	cpi	r18, 0x82	; 130
    1ae0:	32 40       	sbci	r19, 0x02	; 2
    1ae2:	d0 f5       	brcc	.+116    	; 0x1b58 <joystick_dir+0x13e>
    1ae4:	cf ef       	ldi	r28, 0xFF	; 255
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <joystick_dir+0x100>
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
    1ae8:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
			if (current_time < prev_time + 300){
    1aec:	ab 01       	movw	r20, r22
    1aee:	bc 01       	movw	r22, r24
    1af0:	55 27       	eor	r21, r21
    1af2:	66 27       	eor	r22, r22
    1af4:	77 27       	eor	r23, r23
    1af6:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <prev_time>
    1afa:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <prev_time+0x1>
    1afe:	a0 91 d8 02 	lds	r26, 0x02D8	; 0x8002d8 <prev_time+0x2>
    1b02:	b0 91 d9 02 	lds	r27, 0x02D9	; 0x8002d9 <prev_time+0x3>
    1b06:	84 5d       	subi	r24, 0xD4	; 212
    1b08:	9e 4f       	sbci	r25, 0xFE	; 254
    1b0a:	af 4f       	sbci	r26, 0xFF	; 255
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	48 17       	cp	r20, r24
    1b10:	59 07       	cpc	r21, r25
    1b12:	6a 07       	cpc	r22, r26
    1b14:	7b 07       	cpc	r23, r27
    1b16:	78 f0       	brcs	.+30     	; 0x1b36 <joystick_dir+0x11c>
    1b18:	cd 2f       	mov	r28, r29
				return -1 ; 
			}
		}
		prev_time = get_current_time() ; 
    1b1a:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
    1b1e:	60 93 d6 02 	sts	0x02D6, r22	; 0x8002d6 <prev_time>
    1b22:	70 93 d7 02 	sts	0x02D7, r23	; 0x8002d7 <prev_time+0x1>
    1b26:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <prev_time+0x2>
    1b2a:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <prev_time+0x3>
		prev_dir = direction ; 
    1b2e:	c0 93 da 02 	sts	0x02DA, r28	; 0x8002da <prev_dir>
    1b32:	8c 2f       	mov	r24, r28
    1b34:	14 c0       	rjmp	.+40     	; 0x1b5e <joystick_dir+0x144>
	}
	if (direction >0){
		if(prev_dir == direction){
			current_time = get_current_time(); 
			if (current_time < prev_time + 300){
				return -1 ; 
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	12 c0       	rjmp	.+36     	; 0x1b5e <joystick_dir+0x144>
	// 1=up , 2=down , 3= left, 4= right, -1= middle 
	uint8_t direction; 
	uint8_t current_time; 
	get_ADCval(); 
	if (adc_x >768) {
		direction = 4 ; 
    1b3a:	c4 e0       	ldi	r28, 0x04	; 4
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <joystick_dir+0x12e>
	} else if (adc_x < 257){
		direction = 3; 
    1b3e:	c3 e0       	ldi	r28, 0x03	; 3
    1b40:	03 c0       	rjmp	.+6      	; 0x1b48 <joystick_dir+0x12e>
	}else if (adc_y >768){
		direction =1; 
    1b42:	c1 e0       	ldi	r28, 0x01	; 1
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <joystick_dir+0x12e>
	}else if (adc_y <257){
		direction = 2; 
    1b46:	c2 e0       	ldi	r28, 0x02	; 2
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
		if(prev_dir == direction){
    1b48:	d0 91 da 02 	lds	r29, 0x02DA	; 0x8002da <prev_dir>
    1b4c:	cd 13       	cpse	r28, r29
    1b4e:	e5 cf       	rjmp	.-54     	; 0x1b1a <joystick_dir+0x100>
    1b50:	cb cf       	rjmp	.-106    	; 0x1ae8 <joystick_dir+0xce>
			direction =(adc_x > 641 ? 4:-1); 
		}else{
			direction = prev_dir ; 
		}
	}
	if (direction >0){
    1b52:	dd 23       	and	r29, r29
    1b54:	21 f0       	breq	.+8      	; 0x1b5e <joystick_dir+0x144>
    1b56:	c8 cf       	rjmp	.-112    	; 0x1ae8 <joystick_dir+0xce>
		if(prev_dir == direction){
    1b58:	d0 91 da 02 	lds	r29, 0x02DA	; 0x8002da <prev_dir>
    1b5c:	c5 cf       	rjmp	.-118    	; 0x1ae8 <joystick_dir+0xce>
		prev_dir = direction ; 
	}
	return direction ; 


    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1b64:	80 e8       	ldi	r24, 0x80	; 128
    1b66:	0e 94 86 12 	call	0x250c	; 0x250c <spi_setup_master>
    1b6a:	08 95       	ret

00001b6c <ledmatrix_update_column>:
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	80 31       	cpi	r24, 0x10	; 16
    1b76:	90 f4       	brcc	.+36     	; 0x1b9c <ledmatrix_update_column+0x30>
    1b78:	8b 01       	movw	r16, r22
    1b7a:	c8 2f       	mov	r28, r24
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1b82:	8c 2f       	mov	r24, r28
    1b84:	8f 70       	andi	r24, 0x0F	; 15
    1b86:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1b8a:	e8 01       	movw	r28, r16
    1b8c:	08 5f       	subi	r16, 0xF8	; 248
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	89 91       	ld	r24, Y+
    1b92:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1b96:	c0 17       	cp	r28, r16
    1b98:	d1 07       	cpc	r29, r17
    1b9a:	d1 f7       	brne	.-12     	; 0x1b90 <ledmatrix_update_column+0x24>
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	08 95       	ret

00001ba6 <ledmatrix_shift_display_left>:
    1ba6:	84 e0       	ldi	r24, 0x04	; 4
    1ba8:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1bb2:	08 95       	ret

00001bb4 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1bb4:	8f e0       	ldi	r24, 0x0F	; 15
    1bb6:	0e 94 ae 12 	call	0x255c	; 0x255c <spi_send_byte>
    1bba:	08 95       	ret

00001bbc <initialise_hardware>:
	if (num==0){
		reset_lives();
	}else {
		set_lives(num);
	}
	display_lives(); 
    1bbc:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <ledmatrix_setup>
    1bc0:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <initialise_joystick>
    1bc4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <init_button_interrupts>
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	7b e4       	ldi	r23, 0x4B	; 75
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 9e 11 	call	0x233c	; 0x233c <init_serial_stdio>
    1bd6:	0e 94 ed 12 	call	0x25da	; 0x25da <init_timer0>
    1bda:	78 94       	sei
    1bdc:	08 95       	ret

00001bde <splash_screen>:
    1bde:	0e 94 ce 12 	call	0x259c	; 0x259c <clear_terminal>
    1be2:	6a e0       	ldi	r22, 0x0A	; 10
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	8a e0       	ldi	r24, 0x0A	; 10
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1bee:	8c e8       	ldi	r24, 0x8C	; 140
    1bf0:	95 e0       	ldi	r25, 0x05	; 5
    1bf2:	9f 93       	push	r25
    1bf4:	8f 93       	push	r24
    1bf6:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1bfa:	6c e0       	ldi	r22, 0x0C	; 12
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	8a e0       	ldi	r24, 0x0A	; 10
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1c06:	89 e6       	ldi	r24, 0x69	; 105
    1c08:	95 e0       	ldi	r25, 0x05	; 5
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1c12:	6e e0       	ldi	r22, 0x0E	; 14
    1c14:	70 e0       	ldi	r23, 0x00	; 0
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1c1e:	80 e5       	ldi	r24, 0x50	; 80
    1c20:	95 e0       	ldi	r25, 0x05	; 5
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1c2a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <ledmatrix_clear>
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	60 ef       	ldi	r22, 0xF0	; 240
    1c3c:	82 ea       	ldi	r24, 0xA2	; 162
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	0e 94 67 10 	call	0x20ce	; 0x20ce <set_scrolling_display_text>
    1c44:	10 c0       	rjmp	.+32     	; 0x1c66 <splash_screen+0x88>
    1c46:	2f e7       	ldi	r18, 0x7F	; 127
    1c48:	89 ea       	ldi	r24, 0xA9	; 169
    1c4a:	93 e0       	ldi	r25, 0x03	; 3
    1c4c:	21 50       	subi	r18, 0x01	; 1
    1c4e:	80 40       	sbci	r24, 0x00	; 0
    1c50:	90 40       	sbci	r25, 0x00	; 0
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <splash_screen+0x6e>
    1c54:	00 c0       	rjmp	.+0      	; 0x1c56 <splash_screen+0x78>
    1c56:	00 00       	nop
    1c58:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1c5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <splash_screen+0x88>
    1c60:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <ledmatrix_clear>
    1c64:	08 95       	ret
    1c66:	0e 94 76 10 	call	0x20ec	; 0x20ec <scroll_display>
    1c6a:	81 11       	cpse	r24, r1
    1c6c:	ec cf       	rjmp	.-40     	; 0x1c46 <splash_screen+0x68>
    1c6e:	e5 cf       	rjmp	.-54     	; 0x1c3a <splash_screen+0x5c>

00001c70 <handle_level_complete>:
    1c70:	6a e0       	ldi	r22, 0x0A	; 10
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	83 e2       	ldi	r24, 0x23	; 35
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1c7c:	81 e4       	ldi	r24, 0x41	; 65
    1c7e:	95 e0       	ldi	r25, 0x05	; 5
    1c80:	9f 93       	push	r25
    1c82:	8f 93       	push	r24
    1c84:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1c88:	6b e0       	ldi	r22, 0x0B	; 11
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	83 e2       	ldi	r24, 0x23	; 35
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1c94:	80 e2       	ldi	r24, 0x20	; 32
    1c96:	95 e0       	ldi	r25, 0x05	; 5
    1c98:	9f 93       	push	r25
    1c9a:	8f 93       	push	r24
    1c9c:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1ca0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <clear_serial_input_buffer>
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <handle_level_complete+0x4c>
    1cb4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <serial_input_available>
    1cb8:	88 23       	and	r24, r24
    1cba:	c1 f3       	breq	.-16     	; 0x1cac <handle_level_complete+0x3c>
    1cbc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <clear_serial_input_buffer>
    1cc0:	08 95       	ret

00001cc2 <display_lives>:
    1cc2:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_lives>
    1cc6:	18 b8       	out	0x08, r1	; 8
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <display_lives+0xe>
    1ccc:	88 b9       	out	0x08, r24	; 8
    1cce:	08 95       	ret
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <display_lives+0x18>
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	88 b9       	out	0x08, r24	; 8
    1cd8:	08 95       	ret
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <display_lives+0x20>
    1cde:	87 e0       	ldi	r24, 0x07	; 7
    1ce0:	88 b9       	out	0x08, r24	; 8
    1ce2:	08 95       	ret

00001ce4 <handle_game_over>:
    1ce4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <display_lives>
    1ce8:	6e e0       	ldi	r22, 0x0E	; 14
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	83 e2       	ldi	r24, 0x23	; 35
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1cf4:	86 e1       	ldi	r24, 0x16	; 22
    1cf6:	95 e0       	ldi	r25, 0x05	; 5
    1cf8:	9f 93       	push	r25
    1cfa:	8f 93       	push	r24
    1cfc:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1d00:	60 e1       	ldi	r22, 0x10	; 16
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	83 e2       	ldi	r24, 0x23	; 35
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1d0c:	88 ef       	ldi	r24, 0xF8	; 248
    1d0e:	94 e0       	ldi	r25, 0x04	; 4
    1d10:	9f 93       	push	r25
    1d12:	8f 93       	push	r24
    1d14:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1d24:	8f 3f       	cpi	r24, 0xFF	; 255
    1d26:	e1 f3       	breq	.-8      	; 0x1d20 <handle_game_over+0x3c>
    1d28:	08 95       	ret

00001d2a <new_game>:
    1d2a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <paused>
    1d2e:	0e 94 55 07 	call	0xeaa	; 0xeaa <initialise_game>
    1d32:	0e 94 2e 10 	call	0x205c	; 0x205c <init_score>
    1d36:	0e 94 9f 05 	call	0xb3e	; 0xb3e <reset_lives>
    1d3a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <display_lives>
    1d3e:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1d42:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <clear_serial_input_buffer>
    1d46:	08 95       	ret

00001d48 <play_game>:
    1d48:	2f 92       	push	r2
    1d4a:	3f 92       	push	r3
    1d4c:	4f 92       	push	r4
    1d4e:	5f 92       	push	r5
    1d50:	6f 92       	push	r6
    1d52:	7f 92       	push	r7
    1d54:	8f 92       	push	r8
    1d56:	9f 92       	push	r9
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	60 97       	sbiw	r28, 0x10	; 16
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
    1d80:	2b 01       	movw	r4, r22
    1d82:	3c 01       	movw	r6, r24
    1d84:	6d 87       	std	Y+13, r22	; 0x0d
    1d86:	7e 87       	std	Y+14, r23	; 0x0e
    1d88:	8f 87       	std	Y+15, r24	; 0x0f
    1d8a:	98 8b       	std	Y+16, r25	; 0x10
    1d8c:	69 87       	std	Y+9, r22	; 0x09
    1d8e:	7a 87       	std	Y+10, r23	; 0x0a
    1d90:	8b 87       	std	Y+11, r24	; 0x0b
    1d92:	9c 87       	std	Y+12, r25	; 0x0c
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	7e 83       	std	Y+6, r23	; 0x06
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	69 83       	std	Y+1, r22	; 0x01
    1d9e:	7a 83       	std	Y+2, r23	; 0x02
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	91 2c       	mov	r9, r1
    1da6:	0f 2e       	mov	r0, r31
    1da8:	f8 e0       	ldi	r31, 0x08	; 8
    1daa:	2f 2e       	mov	r2, r31
    1dac:	f4 e0       	ldi	r31, 0x04	; 4
    1dae:	3f 2e       	mov	r3, r31
    1db0:	f0 2d       	mov	r31, r0
    1db2:	88 24       	eor	r8, r8
    1db4:	83 94       	inc	r8
    1db6:	0f 2e       	mov	r0, r31
    1db8:	f4 eb       	ldi	r31, 0xB4	; 180
    1dba:	af 2e       	mov	r10, r31
    1dbc:	f1 e0       	ldi	r31, 0x01	; 1
    1dbe:	bf 2e       	mov	r11, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	0e c1       	rjmp	.+540    	; 0x1fe0 <play_game+0x298>
    1dc4:	0e 94 76 03 	call	0x6ec	; 0x6ec <button_pushed>
    1dc8:	18 2f       	mov	r17, r24
    1dca:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <display_lives>
    1dce:	1f 3f       	cpi	r17, 0xFF	; 255
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <play_game+0x8c>
    1dd2:	0f c1       	rjmp	.+542    	; 0x1ff2 <play_game+0x2aa>
    1dd4:	0e 94 e5 11 	call	0x23ca	; 0x23ca <serial_input_available>
    1dd8:	88 23       	and	r24, r24
    1dda:	09 f4       	brne	.+2      	; 0x1dde <play_game+0x96>
    1ddc:	0c c1       	rjmp	.+536    	; 0x1ff6 <play_game+0x2ae>
    1dde:	f1 01       	movw	r30, r2
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	0e 94 35 14 	call	0x286a	; 0x286a <fgetc>
    1de8:	08 2f       	mov	r16, r24
    1dea:	91 10       	cpse	r9, r1
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <play_game+0xac>
    1dee:	8b 31       	cpi	r24, 0x1B	; 27
    1df0:	59 f4       	brne	.+22     	; 0x1e08 <play_game+0xc0>
    1df2:	03 c1       	rjmp	.+518    	; 0x1ffa <play_game+0x2b2>
    1df4:	f1 e0       	ldi	r31, 0x01	; 1
    1df6:	9f 12       	cpse	r9, r31
    1df8:	03 c0       	rjmp	.+6      	; 0x1e00 <play_game+0xb8>
    1dfa:	8b 35       	cpi	r24, 0x5B	; 91
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <play_game+0xc0>
    1dfe:	00 c1       	rjmp	.+512    	; 0x2000 <play_game+0x2b8>
    1e00:	22 e0       	ldi	r18, 0x02	; 2
    1e02:	92 16       	cp	r9, r18
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <play_game+0xc0>
    1e06:	01 c1       	rjmp	.+514    	; 0x200a <play_game+0x2c2>
    1e08:	80 2f       	mov	r24, r16
    1e0a:	8f 7d       	andi	r24, 0xDF	; 223
    1e0c:	8e 34       	cpi	r24, 0x4E	; 78
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <play_game+0xd2>
    1e10:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <new_game>
    1e14:	91 2c       	mov	r9, r1
    1e16:	0f ef       	ldi	r16, 0xFF	; 255
    1e18:	2e c0       	rjmp	.+92     	; 0x1e76 <play_game+0x12e>
    1e1a:	0f 7d       	andi	r16, 0xDF	; 223
    1e1c:	00 35       	cpi	r16, 0x50	; 80
    1e1e:	49 f5       	brne	.+82     	; 0x1e72 <play_game+0x12a>
    1e20:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <paused>
    1e24:	98 2d       	mov	r25, r8
    1e26:	81 11       	cpse	r24, r1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <paused>
    1e2e:	81 11       	cpse	r24, r1
    1e30:	11 c0       	rjmp	.+34     	; 0x1e54 <play_game+0x10c>
    1e32:	64 e0       	ldi	r22, 0x04	; 4
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	85 e2       	ldi	r24, 0x25	; 37
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1e3e:	8b ea       	ldi	r24, 0xAB	; 171
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	9f 93       	push	r25
    1e44:	8f 93       	push	r24
    1e46:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	91 2c       	mov	r9, r1
    1e50:	0f ef       	ldi	r16, 0xFF	; 255
    1e52:	11 c0       	rjmp	.+34     	; 0x1e76 <play_game+0x12e>
    1e54:	64 e0       	ldi	r22, 0x04	; 4
    1e56:	70 e0       	ldi	r23, 0x00	; 0
    1e58:	85 e2       	ldi	r24, 0x25	; 37
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 b4 12 	call	0x2568	; 0x2568 <move_cursor>
    1e60:	bf 92       	push	r11
    1e62:	af 92       	push	r10
    1e64:	0e 94 73 14 	call	0x28e6	; 0x28e6 <printf>
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	91 2c       	mov	r9, r1
    1e6e:	0f ef       	ldi	r16, 0xFF	; 255
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <play_game+0x12e>
    1e72:	91 2c       	mov	r9, r1
    1e74:	0f ef       	ldi	r16, 0xFF	; 255
    1e76:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <paused>
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	b1 c0       	rjmp	.+354    	; 0x1fe0 <play_game+0x298>
    1e7e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <joystick_dir>
    1e82:	13 30       	cpi	r17, 0x03	; 3
    1e84:	21 f0       	breq	.+8      	; 0x1e8e <play_game+0x146>
    1e86:	01 34       	cpi	r16, 0x41	; 65
    1e88:	11 f0       	breq	.+4      	; 0x1e8e <play_game+0x146>
    1e8a:	83 30       	cpi	r24, 0x03	; 3
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <play_game+0x14e>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <change_pacman_direction>
    1e94:	1d c0       	rjmp	.+58     	; 0x1ed0 <play_game+0x188>
    1e96:	12 30       	cpi	r17, 0x02	; 2
    1e98:	21 f0       	breq	.+8      	; 0x1ea2 <play_game+0x15a>
    1e9a:	07 35       	cpi	r16, 0x57	; 87
    1e9c:	11 f0       	breq	.+4      	; 0x1ea2 <play_game+0x15a>
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	21 f4       	brne	.+8      	; 0x1eaa <play_game+0x162>
    1ea2:	88 2d       	mov	r24, r8
    1ea4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <change_pacman_direction>
    1ea8:	13 c0       	rjmp	.+38     	; 0x1ed0 <play_game+0x188>
    1eaa:	11 30       	cpi	r17, 0x01	; 1
    1eac:	21 f0       	breq	.+8      	; 0x1eb6 <play_game+0x16e>
    1eae:	03 35       	cpi	r16, 0x53	; 83
    1eb0:	11 f0       	breq	.+4      	; 0x1eb6 <play_game+0x16e>
    1eb2:	82 30       	cpi	r24, 0x02	; 2
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <play_game+0x176>
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <change_pacman_direction>
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <play_game+0x188>
    1ebe:	11 23       	and	r17, r17
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <play_game+0x182>
    1ec2:	04 34       	cpi	r16, 0x44	; 68
    1ec4:	11 f0       	breq	.+4      	; 0x1eca <play_game+0x182>
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	19 f4       	brne	.+6      	; 0x1ed0 <play_game+0x188>
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <change_pacman_direction>
    1ed0:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
    1ed4:	6b 01       	movw	r12, r22
    1ed6:	7c 01       	movw	r14, r24
    1ed8:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1edc:	81 11       	cpse	r24, r1
    1ede:	20 c0       	rjmp	.+64     	; 0x1f20 <play_game+0x1d8>
    1ee0:	d3 01       	movw	r26, r6
    1ee2:	c2 01       	movw	r24, r4
    1ee4:	80 57       	subi	r24, 0x70	; 112
    1ee6:	9e 4f       	sbci	r25, 0xFE	; 254
    1ee8:	af 4f       	sbci	r26, 0xFF	; 255
    1eea:	bf 4f       	sbci	r27, 0xFF	; 255
    1eec:	c8 16       	cp	r12, r24
    1eee:	d9 06       	cpc	r13, r25
    1ef0:	ea 06       	cpc	r14, r26
    1ef2:	fb 06       	cpc	r15, r27
    1ef4:	a8 f0       	brcs	.+42     	; 0x1f20 <play_game+0x1d8>
    1ef6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <move_pacman>
    1efa:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <is_level_complete>
    1efe:	88 23       	and	r24, r24
    1f00:	69 f0       	breq	.+26     	; 0x1f1c <play_game+0x1d4>
    1f02:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <handle_level_complete>
    1f06:	0e 94 a3 05 	call	0xb46	; 0xb46 <initialise_game_level>
    1f0a:	0e 94 05 13 	call	0x260a	; 0x260a <get_current_time>
    1f0e:	2b 01       	movw	r4, r22
    1f10:	3c 01       	movw	r6, r24
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <play_game+0x1d8>
    1f1c:	26 01       	movw	r4, r12
    1f1e:	37 01       	movw	r6, r14
    1f20:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1f24:	81 11       	cpse	r24, r1
    1f26:	14 c0       	rjmp	.+40     	; 0x1f50 <play_game+0x208>
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f30:	8c 55       	subi	r24, 0x5C	; 92
    1f32:	9e 4f       	sbci	r25, 0xFE	; 254
    1f34:	af 4f       	sbci	r26, 0xFF	; 255
    1f36:	bf 4f       	sbci	r27, 0xFF	; 255
    1f38:	c8 16       	cp	r12, r24
    1f3a:	d9 06       	cpc	r13, r25
    1f3c:	ea 06       	cpc	r14, r26
    1f3e:	fb 06       	cpc	r15, r27
    1f40:	38 f0       	brcs	.+14     	; 0x1f50 <play_game+0x208>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	0e 94 1d 0a 	call	0x143a	; 0x143a <move_ghost>
    1f48:	c9 82       	std	Y+1, r12	; 0x01
    1f4a:	da 82       	std	Y+2, r13	; 0x02
    1f4c:	eb 82       	std	Y+3, r14	; 0x03
    1f4e:	fc 82       	std	Y+4, r15	; 0x04
    1f50:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1f54:	81 11       	cpse	r24, r1
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <play_game+0x238>
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	af 81       	ldd	r26, Y+7	; 0x07
    1f5e:	b8 85       	ldd	r27, Y+8	; 0x08
    1f60:	8e 53       	subi	r24, 0x3E	; 62
    1f62:	9e 4f       	sbci	r25, 0xFE	; 254
    1f64:	af 4f       	sbci	r26, 0xFF	; 255
    1f66:	bf 4f       	sbci	r27, 0xFF	; 255
    1f68:	c8 16       	cp	r12, r24
    1f6a:	d9 06       	cpc	r13, r25
    1f6c:	ea 06       	cpc	r14, r26
    1f6e:	fb 06       	cpc	r15, r27
    1f70:	38 f0       	brcs	.+14     	; 0x1f80 <play_game+0x238>
    1f72:	88 2d       	mov	r24, r8
    1f74:	0e 94 1d 0a 	call	0x143a	; 0x143a <move_ghost>
    1f78:	cd 82       	std	Y+5, r12	; 0x05
    1f7a:	de 82       	std	Y+6, r13	; 0x06
    1f7c:	ef 82       	std	Y+7, r14	; 0x07
    1f7e:	f8 86       	std	Y+8, r15	; 0x08
    1f80:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1f84:	81 11       	cpse	r24, r1
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <play_game+0x268>
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f8e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1f90:	8c 50       	subi	r24, 0x0C	; 12
    1f92:	9e 4f       	sbci	r25, 0xFE	; 254
    1f94:	af 4f       	sbci	r26, 0xFF	; 255
    1f96:	bf 4f       	sbci	r27, 0xFF	; 255
    1f98:	c8 16       	cp	r12, r24
    1f9a:	d9 06       	cpc	r13, r25
    1f9c:	ea 06       	cpc	r14, r26
    1f9e:	fb 06       	cpc	r15, r27
    1fa0:	38 f0       	brcs	.+14     	; 0x1fb0 <play_game+0x268>
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	0e 94 1d 0a 	call	0x143a	; 0x143a <move_ghost>
    1fa8:	c9 86       	std	Y+9, r12	; 0x09
    1faa:	da 86       	std	Y+10, r13	; 0x0a
    1fac:	eb 86       	std	Y+11, r14	; 0x0b
    1fae:	fc 86       	std	Y+12, r15	; 0x0c
    1fb0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <play_game+0x298>
    1fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbc:	af 85       	ldd	r26, Y+15	; 0x0f
    1fbe:	b8 89       	ldd	r27, Y+16	; 0x10
    1fc0:	86 5c       	subi	r24, 0xC6	; 198
    1fc2:	9d 4f       	sbci	r25, 0xFD	; 253
    1fc4:	af 4f       	sbci	r26, 0xFF	; 255
    1fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc8:	c8 16       	cp	r12, r24
    1fca:	d9 06       	cpc	r13, r25
    1fcc:	ea 06       	cpc	r14, r26
    1fce:	fb 06       	cpc	r15, r27
    1fd0:	38 f0       	brcs	.+14     	; 0x1fe0 <play_game+0x298>
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	0e 94 1d 0a 	call	0x143a	; 0x143a <move_ghost>
    1fd8:	cd 86       	std	Y+13, r12	; 0x0d
    1fda:	de 86       	std	Y+14, r13	; 0x0e
    1fdc:	ef 86       	std	Y+15, r14	; 0x0f
    1fde:	f8 8a       	std	Y+16, r15	; 0x10
    1fe0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <is_game_over>
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	13 c0       	rjmp	.+38     	; 0x200e <play_game+0x2c6>
    1fe8:	0e 94 9c 05 	call	0xb38	; 0xb38 <get_lives>
    1fec:	81 11       	cpse	r24, r1
    1fee:	ea ce       	rjmp	.-556    	; 0x1dc4 <play_game+0x7c>
    1ff0:	0e c0       	rjmp	.+28     	; 0x200e <play_game+0x2c6>
    1ff2:	0f ef       	ldi	r16, 0xFF	; 255
    1ff4:	40 cf       	rjmp	.-384    	; 0x1e76 <play_game+0x12e>
    1ff6:	0f ef       	ldi	r16, 0xFF	; 255
    1ff8:	3e cf       	rjmp	.-388    	; 0x1e76 <play_game+0x12e>
    1ffa:	98 2c       	mov	r9, r8
    1ffc:	0f ef       	ldi	r16, 0xFF	; 255
    1ffe:	3b cf       	rjmp	.-394    	; 0x1e76 <play_game+0x12e>
    2000:	68 94       	set
    2002:	99 24       	eor	r9, r9
    2004:	91 f8       	bld	r9, 1
    2006:	0f ef       	ldi	r16, 0xFF	; 255
    2008:	36 cf       	rjmp	.-404    	; 0x1e76 <play_game+0x12e>
    200a:	91 2c       	mov	r9, r1
    200c:	34 cf       	rjmp	.-408    	; 0x1e76 <play_game+0x12e>
    200e:	60 96       	adiw	r28, 0x10	; 16
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	9f 90       	pop	r9
    2030:	8f 90       	pop	r8
    2032:	7f 90       	pop	r7
    2034:	6f 90       	pop	r6
    2036:	5f 90       	pop	r5
    2038:	4f 90       	pop	r4
    203a:	3f 90       	pop	r3
    203c:	2f 90       	pop	r2
    203e:	08 95       	ret

00002040 <main>:
    2040:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <initialise_hardware>
    2044:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <splash_screen>
    2048:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <new_game>
    204c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <play_game>
    2050:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <handle_game_over>
    2054:	f9 cf       	rjmp	.-14     	; 0x2048 <main+0x8>

00002056 <is_paused>:
	
}

uint8_t is_paused(void){
	return paused;
    2056:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <paused>
    205a:	08 95       	ret

0000205c <init_score>:
uint32_t score;
uint32_t high_score;

 
void init_score(void) {
	score = 0;
    205c:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <score>
    2060:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <score+0x1>
    2064:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <score+0x2>
    2068:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <score+0x3>
    206c:	08 95       	ret

0000206e <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    206e:	40 91 f0 02 	lds	r20, 0x02F0	; 0x8002f0 <score>
    2072:	50 91 f1 02 	lds	r21, 0x02F1	; 0x8002f1 <score+0x1>
    2076:	60 91 f2 02 	lds	r22, 0x02F2	; 0x8002f2 <score+0x2>
    207a:	70 91 f3 02 	lds	r23, 0x02F3	; 0x8002f3 <score+0x3>
    207e:	48 0f       	add	r20, r24
    2080:	59 1f       	adc	r21, r25
    2082:	61 1d       	adc	r22, r1
    2084:	71 1d       	adc	r23, r1
    2086:	40 93 f0 02 	sts	0x02F0, r20	; 0x8002f0 <score>
    208a:	50 93 f1 02 	sts	0x02F1, r21	; 0x8002f1 <score+0x1>
    208e:	60 93 f2 02 	sts	0x02F2, r22	; 0x8002f2 <score+0x2>
    2092:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <score+0x3>
    2096:	08 95       	ret

00002098 <get_score>:
}

uint32_t get_score(void) {
	return score;
    2098:	60 91 f0 02 	lds	r22, 0x02F0	; 0x8002f0 <score>
    209c:	70 91 f1 02 	lds	r23, 0x02F1	; 0x8002f1 <score+0x1>
    20a0:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <score+0x2>
    20a4:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <score+0x3>
}
    20a8:	08 95       	ret

000020aa <set_highscore>:

void set_highscore (uint32_t value) {
	high_score= value ; 
    20aa:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <high_score>
    20ae:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <high_score+0x1>
    20b2:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <high_score+0x2>
    20b6:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <high_score+0x3>
    20ba:	08 95       	ret

000020bc <get_highscore>:
}

uint32_t get_highscore(void){
		return high_score ; 	
    20bc:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <high_score>
    20c0:	70 91 ed 02 	lds	r23, 0x02ED	; 0x8002ed <high_score+0x1>
    20c4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <high_score+0x2>
    20c8:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <high_score+0x3>
    20cc:	08 95       	ret

000020ce <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    20ce:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    20d2:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <display_string+0x1>
    20d6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <display_string>
	next_col_ptr = 0;
    20da:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <next_col_ptr+0x1>
    20de:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <next_col_ptr>
	next_char_to_display = 0;
    20e2:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <next_char_to_display+0x1>
    20e6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <next_char_to_display>
    20ea:	08 95       	ret

000020ec <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	28 97       	sbiw	r28, 0x08	; 8
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    2104:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <next_col_ptr>
    2108:	f0 91 e6 02 	lds	r31, 0x02E6	; 0x8002e6 <next_col_ptr+0x1>
    210c:	30 97       	sbiw	r30, 0x00	; 0
    210e:	81 f0       	breq	.+32     	; 0x2130 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    2110:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    2112:	10 ff       	sbrs	r17, 0
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    2116:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <next_col_ptr+0x1>
    211a:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    211e:	00 e0       	ldi	r16, 0x00	; 0
    2120:	6b c0       	rjmp	.+214    	; 0x21f8 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    2122:	31 96       	adiw	r30, 0x01	; 1
    2124:	f0 93 e6 02 	sts	0x02E6, r31	; 0x8002e6 <next_col_ptr+0x1>
    2128:	e0 93 e5 02 	sts	0x02E5, r30	; 0x8002e5 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    212c:	00 e0       	ldi	r16, 0x00	; 0
    212e:	64 c0       	rjmp	.+200    	; 0x21f8 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    2130:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <next_char_to_display>
    2134:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <next_char_to_display+0x1>
    2138:	30 97       	sbiw	r30, 0x00	; 0
    213a:	09 f4       	brne	.+2      	; 0x213e <scroll_display+0x52>
    213c:	49 c0       	rjmp	.+146    	; 0x21d0 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    213e:	cf 01       	movw	r24, r30
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <next_char_to_display+0x1>
    2146:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <next_char_to_display>
    214a:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    214c:	e1 11       	cpse	r30, r1
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    2150:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <next_char_to_display+0x1>
    2154:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <next_char_to_display>
			shift_countdown = 16;
    2158:	80 e1       	ldi	r24, 0x10	; 16
    215a:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    215e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2160:	10 e0       	ldi	r17, 0x00	; 0
    2162:	4a c0       	rjmp	.+148    	; 0x21f8 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    2164:	8f e9       	ldi	r24, 0x9F	; 159
    2166:	8e 0f       	add	r24, r30
    2168:	8a 31       	cpi	r24, 0x1A	; 26
    216a:	70 f4       	brcc	.+28     	; 0x2188 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	ee 0f       	add	r30, r30
    2170:	ff 1f       	adc	r31, r31
    2172:	ea 51       	subi	r30, 0x1A	; 26
    2174:	fb 4f       	sbci	r31, 0xFB	; 251
    2176:	85 91       	lpm	r24, Z+
    2178:	94 91       	lpm	r25, Z
    217a:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <next_col_ptr+0x1>
    217e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    2182:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    2184:	10 e0       	ldi	r17, 0x00	; 0
    2186:	38 c0       	rjmp	.+112    	; 0x21f8 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    2188:	8f eb       	ldi	r24, 0xBF	; 191
    218a:	8e 0f       	add	r24, r30
    218c:	8a 31       	cpi	r24, 0x1A	; 26
    218e:	70 f4       	brcc	.+28     	; 0x21ac <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ea 5d       	subi	r30, 0xDA	; 218
    2198:	fa 4f       	sbci	r31, 0xFA	; 250
    219a:	85 91       	lpm	r24, Z+
    219c:	94 91       	lpm	r25, Z
    219e:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <next_col_ptr+0x1>
    21a2:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    21a6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	26 c0       	rjmp	.+76     	; 0x21f8 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    21ac:	80 ed       	ldi	r24, 0xD0	; 208
    21ae:	8e 0f       	add	r24, r30
    21b0:	8a 30       	cpi	r24, 0x0A	; 10
    21b2:	00 f5       	brcc	.+64     	; 0x21f4 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	ee 0f       	add	r30, r30
    21b8:	ff 1f       	adc	r31, r31
    21ba:	ec 5c       	subi	r30, 0xCC	; 204
    21bc:	fa 4f       	sbci	r31, 0xFA	; 250
    21be:	85 91       	lpm	r24, Z+
    21c0:	94 91       	lpm	r25, Z
    21c2:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <next_col_ptr+0x1>
    21c6:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    21ca:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    21cc:	10 e0       	ldi	r17, 0x00	; 0
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    21d0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <display_string>
    21d4:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    21d8:	01 e0       	ldi	r16, 0x01	; 1
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <scroll_display+0xf4>
    21de:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    21e0:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <next_char_to_display+0x1>
    21e4:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <next_char_to_display>
		display_string = 0;
    21e8:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <display_string+0x1>
    21ec:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    21f0:	10 e0       	ldi	r17, 0x00	; 0
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    21f4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    21f6:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    21f8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    21fc:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    2200:	fe 01       	movw	r30, r28
    2202:	38 96       	adiw	r30, 0x08	; 8
    2204:	ce 01       	movw	r24, r28
    2206:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    2208:	11 23       	and	r17, r17
    220a:	14 f4       	brge	.+4      	; 0x2210 <scroll_display+0x124>
			column_colour_data[i] = colour;
    220c:	20 83       	st	Z, r18
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    2210:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    2212:	11 0f       	add	r17, r17
    2214:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    2216:	e8 17       	cp	r30, r24
    2218:	f9 07       	cpc	r31, r25
    221a:	b1 f7       	brne	.-20     	; 0x2208 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    221c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    221e:	be 01       	movw	r22, r28
    2220:	6f 5f       	subi	r22, 0xFF	; 255
    2222:	7f 4f       	sbci	r23, 0xFF	; 255
    2224:	8f e0       	ldi	r24, 0x0F	; 15
    2226:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <ledmatrix_update_column>
	if(shift_countdown > 0) {
    222a:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <shift_countdown.1854>
    222e:	88 23       	and	r24, r24
    2230:	89 f0       	breq	.+34     	; 0x2254 <scroll_display+0x168>
		shift_countdown--;
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    2238:	00 23       	and	r16, r16
    223a:	11 f0       	breq	.+4      	; 0x2240 <scroll_display+0x154>
    223c:	88 23       	and	r24, r24
    223e:	11 f0       	breq	.+4      	; 0x2244 <scroll_display+0x158>
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	03 c0       	rjmp	.+6      	; 0x224a <scroll_display+0x15e>
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <scroll_display+0x15e>
    2248:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	99 23       	and	r25, r25
    224e:	29 f0       	breq	.+10     	; 0x225a <scroll_display+0x16e>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	03 c0       	rjmp	.+6      	; 0x225a <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    2254:	00 23       	and	r16, r16
    2256:	a1 f3       	breq	.-24     	; 0x2240 <scroll_display+0x154>
    2258:	f7 cf       	rjmp	.-18     	; 0x2248 <scroll_display+0x15c>
	return !finished;
}
    225a:	28 96       	adiw	r28, 0x08	; 8
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    2270:	cf 93       	push	r28
    2272:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    2274:	8a 30       	cpi	r24, 0x0A	; 10
    2276:	19 f4       	brne	.+6      	; 0x227e <uart_put_char+0xe>
		uart_put_char('\r', stream);
    2278:	8d e0       	ldi	r24, 0x0D	; 13
    227a:	0e 94 38 11 	call	0x2270	; 0x2270 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    227e:	9f b7       	in	r25, 0x3f	; 63
    2280:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    2284:	99 23       	and	r25, r25
    2286:	29 f1       	breq	.+74     	; 0x22d2 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    2288:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    228c:	8f 3f       	cpi	r24, 0xFF	; 255
    228e:	d1 f3       	breq	.-12     	; 0x2284 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    2290:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    2292:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <out_insert_pos>
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	8e 0f       	add	r24, r30
    229a:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <out_insert_pos>
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	ea 50       	subi	r30, 0x0A	; 10
    22a2:	fd 4f       	sbci	r31, 0xFD	; 253
    22a4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    22a6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    22b0:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <out_insert_pos>
    22b4:	8f 3f       	cpi	r24, 0xFF	; 255
    22b6:	11 f4       	brne	.+4      	; 0x22bc <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    22b8:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    22bc:	e1 ec       	ldi	r30, 0xC1	; 193
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	80 62       	ori	r24, 0x20	; 32
    22c4:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    22c6:	99 23       	and	r25, r25
    22c8:	39 f0       	breq	.+14     	; 0x22d8 <uart_put_char+0x68>
		sei();
    22ca:	78 94       	sei
	}
	return 0;
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
}
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    22e0:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <bytes_in_input_buffer>
    22e4:	88 23       	and	r24, r24
    22e6:	e1 f3       	breq	.-8      	; 0x22e0 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    22e8:	2f b7       	in	r18, 0x3f	; 63
    22ea:	20 78       	andi	r18, 0x80	; 128
	cli();
    22ec:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    22ee:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <input_insert_pos>
    22f2:	30 91 07 04 	lds	r19, 0x0407	; 0x800407 <bytes_in_input_buffer>
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	83 1b       	sub	r24, r19
    22fa:	91 09       	sbc	r25, r1
    22fc:	5a f4       	brpl	.+22     	; 0x2314 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    22fe:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <input_insert_pos>
    2302:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	e8 1b       	sub	r30, r24
    230a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    230c:	ea 5f       	subi	r30, 0xFA	; 250
    230e:	fb 4f       	sbci	r31, 0xFB	; 251
    2310:	80 81       	ld	r24, Z
    2312:	0a c0       	rjmp	.+20     	; 0x2328 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    2314:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <input_insert_pos>
    2318:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <bytes_in_input_buffer>
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	e8 1b       	sub	r30, r24
    2320:	f1 09       	sbc	r31, r1
    2322:	ea 50       	subi	r30, 0x0A	; 10
    2324:	fc 4f       	sbci	r31, 0xFC	; 252
    2326:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    2328:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <bytes_in_input_buffer>
    232c:	91 50       	subi	r25, 0x01	; 1
    232e:	90 93 07 04 	sts	0x0407, r25	; 0x800407 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    2332:	22 23       	and	r18, r18
    2334:	09 f0       	breq	.+2      	; 0x2338 <uart_get_char+0x58>
		sei();
    2336:	78 94       	sei
	}	
	return c;
}
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	08 95       	ret

0000233c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    233c:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <out_insert_pos>
	bytes_in_out_buffer = 0;
    2340:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <bytes_in_out_buffer>
	input_insert_pos = 0;
    2344:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <input_insert_pos>
	bytes_in_input_buffer = 0;
    2348:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <bytes_in_input_buffer>
	input_overrun = 0;
    234c:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    2350:	40 93 e7 02 	sts	0x02E7, r20	; 0x8002e7 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	aa 1f       	adc	r26, r26
    235e:	bb 1f       	adc	r27, r27
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	aa 1f       	adc	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	9c 01       	movw	r18, r24
    236a:	ad 01       	movw	r20, r26
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	44 1f       	adc	r20, r20
    2372:	55 1f       	adc	r21, r21
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	72 e1       	ldi	r23, 0x12	; 18
    2378:	8a e7       	ldi	r24, 0x7A	; 122
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divmodsi4>
    2380:	ba 01       	movw	r22, r20
    2382:	a9 01       	movw	r20, r18
    2384:	4f 5f       	subi	r20, 0xFF	; 255
    2386:	5f 4f       	sbci	r21, 0xFF	; 255
    2388:	6f 4f       	sbci	r22, 0xFF	; 255
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	db 01       	movw	r26, r22
    238e:	ca 01       	movw	r24, r20
    2390:	1a f4       	brpl	.+6      	; 0x2398 <init_serial_stdio+0x5c>
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	a1 1d       	adc	r26, r1
    2396:	b1 1d       	adc	r27, r1
    2398:	b5 95       	asr	r27
    239a:	a7 95       	ror	r26
    239c:	97 95       	ror	r25
    239e:	87 95       	ror	r24
    23a0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    23a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    23a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    23aa:	e1 ec       	ldi	r30, 0xC1	; 193
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	88 e1       	ldi	r24, 0x18	; 24
    23b0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    23b2:	80 81       	ld	r24, Z
    23b4:	80 68       	ori	r24, 0x80	; 128
    23b6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    23b8:	e8 e0       	ldi	r30, 0x08	; 8
    23ba:	f4 e0       	ldi	r31, 0x04	; 4
    23bc:	85 e0       	ldi	r24, 0x05	; 5
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	93 83       	std	Z+3, r25	; 0x03
    23c2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	80 83       	st	Z, r24
    23c8:	08 95       	ret

000023ca <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    23ca:	90 91 07 04 	lds	r25, 0x0407	; 0x800407 <bytes_in_input_buffer>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	91 11       	cpse	r25, r1
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <serial_input_available+0xc>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
}
    23d6:	08 95       	ret

000023d8 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    23d8:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <input_insert_pos>
	bytes_in_input_buffer = 0;
    23dc:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <bytes_in_input_buffer>
    23e0:	08 95       	ret

000023e2 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    23e2:	1f 92       	push	r1
    23e4:	0f 92       	push	r0
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	0f 92       	push	r0
    23ea:	11 24       	eor	r1, r1
    23ec:	2f 93       	push	r18
    23ee:	8f 93       	push	r24
    23f0:	9f 93       	push	r25
    23f2:	ef 93       	push	r30
    23f4:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    23f6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    23fa:	88 23       	and	r24, r24
    23fc:	29 f1       	breq	.+74     	; 0x2448 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    23fe:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <out_insert_pos>
    2402:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	82 1b       	sub	r24, r18
    240a:	91 09       	sbc	r25, r1
    240c:	5a f4       	brpl	.+22     	; 0x2424 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    240e:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <out_insert_pos>
    2412:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	e8 1b       	sub	r30, r24
    241a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    241c:	eb 50       	subi	r30, 0x0B	; 11
    241e:	fc 4f       	sbci	r31, 0xFC	; 252
    2420:	90 81       	ld	r25, Z
    2422:	0a c0       	rjmp	.+20     	; 0x2438 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2424:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <out_insert_pos>
    2428:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	e8 1b       	sub	r30, r24
    2430:	f1 09       	sbc	r31, r1
    2432:	ea 50       	subi	r30, 0x0A	; 10
    2434:	fd 4f       	sbci	r31, 0xFD	; 253
    2436:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2438:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    243c:	81 50       	subi	r24, 0x01	; 1
    243e:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    2442:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    2448:	e1 ec       	ldi	r30, 0xC1	; 193
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	8f 7d       	andi	r24, 0xDF	; 223
    2450:	80 83       	st	Z, r24
	}
}
    2452:	ff 91       	pop	r31
    2454:	ef 91       	pop	r30
    2456:	9f 91       	pop	r25
    2458:	8f 91       	pop	r24
    245a:	2f 91       	pop	r18
    245c:	0f 90       	pop	r0
    245e:	0f be       	out	0x3f, r0	; 63
    2460:	0f 90       	pop	r0
    2462:	1f 90       	pop	r1
    2464:	18 95       	reti

00002466 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    2466:	1f 92       	push	r1
    2468:	0f 92       	push	r0
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	0f 92       	push	r0
    246e:	11 24       	eor	r1, r1
    2470:	2f 93       	push	r18
    2472:	3f 93       	push	r19
    2474:	4f 93       	push	r20
    2476:	5f 93       	push	r21
    2478:	6f 93       	push	r22
    247a:	7f 93       	push	r23
    247c:	8f 93       	push	r24
    247e:	9f 93       	push	r25
    2480:	af 93       	push	r26
    2482:	bf 93       	push	r27
    2484:	cf 93       	push	r28
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    248a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    248e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <do_echo>
    2492:	88 23       	and	r24, r24
    2494:	49 f0       	breq	.+18     	; 0x24a8 <__vector_20+0x42>
    2496:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <bytes_in_out_buffer>
    249a:	8f 3f       	cpi	r24, 0xFF	; 255
    249c:	29 f0       	breq	.+10     	; 0x24a8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	8c 2f       	mov	r24, r28
    24a4:	0e 94 38 11 	call	0x2270	; 0x2270 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    24a8:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <bytes_in_input_buffer>
    24ac:	80 31       	cpi	r24, 0x10	; 16
    24ae:	20 f0       	brcs	.+8      	; 0x24b8 <__vector_20+0x52>
		input_overrun = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <input_overrun>
    24b6:	18 c0       	rjmp	.+48     	; 0x24e8 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    24b8:	cd 30       	cpi	r28, 0x0D	; 13
    24ba:	09 f4       	brne	.+2      	; 0x24be <__vector_20+0x58>
			c = '\n';
    24bc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    24be:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <input_insert_pos>
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	8e 0f       	add	r24, r30
    24c6:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <input_insert_pos>
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	ea 50       	subi	r30, 0x0A	; 10
    24ce:	fc 4f       	sbci	r31, 0xFC	; 252
    24d0:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    24d2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <bytes_in_input_buffer>
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    24dc:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <input_insert_pos>
    24e0:	80 31       	cpi	r24, 0x10	; 16
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    24e4:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <input_insert_pos>
		}
	}
}
    24e8:	ff 91       	pop	r31
    24ea:	ef 91       	pop	r30
    24ec:	cf 91       	pop	r28
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	0f 90       	pop	r0
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	0f 90       	pop	r0
    2508:	1f 90       	pop	r1
    250a:	18 95       	reti

0000250c <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    250c:	94 b1       	in	r25, 0x04	; 4
    250e:	90 6b       	ori	r25, 0xB0	; 176
    2510:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    2512:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2514:	90 e5       	ldi	r25, 0x50	; 80
    2516:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2518:	88 30       	cpi	r24, 0x08	; 8
    251a:	21 f0       	breq	.+8      	; 0x2524 <spi_setup_master+0x18>
    251c:	80 32       	cpi	r24, 0x20	; 32
    251e:	11 f0       	breq	.+4      	; 0x2524 <spi_setup_master+0x18>
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	19 f4       	brne	.+6      	; 0x252a <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	9d bd       	out	0x2d, r25	; 45
			break;
    2528:	01 c0       	rjmp	.+2      	; 0x252c <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    252a:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    252c:	80 32       	cpi	r24, 0x20	; 32
    252e:	69 f0       	breq	.+26     	; 0x254a <spi_setup_master+0x3e>
    2530:	28 f4       	brcc	.+10     	; 0x253c <spi_setup_master+0x30>
    2532:	88 30       	cpi	r24, 0x08	; 8
    2534:	71 f0       	breq	.+28     	; 0x2552 <spi_setup_master+0x46>
    2536:	80 31       	cpi	r24, 0x10	; 16
    2538:	61 f0       	breq	.+24     	; 0x2552 <spi_setup_master+0x46>
    253a:	0e c0       	rjmp	.+28     	; 0x2558 <spi_setup_master+0x4c>
    253c:	80 34       	cpi	r24, 0x40	; 64
    253e:	29 f0       	breq	.+10     	; 0x254a <spi_setup_master+0x3e>
    2540:	80 38       	cpi	r24, 0x80	; 128
    2542:	51 f4       	brne	.+20     	; 0x2558 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    2544:	8c b5       	in	r24, 0x2c	; 44
    2546:	81 60       	ori	r24, 0x01	; 1
    2548:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    254a:	8c b5       	in	r24, 0x2c	; 44
    254c:	82 60       	ori	r24, 0x02	; 2
    254e:	8c bd       	out	0x2c, r24	; 44
			break;
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2552:	8c b5       	in	r24, 0x2c	; 44
    2554:	81 60       	ori	r24, 0x01	; 1
    2556:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2558:	2c 98       	cbi	0x05, 4	; 5
    255a:	08 95       	ret

0000255c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    255c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    255e:	0d b4       	in	r0, 0x2d	; 45
    2560:	07 fe       	sbrs	r0, 7
    2562:	fd cf       	rjmp	.-6      	; 0x255e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2564:	8e b5       	in	r24, 0x2e	; 46
    2566:	08 95       	ret

00002568 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    2568:	9f 93       	push	r25
    256a:	8f 93       	push	r24
    256c:	7f 93       	push	r23
    256e:	6f 93       	push	r22
    2570:	89 e8       	ldi	r24, 0x89	; 137
    2572:	96 e0       	ldi	r25, 0x06	; 6
    2574:	9f 93       	push	r25
    2576:	8f 93       	push	r24
    2578:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	08 95       	ret

0000258a <normal_display_mode>:
    258a:	84 e8       	ldi	r24, 0x84	; 132
    258c:	96 e0       	ldi	r25, 0x06	; 6
    258e:	9f 93       	push	r25
    2590:	8f 93       	push	r24
    2592:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	08 95       	ret

0000259c <clear_terminal>:
    259c:	8f e7       	ldi	r24, 0x7F	; 127
    259e:	96 e0       	ldi	r25, 0x06	; 6
    25a0:	9f 93       	push	r25
    25a2:	8f 93       	push	r24
    25a4:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	08 95       	ret

000025ae <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    25ae:	1f 92       	push	r1
    25b0:	8f 93       	push	r24
    25b2:	89 e7       	ldi	r24, 0x79	; 121
    25b4:	96 e0       	ldi	r25, 0x06	; 6
    25b6:	9f 93       	push	r25
    25b8:	8f 93       	push	r24
    25ba:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	08 95       	ret

000025c8 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    25c8:	82 e7       	ldi	r24, 0x72	; 114
    25ca:	96 e0       	ldi	r25, 0x06	; 6
    25cc:	9f 93       	push	r25
    25ce:	8f 93       	push	r24
    25d0:	0e 94 89 14 	call	0x2912	; 0x2912 <printf_P>
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	08 95       	ret

000025da <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    25da:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <clockTicks>
    25de:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <clockTicks+0x1>
    25e2:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <clockTicks+0x2>
    25e6:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    25ea:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    25ec:	8c e7       	ldi	r24, 0x7C	; 124
    25ee:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    25f0:	82 e0       	ldi	r24, 0x02	; 2
    25f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    25f8:	ee e6       	ldi	r30, 0x6E	; 110
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	82 60       	ori	r24, 0x02	; 2
    2600:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    2602:	85 b3       	in	r24, 0x15	; 21
    2604:	82 70       	andi	r24, 0x02	; 2
    2606:	85 bb       	out	0x15, r24	; 21
    2608:	08 95       	ret

0000260a <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    260a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    260c:	f8 94       	cli
	returnValue = clockTicks;
    260e:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <clockTicks>
    2612:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <clockTicks+0x1>
    2616:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <clockTicks+0x2>
    261a:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <clockTicks+0x3>
	if(interruptsOn) {
    261e:	22 23       	and	r18, r18
    2620:	0c f4       	brge	.+2      	; 0x2624 <get_current_time+0x1a>
		sei();
    2622:	78 94       	sei
	}
	return returnValue;
}
    2624:	08 95       	ret

00002626 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    2626:	1f 92       	push	r1
    2628:	0f 92       	push	r0
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	0f 92       	push	r0
    262e:	11 24       	eor	r1, r1
    2630:	2f 93       	push	r18
    2632:	3f 93       	push	r19
    2634:	4f 93       	push	r20
    2636:	5f 93       	push	r21
    2638:	6f 93       	push	r22
    263a:	7f 93       	push	r23
    263c:	8f 93       	push	r24
    263e:	9f 93       	push	r25
    2640:	af 93       	push	r26
    2642:	bf 93       	push	r27
    2644:	ef 93       	push	r30
    2646:	ff 93       	push	r31
	/* Increment our clock tick count if pause status is 0 (i.e. Resumed) */
	if (is_paused() == 0){
    2648:	0e 94 2b 10 	call	0x2056	; 0x2056 <is_paused>
    264c:	81 11       	cpse	r24, r1
    264e:	13 c0       	rjmp	.+38     	; 0x2676 <__vector_16+0x50>
		clockTicks++;
    2650:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clockTicks>
    2654:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clockTicks+0x1>
    2658:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clockTicks+0x2>
    265c:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clockTicks+0x3>
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	a1 1d       	adc	r26, r1
    2664:	b1 1d       	adc	r27, r1
    2666:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <clockTicks>
    266a:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <clockTicks+0x1>
    266e:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <clockTicks+0x2>
    2672:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <clockTicks+0x3>
	}
}
    2676:	ff 91       	pop	r31
    2678:	ef 91       	pop	r30
    267a:	bf 91       	pop	r27
    267c:	af 91       	pop	r26
    267e:	9f 91       	pop	r25
    2680:	8f 91       	pop	r24
    2682:	7f 91       	pop	r23
    2684:	6f 91       	pop	r22
    2686:	5f 91       	pop	r21
    2688:	4f 91       	pop	r20
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__divmodsi4>:
    2698:	05 2e       	mov	r0, r21
    269a:	97 fb       	bst	r25, 7
    269c:	1e f4       	brtc	.+6      	; 0x26a4 <__divmodsi4+0xc>
    269e:	00 94       	com	r0
    26a0:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__negsi2>
    26a4:	57 fd       	sbrc	r21, 7
    26a6:	07 d0       	rcall	.+14     	; 0x26b6 <__divmodsi4_neg2>
    26a8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__udivmodsi4>
    26ac:	07 fc       	sbrc	r0, 7
    26ae:	03 d0       	rcall	.+6      	; 0x26b6 <__divmodsi4_neg2>
    26b0:	4e f4       	brtc	.+18     	; 0x26c4 <__divmodsi4_exit>
    26b2:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__negsi2>

000026b6 <__divmodsi4_neg2>:
    26b6:	50 95       	com	r21
    26b8:	40 95       	com	r20
    26ba:	30 95       	com	r19
    26bc:	21 95       	neg	r18
    26be:	3f 4f       	sbci	r19, 0xFF	; 255
    26c0:	4f 4f       	sbci	r20, 0xFF	; 255
    26c2:	5f 4f       	sbci	r21, 0xFF	; 255

000026c4 <__divmodsi4_exit>:
    26c4:	08 95       	ret

000026c6 <__negsi2>:
    26c6:	90 95       	com	r25
    26c8:	80 95       	com	r24
    26ca:	70 95       	com	r23
    26cc:	61 95       	neg	r22
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	8f 4f       	sbci	r24, 0xFF	; 255
    26d2:	9f 4f       	sbci	r25, 0xFF	; 255
    26d4:	08 95       	ret

000026d6 <__tablejump2__>:
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	05 90       	lpm	r0, Z+
    26dc:	f4 91       	lpm	r31, Z
    26de:	e0 2d       	mov	r30, r0
    26e0:	09 94       	ijmp

000026e2 <__udivmodsi4>:
    26e2:	a1 e2       	ldi	r26, 0x21	; 33
    26e4:	1a 2e       	mov	r1, r26
    26e6:	aa 1b       	sub	r26, r26
    26e8:	bb 1b       	sub	r27, r27
    26ea:	fd 01       	movw	r30, r26
    26ec:	0d c0       	rjmp	.+26     	; 0x2708 <__udivmodsi4_ep>

000026ee <__udivmodsi4_loop>:
    26ee:	aa 1f       	adc	r26, r26
    26f0:	bb 1f       	adc	r27, r27
    26f2:	ee 1f       	adc	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	a2 17       	cp	r26, r18
    26f8:	b3 07       	cpc	r27, r19
    26fa:	e4 07       	cpc	r30, r20
    26fc:	f5 07       	cpc	r31, r21
    26fe:	20 f0       	brcs	.+8      	; 0x2708 <__udivmodsi4_ep>
    2700:	a2 1b       	sub	r26, r18
    2702:	b3 0b       	sbc	r27, r19
    2704:	e4 0b       	sbc	r30, r20
    2706:	f5 0b       	sbc	r31, r21

00002708 <__udivmodsi4_ep>:
    2708:	66 1f       	adc	r22, r22
    270a:	77 1f       	adc	r23, r23
    270c:	88 1f       	adc	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	1a 94       	dec	r1
    2712:	69 f7       	brne	.-38     	; 0x26ee <__udivmodsi4_loop>
    2714:	60 95       	com	r22
    2716:	70 95       	com	r23
    2718:	80 95       	com	r24
    271a:	90 95       	com	r25
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	bd 01       	movw	r22, r26
    2722:	cf 01       	movw	r24, r30
    2724:	08 95       	ret

00002726 <random_r>:
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	ec 01       	movw	r28, r24
    273c:	68 81       	ld	r22, Y
    273e:	79 81       	ldd	r23, Y+1	; 0x01
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	9b 81       	ldd	r25, Y+3	; 0x03
    2744:	61 15       	cp	r22, r1
    2746:	71 05       	cpc	r23, r1
    2748:	81 05       	cpc	r24, r1
    274a:	91 05       	cpc	r25, r1
    274c:	21 f4       	brne	.+8      	; 0x2756 <random_r+0x30>
    274e:	64 e2       	ldi	r22, 0x24	; 36
    2750:	79 ed       	ldi	r23, 0xD9	; 217
    2752:	8b e5       	ldi	r24, 0x5B	; 91
    2754:	97 e0       	ldi	r25, 0x07	; 7
    2756:	2d e1       	ldi	r18, 0x1D	; 29
    2758:	33 ef       	ldi	r19, 0xF3	; 243
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divmodsi4>
    2762:	49 01       	movw	r8, r18
    2764:	5a 01       	movw	r10, r20
    2766:	9b 01       	movw	r18, r22
    2768:	ac 01       	movw	r20, r24
    276a:	a7 ea       	ldi	r26, 0xA7	; 167
    276c:	b1 e4       	ldi	r27, 0x41	; 65
    276e:	0e 94 77 17 	call	0x2eee	; 0x2eee <__muluhisi3>
    2772:	6b 01       	movw	r12, r22
    2774:	7c 01       	movw	r14, r24
    2776:	ac ee       	ldi	r26, 0xEC	; 236
    2778:	b4 ef       	ldi	r27, 0xF4	; 244
    277a:	a5 01       	movw	r20, r10
    277c:	94 01       	movw	r18, r8
    277e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__mulohisi3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	8c 0d       	add	r24, r12
    2788:	9d 1d       	adc	r25, r13
    278a:	ae 1d       	adc	r26, r14
    278c:	bf 1d       	adc	r27, r15
    278e:	b7 ff       	sbrs	r27, 7
    2790:	03 c0       	rjmp	.+6      	; 0x2798 <random_r+0x72>
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	a1 09       	sbc	r26, r1
    2796:	b0 48       	sbci	r27, 0x80	; 128
    2798:	88 83       	st	Y, r24
    279a:	99 83       	std	Y+1, r25	; 0x01
    279c:	aa 83       	std	Y+2, r26	; 0x02
    279e:	bb 83       	std	Y+3, r27	; 0x03
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	9f 77       	andi	r25, 0x7F	; 127
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	bf 90       	pop	r11
    27b4:	af 90       	pop	r10
    27b6:	9f 90       	pop	r9
    27b8:	8f 90       	pop	r8
    27ba:	08 95       	ret

000027bc <random>:
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    27d0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    27d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    27d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    27dc:	61 15       	cp	r22, r1
    27de:	71 05       	cpc	r23, r1
    27e0:	81 05       	cpc	r24, r1
    27e2:	91 05       	cpc	r25, r1
    27e4:	21 f4       	brne	.+8      	; 0x27ee <random+0x32>
    27e6:	64 e2       	ldi	r22, 0x24	; 36
    27e8:	79 ed       	ldi	r23, 0xD9	; 217
    27ea:	8b e5       	ldi	r24, 0x5B	; 91
    27ec:	97 e0       	ldi	r25, 0x07	; 7
    27ee:	2d e1       	ldi	r18, 0x1D	; 29
    27f0:	33 ef       	ldi	r19, 0xF3	; 243
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	50 e0       	ldi	r21, 0x00	; 0
    27f6:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divmodsi4>
    27fa:	49 01       	movw	r8, r18
    27fc:	5a 01       	movw	r10, r20
    27fe:	9b 01       	movw	r18, r22
    2800:	ac 01       	movw	r20, r24
    2802:	a7 ea       	ldi	r26, 0xA7	; 167
    2804:	b1 e4       	ldi	r27, 0x41	; 65
    2806:	0e 94 77 17 	call	0x2eee	; 0x2eee <__muluhisi3>
    280a:	6b 01       	movw	r12, r22
    280c:	7c 01       	movw	r14, r24
    280e:	ac ee       	ldi	r26, 0xEC	; 236
    2810:	b4 ef       	ldi	r27, 0xF4	; 244
    2812:	a5 01       	movw	r20, r10
    2814:	94 01       	movw	r18, r8
    2816:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <__mulohisi3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8c 0d       	add	r24, r12
    2820:	9d 1d       	adc	r25, r13
    2822:	ae 1d       	adc	r26, r14
    2824:	bf 1d       	adc	r27, r15
    2826:	b7 ff       	sbrs	r27, 7
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <random+0x74>
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	a1 09       	sbc	r26, r1
    282e:	b0 48       	sbci	r27, 0x80	; 128
    2830:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2834:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2838:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    283c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	9f 77       	andi	r25, 0x7F	; 127
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	08 95       	ret

00002858 <srandom>:
    2858:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    285c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    2860:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    2864:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    2868:	08 95       	ret

0000286a <fgetc>:
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	ec 01       	movw	r28, r24
    2870:	2b 81       	ldd	r18, Y+3	; 0x03
    2872:	20 ff       	sbrs	r18, 0
    2874:	33 c0       	rjmp	.+102    	; 0x28dc <fgetc+0x72>
    2876:	26 ff       	sbrs	r18, 6
    2878:	0a c0       	rjmp	.+20     	; 0x288e <fgetc+0x24>
    287a:	2f 7b       	andi	r18, 0xBF	; 191
    287c:	2b 83       	std	Y+3, r18	; 0x03
    287e:	8e 81       	ldd	r24, Y+6	; 0x06
    2880:	9f 81       	ldd	r25, Y+7	; 0x07
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	9f 83       	std	Y+7, r25	; 0x07
    2886:	8e 83       	std	Y+6, r24	; 0x06
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	29 c0       	rjmp	.+82     	; 0x28e0 <fgetc+0x76>
    288e:	22 ff       	sbrs	r18, 2
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <fgetc+0x46>
    2892:	e8 81       	ld	r30, Y
    2894:	f9 81       	ldd	r31, Y+1	; 0x01
    2896:	80 81       	ld	r24, Z
    2898:	08 2e       	mov	r0, r24
    289a:	00 0c       	add	r0, r0
    289c:	99 0b       	sbc	r25, r25
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	19 f4       	brne	.+6      	; 0x28a8 <fgetc+0x3e>
    28a2:	20 62       	ori	r18, 0x20	; 32
    28a4:	2b 83       	std	Y+3, r18	; 0x03
    28a6:	1a c0       	rjmp	.+52     	; 0x28dc <fgetc+0x72>
    28a8:	31 96       	adiw	r30, 0x01	; 1
    28aa:	f9 83       	std	Y+1, r31	; 0x01
    28ac:	e8 83       	st	Y, r30
    28ae:	0e c0       	rjmp	.+28     	; 0x28cc <fgetc+0x62>
    28b0:	ea 85       	ldd	r30, Y+10	; 0x0a
    28b2:	fb 85       	ldd	r31, Y+11	; 0x0b
    28b4:	09 95       	icall
    28b6:	97 ff       	sbrs	r25, 7
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <fgetc+0x62>
    28ba:	2b 81       	ldd	r18, Y+3	; 0x03
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	11 f0       	breq	.+4      	; 0x28c4 <fgetc+0x5a>
    28c0:	80 e2       	ldi	r24, 0x20	; 32
    28c2:	01 c0       	rjmp	.+2      	; 0x28c6 <fgetc+0x5c>
    28c4:	80 e1       	ldi	r24, 0x10	; 16
    28c6:	82 2b       	or	r24, r18
    28c8:	8b 83       	std	Y+3, r24	; 0x03
    28ca:	08 c0       	rjmp	.+16     	; 0x28dc <fgetc+0x72>
    28cc:	2e 81       	ldd	r18, Y+6	; 0x06
    28ce:	3f 81       	ldd	r19, Y+7	; 0x07
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	3f 83       	std	Y+7, r19	; 0x07
    28d6:	2e 83       	std	Y+6, r18	; 0x06
    28d8:	99 27       	eor	r25, r25
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <fgetc+0x76>
    28dc:	8f ef       	ldi	r24, 0xFF	; 255
    28de:	9f ef       	ldi	r25, 0xFF	; 255
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	08 95       	ret

000028e6 <printf>:
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e7       	ldi	r30, 0x79	; 121
    28ec:	f4 e1       	ldi	r31, 0x14	; 20
    28ee:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__prologue_saves__+0x20>
    28f2:	ae 01       	movw	r20, r28
    28f4:	4b 5f       	subi	r20, 0xFB	; 251
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255
    28f8:	fa 01       	movw	r30, r20
    28fa:	61 91       	ld	r22, Z+
    28fc:	71 91       	ld	r23, Z+
    28fe:	af 01       	movw	r20, r30
    2900:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <__iob+0x2>
    2904:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <__iob+0x3>
    2908:	0e 94 e6 14 	call	0x29cc	; 0x29cc <vfprintf>
    290c:	e2 e0       	ldi	r30, 0x02	; 2
    290e:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__epilogue_restores__+0x20>

00002912 <printf_P>:
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ef e8       	ldi	r30, 0x8F	; 143
    2918:	f4 e1       	ldi	r31, 0x14	; 20
    291a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__prologue_saves__+0x1c>
    291e:	ae 01       	movw	r20, r28
    2920:	49 5f       	subi	r20, 0xF9	; 249
    2922:	5f 4f       	sbci	r21, 0xFF	; 255
    2924:	da 01       	movw	r26, r20
    2926:	6d 91       	ld	r22, X+
    2928:	7d 91       	ld	r23, X+
    292a:	ad 01       	movw	r20, r26
    292c:	08 e0       	ldi	r16, 0x08	; 8
    292e:	14 e0       	ldi	r17, 0x04	; 4
    2930:	f8 01       	movw	r30, r16
    2932:	82 81       	ldd	r24, Z+2	; 0x02
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	dc 01       	movw	r26, r24
    2938:	13 96       	adiw	r26, 0x03	; 3
    293a:	2c 91       	ld	r18, X
    293c:	13 97       	sbiw	r26, 0x03	; 3
    293e:	28 60       	ori	r18, 0x08	; 8
    2940:	13 96       	adiw	r26, 0x03	; 3
    2942:	2c 93       	st	X, r18
    2944:	0e 94 e6 14 	call	0x29cc	; 0x29cc <vfprintf>
    2948:	d8 01       	movw	r26, r16
    294a:	12 96       	adiw	r26, 0x02	; 2
    294c:	ed 91       	ld	r30, X+
    294e:	fc 91       	ld	r31, X
    2950:	13 97       	sbiw	r26, 0x03	; 3
    2952:	23 81       	ldd	r18, Z+3	; 0x03
    2954:	27 7f       	andi	r18, 0xF7	; 247
    2956:	23 83       	std	Z+3, r18	; 0x03
    2958:	e4 e0       	ldi	r30, 0x04	; 4
    295a:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__epilogue_restores__+0x1c>

0000295e <putchar>:
    295e:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <__iob+0x2>
    2962:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <__iob+0x3>
    2966:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    296a:	08 95       	ret

0000296c <puts>:
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <__iob+0x2>
    2978:	f0 91 0b 04 	lds	r31, 0x040B	; 0x80040b <__iob+0x3>
    297c:	23 81       	ldd	r18, Z+3	; 0x03
    297e:	21 ff       	sbrs	r18, 1
    2980:	1b c0       	rjmp	.+54     	; 0x29b8 <puts+0x4c>
    2982:	8c 01       	movw	r16, r24
    2984:	d0 e0       	ldi	r29, 0x00	; 0
    2986:	c0 e0       	ldi	r28, 0x00	; 0
    2988:	f8 01       	movw	r30, r16
    298a:	81 91       	ld	r24, Z+
    298c:	8f 01       	movw	r16, r30
    298e:	60 91 0a 04 	lds	r22, 0x040A	; 0x80040a <__iob+0x2>
    2992:	70 91 0b 04 	lds	r23, 0x040B	; 0x80040b <__iob+0x3>
    2996:	db 01       	movw	r26, r22
    2998:	18 96       	adiw	r26, 0x08	; 8
    299a:	ed 91       	ld	r30, X+
    299c:	fc 91       	ld	r31, X
    299e:	19 97       	sbiw	r26, 0x09	; 9
    29a0:	88 23       	and	r24, r24
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <puts+0x44>
    29a4:	09 95       	icall
    29a6:	89 2b       	or	r24, r25
    29a8:	79 f3       	breq	.-34     	; 0x2988 <puts+0x1c>
    29aa:	df ef       	ldi	r29, 0xFF	; 255
    29ac:	cf ef       	ldi	r28, 0xFF	; 255
    29ae:	ec cf       	rjmp	.-40     	; 0x2988 <puts+0x1c>
    29b0:	8a e0       	ldi	r24, 0x0A	; 10
    29b2:	09 95       	icall
    29b4:	89 2b       	or	r24, r25
    29b6:	19 f0       	breq	.+6      	; 0x29be <puts+0x52>
    29b8:	8f ef       	ldi	r24, 0xFF	; 255
    29ba:	9f ef       	ldi	r25, 0xFF	; 255
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <puts+0x56>
    29be:	8d 2f       	mov	r24, r29
    29c0:	9c 2f       	mov	r25, r28
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	1f 91       	pop	r17
    29c8:	0f 91       	pop	r16
    29ca:	08 95       	ret

000029cc <vfprintf>:
    29cc:	ab e0       	ldi	r26, 0x0B	; 11
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ec ee       	ldi	r30, 0xEC	; 236
    29d2:	f4 e1       	ldi	r31, 0x14	; 20
    29d4:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <__prologue_saves__>
    29d8:	6c 01       	movw	r12, r24
    29da:	7b 01       	movw	r14, r22
    29dc:	8a 01       	movw	r16, r20
    29de:	fc 01       	movw	r30, r24
    29e0:	17 82       	std	Z+7, r1	; 0x07
    29e2:	16 82       	std	Z+6, r1	; 0x06
    29e4:	83 81       	ldd	r24, Z+3	; 0x03
    29e6:	81 ff       	sbrs	r24, 1
    29e8:	cc c1       	rjmp	.+920    	; 0x2d82 <vfprintf+0x3b6>
    29ea:	ce 01       	movw	r24, r28
    29ec:	01 96       	adiw	r24, 0x01	; 1
    29ee:	3c 01       	movw	r6, r24
    29f0:	f6 01       	movw	r30, r12
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	f7 01       	movw	r30, r14
    29f6:	93 fd       	sbrc	r25, 3
    29f8:	85 91       	lpm	r24, Z+
    29fa:	93 ff       	sbrs	r25, 3
    29fc:	81 91       	ld	r24, Z+
    29fe:	7f 01       	movw	r14, r30
    2a00:	88 23       	and	r24, r24
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <vfprintf+0x3a>
    2a04:	ba c1       	rjmp	.+884    	; 0x2d7a <vfprintf+0x3ae>
    2a06:	85 32       	cpi	r24, 0x25	; 37
    2a08:	39 f4       	brne	.+14     	; 0x2a18 <vfprintf+0x4c>
    2a0a:	93 fd       	sbrc	r25, 3
    2a0c:	85 91       	lpm	r24, Z+
    2a0e:	93 ff       	sbrs	r25, 3
    2a10:	81 91       	ld	r24, Z+
    2a12:	7f 01       	movw	r14, r30
    2a14:	85 32       	cpi	r24, 0x25	; 37
    2a16:	29 f4       	brne	.+10     	; 0x2a22 <vfprintf+0x56>
    2a18:	b6 01       	movw	r22, r12
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2a20:	e7 cf       	rjmp	.-50     	; 0x29f0 <vfprintf+0x24>
    2a22:	91 2c       	mov	r9, r1
    2a24:	21 2c       	mov	r2, r1
    2a26:	31 2c       	mov	r3, r1
    2a28:	ff e1       	ldi	r31, 0x1F	; 31
    2a2a:	f3 15       	cp	r31, r3
    2a2c:	d8 f0       	brcs	.+54     	; 0x2a64 <vfprintf+0x98>
    2a2e:	8b 32       	cpi	r24, 0x2B	; 43
    2a30:	79 f0       	breq	.+30     	; 0x2a50 <vfprintf+0x84>
    2a32:	38 f4       	brcc	.+14     	; 0x2a42 <vfprintf+0x76>
    2a34:	80 32       	cpi	r24, 0x20	; 32
    2a36:	79 f0       	breq	.+30     	; 0x2a56 <vfprintf+0x8a>
    2a38:	83 32       	cpi	r24, 0x23	; 35
    2a3a:	a1 f4       	brne	.+40     	; 0x2a64 <vfprintf+0x98>
    2a3c:	23 2d       	mov	r18, r3
    2a3e:	20 61       	ori	r18, 0x10	; 16
    2a40:	1d c0       	rjmp	.+58     	; 0x2a7c <vfprintf+0xb0>
    2a42:	8d 32       	cpi	r24, 0x2D	; 45
    2a44:	61 f0       	breq	.+24     	; 0x2a5e <vfprintf+0x92>
    2a46:	80 33       	cpi	r24, 0x30	; 48
    2a48:	69 f4       	brne	.+26     	; 0x2a64 <vfprintf+0x98>
    2a4a:	23 2d       	mov	r18, r3
    2a4c:	21 60       	ori	r18, 0x01	; 1
    2a4e:	16 c0       	rjmp	.+44     	; 0x2a7c <vfprintf+0xb0>
    2a50:	83 2d       	mov	r24, r3
    2a52:	82 60       	ori	r24, 0x02	; 2
    2a54:	38 2e       	mov	r3, r24
    2a56:	e3 2d       	mov	r30, r3
    2a58:	e4 60       	ori	r30, 0x04	; 4
    2a5a:	3e 2e       	mov	r3, r30
    2a5c:	2a c0       	rjmp	.+84     	; 0x2ab2 <vfprintf+0xe6>
    2a5e:	f3 2d       	mov	r31, r3
    2a60:	f8 60       	ori	r31, 0x08	; 8
    2a62:	1d c0       	rjmp	.+58     	; 0x2a9e <vfprintf+0xd2>
    2a64:	37 fc       	sbrc	r3, 7
    2a66:	2d c0       	rjmp	.+90     	; 0x2ac2 <vfprintf+0xf6>
    2a68:	20 ed       	ldi	r18, 0xD0	; 208
    2a6a:	28 0f       	add	r18, r24
    2a6c:	2a 30       	cpi	r18, 0x0A	; 10
    2a6e:	40 f0       	brcs	.+16     	; 0x2a80 <vfprintf+0xb4>
    2a70:	8e 32       	cpi	r24, 0x2E	; 46
    2a72:	b9 f4       	brne	.+46     	; 0x2aa2 <vfprintf+0xd6>
    2a74:	36 fc       	sbrc	r3, 6
    2a76:	81 c1       	rjmp	.+770    	; 0x2d7a <vfprintf+0x3ae>
    2a78:	23 2d       	mov	r18, r3
    2a7a:	20 64       	ori	r18, 0x40	; 64
    2a7c:	32 2e       	mov	r3, r18
    2a7e:	19 c0       	rjmp	.+50     	; 0x2ab2 <vfprintf+0xe6>
    2a80:	36 fe       	sbrs	r3, 6
    2a82:	06 c0       	rjmp	.+12     	; 0x2a90 <vfprintf+0xc4>
    2a84:	8a e0       	ldi	r24, 0x0A	; 10
    2a86:	98 9e       	mul	r9, r24
    2a88:	20 0d       	add	r18, r0
    2a8a:	11 24       	eor	r1, r1
    2a8c:	92 2e       	mov	r9, r18
    2a8e:	11 c0       	rjmp	.+34     	; 0x2ab2 <vfprintf+0xe6>
    2a90:	ea e0       	ldi	r30, 0x0A	; 10
    2a92:	2e 9e       	mul	r2, r30
    2a94:	20 0d       	add	r18, r0
    2a96:	11 24       	eor	r1, r1
    2a98:	22 2e       	mov	r2, r18
    2a9a:	f3 2d       	mov	r31, r3
    2a9c:	f0 62       	ori	r31, 0x20	; 32
    2a9e:	3f 2e       	mov	r3, r31
    2aa0:	08 c0       	rjmp	.+16     	; 0x2ab2 <vfprintf+0xe6>
    2aa2:	8c 36       	cpi	r24, 0x6C	; 108
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <vfprintf+0xe2>
    2aa6:	83 2d       	mov	r24, r3
    2aa8:	80 68       	ori	r24, 0x80	; 128
    2aaa:	38 2e       	mov	r3, r24
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <vfprintf+0xe6>
    2aae:	88 36       	cpi	r24, 0x68	; 104
    2ab0:	41 f4       	brne	.+16     	; 0x2ac2 <vfprintf+0xf6>
    2ab2:	f7 01       	movw	r30, r14
    2ab4:	93 fd       	sbrc	r25, 3
    2ab6:	85 91       	lpm	r24, Z+
    2ab8:	93 ff       	sbrs	r25, 3
    2aba:	81 91       	ld	r24, Z+
    2abc:	7f 01       	movw	r14, r30
    2abe:	81 11       	cpse	r24, r1
    2ac0:	b3 cf       	rjmp	.-154    	; 0x2a28 <vfprintf+0x5c>
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	9f 7d       	andi	r25, 0xDF	; 223
    2ac6:	95 54       	subi	r25, 0x45	; 69
    2ac8:	93 30       	cpi	r25, 0x03	; 3
    2aca:	28 f4       	brcc	.+10     	; 0x2ad6 <vfprintf+0x10a>
    2acc:	0c 5f       	subi	r16, 0xFC	; 252
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	9f e3       	ldi	r25, 0x3F	; 63
    2ad2:	99 83       	std	Y+1, r25	; 0x01
    2ad4:	0d c0       	rjmp	.+26     	; 0x2af0 <vfprintf+0x124>
    2ad6:	83 36       	cpi	r24, 0x63	; 99
    2ad8:	31 f0       	breq	.+12     	; 0x2ae6 <vfprintf+0x11a>
    2ada:	83 37       	cpi	r24, 0x73	; 115
    2adc:	71 f0       	breq	.+28     	; 0x2afa <vfprintf+0x12e>
    2ade:	83 35       	cpi	r24, 0x53	; 83
    2ae0:	09 f0       	breq	.+2      	; 0x2ae4 <vfprintf+0x118>
    2ae2:	59 c0       	rjmp	.+178    	; 0x2b96 <vfprintf+0x1ca>
    2ae4:	21 c0       	rjmp	.+66     	; 0x2b28 <vfprintf+0x15c>
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	80 81       	ld	r24, Z
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	0e 5f       	subi	r16, 0xFE	; 254
    2aee:	1f 4f       	sbci	r17, 0xFF	; 255
    2af0:	88 24       	eor	r8, r8
    2af2:	83 94       	inc	r8
    2af4:	91 2c       	mov	r9, r1
    2af6:	53 01       	movw	r10, r6
    2af8:	13 c0       	rjmp	.+38     	; 0x2b20 <vfprintf+0x154>
    2afa:	28 01       	movw	r4, r16
    2afc:	f2 e0       	ldi	r31, 0x02	; 2
    2afe:	4f 0e       	add	r4, r31
    2b00:	51 1c       	adc	r5, r1
    2b02:	f8 01       	movw	r30, r16
    2b04:	a0 80       	ld	r10, Z
    2b06:	b1 80       	ldd	r11, Z+1	; 0x01
    2b08:	36 fe       	sbrs	r3, 6
    2b0a:	03 c0       	rjmp	.+6      	; 0x2b12 <vfprintf+0x146>
    2b0c:	69 2d       	mov	r22, r9
    2b0e:	70 e0       	ldi	r23, 0x00	; 0
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <vfprintf+0x14a>
    2b12:	6f ef       	ldi	r22, 0xFF	; 255
    2b14:	7f ef       	ldi	r23, 0xFF	; 255
    2b16:	c5 01       	movw	r24, r10
    2b18:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <strnlen>
    2b1c:	4c 01       	movw	r8, r24
    2b1e:	82 01       	movw	r16, r4
    2b20:	f3 2d       	mov	r31, r3
    2b22:	ff 77       	andi	r31, 0x7F	; 127
    2b24:	3f 2e       	mov	r3, r31
    2b26:	16 c0       	rjmp	.+44     	; 0x2b54 <vfprintf+0x188>
    2b28:	28 01       	movw	r4, r16
    2b2a:	22 e0       	ldi	r18, 0x02	; 2
    2b2c:	42 0e       	add	r4, r18
    2b2e:	51 1c       	adc	r5, r1
    2b30:	f8 01       	movw	r30, r16
    2b32:	a0 80       	ld	r10, Z
    2b34:	b1 80       	ldd	r11, Z+1	; 0x01
    2b36:	36 fe       	sbrs	r3, 6
    2b38:	03 c0       	rjmp	.+6      	; 0x2b40 <vfprintf+0x174>
    2b3a:	69 2d       	mov	r22, r9
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <vfprintf+0x178>
    2b40:	6f ef       	ldi	r22, 0xFF	; 255
    2b42:	7f ef       	ldi	r23, 0xFF	; 255
    2b44:	c5 01       	movw	r24, r10
    2b46:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <strnlen_P>
    2b4a:	4c 01       	movw	r8, r24
    2b4c:	f3 2d       	mov	r31, r3
    2b4e:	f0 68       	ori	r31, 0x80	; 128
    2b50:	3f 2e       	mov	r3, r31
    2b52:	82 01       	movw	r16, r4
    2b54:	33 fc       	sbrc	r3, 3
    2b56:	1b c0       	rjmp	.+54     	; 0x2b8e <vfprintf+0x1c2>
    2b58:	82 2d       	mov	r24, r2
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 16       	cp	r8, r24
    2b5e:	99 06       	cpc	r9, r25
    2b60:	b0 f4       	brcc	.+44     	; 0x2b8e <vfprintf+0x1c2>
    2b62:	b6 01       	movw	r22, r12
    2b64:	80 e2       	ldi	r24, 0x20	; 32
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2b6c:	2a 94       	dec	r2
    2b6e:	f4 cf       	rjmp	.-24     	; 0x2b58 <vfprintf+0x18c>
    2b70:	f5 01       	movw	r30, r10
    2b72:	37 fc       	sbrc	r3, 7
    2b74:	85 91       	lpm	r24, Z+
    2b76:	37 fe       	sbrs	r3, 7
    2b78:	81 91       	ld	r24, Z+
    2b7a:	5f 01       	movw	r10, r30
    2b7c:	b6 01       	movw	r22, r12
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2b84:	21 10       	cpse	r2, r1
    2b86:	2a 94       	dec	r2
    2b88:	21 e0       	ldi	r18, 0x01	; 1
    2b8a:	82 1a       	sub	r8, r18
    2b8c:	91 08       	sbc	r9, r1
    2b8e:	81 14       	cp	r8, r1
    2b90:	91 04       	cpc	r9, r1
    2b92:	71 f7       	brne	.-36     	; 0x2b70 <vfprintf+0x1a4>
    2b94:	e8 c0       	rjmp	.+464    	; 0x2d66 <vfprintf+0x39a>
    2b96:	84 36       	cpi	r24, 0x64	; 100
    2b98:	11 f0       	breq	.+4      	; 0x2b9e <vfprintf+0x1d2>
    2b9a:	89 36       	cpi	r24, 0x69	; 105
    2b9c:	41 f5       	brne	.+80     	; 0x2bee <vfprintf+0x222>
    2b9e:	f8 01       	movw	r30, r16
    2ba0:	37 fe       	sbrs	r3, 7
    2ba2:	07 c0       	rjmp	.+14     	; 0x2bb2 <vfprintf+0x1e6>
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0c 5f       	subi	r16, 0xFC	; 252
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	08 c0       	rjmp	.+16     	; 0x2bc2 <vfprintf+0x1f6>
    2bb2:	60 81       	ld	r22, Z
    2bb4:	71 81       	ldd	r23, Z+1	; 0x01
    2bb6:	07 2e       	mov	r0, r23
    2bb8:	00 0c       	add	r0, r0
    2bba:	88 0b       	sbc	r24, r24
    2bbc:	99 0b       	sbc	r25, r25
    2bbe:	0e 5f       	subi	r16, 0xFE	; 254
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	f3 2d       	mov	r31, r3
    2bc4:	ff 76       	andi	r31, 0x6F	; 111
    2bc6:	3f 2e       	mov	r3, r31
    2bc8:	97 ff       	sbrs	r25, 7
    2bca:	09 c0       	rjmp	.+18     	; 0x2bde <vfprintf+0x212>
    2bcc:	90 95       	com	r25
    2bce:	80 95       	com	r24
    2bd0:	70 95       	com	r23
    2bd2:	61 95       	neg	r22
    2bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2bda:	f0 68       	ori	r31, 0x80	; 128
    2bdc:	3f 2e       	mov	r3, r31
    2bde:	2a e0       	ldi	r18, 0x0A	; 10
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	a3 01       	movw	r20, r6
    2be4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__ultoa_invert>
    2be8:	88 2e       	mov	r8, r24
    2bea:	86 18       	sub	r8, r6
    2bec:	45 c0       	rjmp	.+138    	; 0x2c78 <vfprintf+0x2ac>
    2bee:	85 37       	cpi	r24, 0x75	; 117
    2bf0:	31 f4       	brne	.+12     	; 0x2bfe <vfprintf+0x232>
    2bf2:	23 2d       	mov	r18, r3
    2bf4:	2f 7e       	andi	r18, 0xEF	; 239
    2bf6:	b2 2e       	mov	r11, r18
    2bf8:	2a e0       	ldi	r18, 0x0A	; 10
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	25 c0       	rjmp	.+74     	; 0x2c48 <vfprintf+0x27c>
    2bfe:	93 2d       	mov	r25, r3
    2c00:	99 7f       	andi	r25, 0xF9	; 249
    2c02:	b9 2e       	mov	r11, r25
    2c04:	8f 36       	cpi	r24, 0x6F	; 111
    2c06:	c1 f0       	breq	.+48     	; 0x2c38 <vfprintf+0x26c>
    2c08:	18 f4       	brcc	.+6      	; 0x2c10 <vfprintf+0x244>
    2c0a:	88 35       	cpi	r24, 0x58	; 88
    2c0c:	79 f0       	breq	.+30     	; 0x2c2c <vfprintf+0x260>
    2c0e:	b5 c0       	rjmp	.+362    	; 0x2d7a <vfprintf+0x3ae>
    2c10:	80 37       	cpi	r24, 0x70	; 112
    2c12:	19 f0       	breq	.+6      	; 0x2c1a <vfprintf+0x24e>
    2c14:	88 37       	cpi	r24, 0x78	; 120
    2c16:	21 f0       	breq	.+8      	; 0x2c20 <vfprintf+0x254>
    2c18:	b0 c0       	rjmp	.+352    	; 0x2d7a <vfprintf+0x3ae>
    2c1a:	e9 2f       	mov	r30, r25
    2c1c:	e0 61       	ori	r30, 0x10	; 16
    2c1e:	be 2e       	mov	r11, r30
    2c20:	b4 fe       	sbrs	r11, 4
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <vfprintf+0x272>
    2c24:	fb 2d       	mov	r31, r11
    2c26:	f4 60       	ori	r31, 0x04	; 4
    2c28:	bf 2e       	mov	r11, r31
    2c2a:	09 c0       	rjmp	.+18     	; 0x2c3e <vfprintf+0x272>
    2c2c:	34 fe       	sbrs	r3, 4
    2c2e:	0a c0       	rjmp	.+20     	; 0x2c44 <vfprintf+0x278>
    2c30:	29 2f       	mov	r18, r25
    2c32:	26 60       	ori	r18, 0x06	; 6
    2c34:	b2 2e       	mov	r11, r18
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <vfprintf+0x278>
    2c38:	28 e0       	ldi	r18, 0x08	; 8
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	05 c0       	rjmp	.+10     	; 0x2c48 <vfprintf+0x27c>
    2c3e:	20 e1       	ldi	r18, 0x10	; 16
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <vfprintf+0x27c>
    2c44:	20 e1       	ldi	r18, 0x10	; 16
    2c46:	32 e0       	ldi	r19, 0x02	; 2
    2c48:	f8 01       	movw	r30, r16
    2c4a:	b7 fe       	sbrs	r11, 7
    2c4c:	07 c0       	rjmp	.+14     	; 0x2c5c <vfprintf+0x290>
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	0c 5f       	subi	r16, 0xFC	; 252
    2c58:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5a:	06 c0       	rjmp	.+12     	; 0x2c68 <vfprintf+0x29c>
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 5f       	subi	r16, 0xFE	; 254
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	a3 01       	movw	r20, r6
    2c6a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <__ultoa_invert>
    2c6e:	88 2e       	mov	r8, r24
    2c70:	86 18       	sub	r8, r6
    2c72:	fb 2d       	mov	r31, r11
    2c74:	ff 77       	andi	r31, 0x7F	; 127
    2c76:	3f 2e       	mov	r3, r31
    2c78:	36 fe       	sbrs	r3, 6
    2c7a:	0d c0       	rjmp	.+26     	; 0x2c96 <vfprintf+0x2ca>
    2c7c:	23 2d       	mov	r18, r3
    2c7e:	2e 7f       	andi	r18, 0xFE	; 254
    2c80:	a2 2e       	mov	r10, r18
    2c82:	89 14       	cp	r8, r9
    2c84:	58 f4       	brcc	.+22     	; 0x2c9c <vfprintf+0x2d0>
    2c86:	34 fe       	sbrs	r3, 4
    2c88:	0b c0       	rjmp	.+22     	; 0x2ca0 <vfprintf+0x2d4>
    2c8a:	32 fc       	sbrc	r3, 2
    2c8c:	09 c0       	rjmp	.+18     	; 0x2ca0 <vfprintf+0x2d4>
    2c8e:	83 2d       	mov	r24, r3
    2c90:	8e 7e       	andi	r24, 0xEE	; 238
    2c92:	a8 2e       	mov	r10, r24
    2c94:	05 c0       	rjmp	.+10     	; 0x2ca0 <vfprintf+0x2d4>
    2c96:	b8 2c       	mov	r11, r8
    2c98:	a3 2c       	mov	r10, r3
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <vfprintf+0x2d6>
    2c9c:	b8 2c       	mov	r11, r8
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <vfprintf+0x2d6>
    2ca0:	b9 2c       	mov	r11, r9
    2ca2:	a4 fe       	sbrs	r10, 4
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <vfprintf+0x2f8>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e8 0d       	add	r30, r8
    2caa:	f1 1d       	adc	r31, r1
    2cac:	80 81       	ld	r24, Z
    2cae:	80 33       	cpi	r24, 0x30	; 48
    2cb0:	21 f4       	brne	.+8      	; 0x2cba <vfprintf+0x2ee>
    2cb2:	9a 2d       	mov	r25, r10
    2cb4:	99 7e       	andi	r25, 0xE9	; 233
    2cb6:	a9 2e       	mov	r10, r25
    2cb8:	09 c0       	rjmp	.+18     	; 0x2ccc <vfprintf+0x300>
    2cba:	a2 fe       	sbrs	r10, 2
    2cbc:	06 c0       	rjmp	.+12     	; 0x2cca <vfprintf+0x2fe>
    2cbe:	b3 94       	inc	r11
    2cc0:	b3 94       	inc	r11
    2cc2:	04 c0       	rjmp	.+8      	; 0x2ccc <vfprintf+0x300>
    2cc4:	8a 2d       	mov	r24, r10
    2cc6:	86 78       	andi	r24, 0x86	; 134
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <vfprintf+0x300>
    2cca:	b3 94       	inc	r11
    2ccc:	a3 fc       	sbrc	r10, 3
    2cce:	11 c0       	rjmp	.+34     	; 0x2cf2 <vfprintf+0x326>
    2cd0:	a0 fe       	sbrs	r10, 0
    2cd2:	06 c0       	rjmp	.+12     	; 0x2ce0 <vfprintf+0x314>
    2cd4:	b2 14       	cp	r11, r2
    2cd6:	88 f4       	brcc	.+34     	; 0x2cfa <vfprintf+0x32e>
    2cd8:	28 0c       	add	r2, r8
    2cda:	92 2c       	mov	r9, r2
    2cdc:	9b 18       	sub	r9, r11
    2cde:	0e c0       	rjmp	.+28     	; 0x2cfc <vfprintf+0x330>
    2ce0:	b2 14       	cp	r11, r2
    2ce2:	60 f4       	brcc	.+24     	; 0x2cfc <vfprintf+0x330>
    2ce4:	b6 01       	movw	r22, r12
    2ce6:	80 e2       	ldi	r24, 0x20	; 32
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2cee:	b3 94       	inc	r11
    2cf0:	f7 cf       	rjmp	.-18     	; 0x2ce0 <vfprintf+0x314>
    2cf2:	b2 14       	cp	r11, r2
    2cf4:	18 f4       	brcc	.+6      	; 0x2cfc <vfprintf+0x330>
    2cf6:	2b 18       	sub	r2, r11
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <vfprintf+0x332>
    2cfa:	98 2c       	mov	r9, r8
    2cfc:	21 2c       	mov	r2, r1
    2cfe:	a4 fe       	sbrs	r10, 4
    2d00:	10 c0       	rjmp	.+32     	; 0x2d22 <vfprintf+0x356>
    2d02:	b6 01       	movw	r22, r12
    2d04:	80 e3       	ldi	r24, 0x30	; 48
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2d0c:	a2 fe       	sbrs	r10, 2
    2d0e:	17 c0       	rjmp	.+46     	; 0x2d3e <vfprintf+0x372>
    2d10:	a1 fc       	sbrc	r10, 1
    2d12:	03 c0       	rjmp	.+6      	; 0x2d1a <vfprintf+0x34e>
    2d14:	88 e7       	ldi	r24, 0x78	; 120
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <vfprintf+0x352>
    2d1a:	88 e5       	ldi	r24, 0x58	; 88
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	b6 01       	movw	r22, r12
    2d20:	0c c0       	rjmp	.+24     	; 0x2d3a <vfprintf+0x36e>
    2d22:	8a 2d       	mov	r24, r10
    2d24:	86 78       	andi	r24, 0x86	; 134
    2d26:	59 f0       	breq	.+22     	; 0x2d3e <vfprintf+0x372>
    2d28:	a1 fe       	sbrs	r10, 1
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <vfprintf+0x364>
    2d2c:	8b e2       	ldi	r24, 0x2B	; 43
    2d2e:	01 c0       	rjmp	.+2      	; 0x2d32 <vfprintf+0x366>
    2d30:	80 e2       	ldi	r24, 0x20	; 32
    2d32:	a7 fc       	sbrc	r10, 7
    2d34:	8d e2       	ldi	r24, 0x2D	; 45
    2d36:	b6 01       	movw	r22, r12
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2d3e:	89 14       	cp	r8, r9
    2d40:	38 f4       	brcc	.+14     	; 0x2d50 <vfprintf+0x384>
    2d42:	b6 01       	movw	r22, r12
    2d44:	80 e3       	ldi	r24, 0x30	; 48
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2d4c:	9a 94       	dec	r9
    2d4e:	f7 cf       	rjmp	.-18     	; 0x2d3e <vfprintf+0x372>
    2d50:	8a 94       	dec	r8
    2d52:	f3 01       	movw	r30, r6
    2d54:	e8 0d       	add	r30, r8
    2d56:	f1 1d       	adc	r31, r1
    2d58:	80 81       	ld	r24, Z
    2d5a:	b6 01       	movw	r22, r12
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2d62:	81 10       	cpse	r8, r1
    2d64:	f5 cf       	rjmp	.-22     	; 0x2d50 <vfprintf+0x384>
    2d66:	22 20       	and	r2, r2
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <vfprintf+0x3a0>
    2d6a:	42 ce       	rjmp	.-892    	; 0x29f0 <vfprintf+0x24>
    2d6c:	b6 01       	movw	r22, r12
    2d6e:	80 e2       	ldi	r24, 0x20	; 32
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 dd 16 	call	0x2dba	; 0x2dba <fputc>
    2d76:	2a 94       	dec	r2
    2d78:	f6 cf       	rjmp	.-20     	; 0x2d66 <vfprintf+0x39a>
    2d7a:	f6 01       	movw	r30, r12
    2d7c:	86 81       	ldd	r24, Z+6	; 0x06
    2d7e:	97 81       	ldd	r25, Z+7	; 0x07
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <vfprintf+0x3ba>
    2d82:	8f ef       	ldi	r24, 0xFF	; 255
    2d84:	9f ef       	ldi	r25, 0xFF	; 255
    2d86:	2b 96       	adiw	r28, 0x0b	; 11
    2d88:	e2 e1       	ldi	r30, 0x12	; 18
    2d8a:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__epilogue_restores__>

00002d8e <strnlen_P>:
    2d8e:	fc 01       	movw	r30, r24
    2d90:	05 90       	lpm	r0, Z+
    2d92:	61 50       	subi	r22, 0x01	; 1
    2d94:	70 40       	sbci	r23, 0x00	; 0
    2d96:	01 10       	cpse	r0, r1
    2d98:	d8 f7       	brcc	.-10     	; 0x2d90 <strnlen_P+0x2>
    2d9a:	80 95       	com	r24
    2d9c:	90 95       	com	r25
    2d9e:	8e 0f       	add	r24, r30
    2da0:	9f 1f       	adc	r25, r31
    2da2:	08 95       	ret

00002da4 <strnlen>:
    2da4:	fc 01       	movw	r30, r24
    2da6:	61 50       	subi	r22, 0x01	; 1
    2da8:	70 40       	sbci	r23, 0x00	; 0
    2daa:	01 90       	ld	r0, Z+
    2dac:	01 10       	cpse	r0, r1
    2dae:	d8 f7       	brcc	.-10     	; 0x2da6 <strnlen+0x2>
    2db0:	80 95       	com	r24
    2db2:	90 95       	com	r25
    2db4:	8e 0f       	add	r24, r30
    2db6:	9f 1f       	adc	r25, r31
    2db8:	08 95       	ret

00002dba <fputc>:
    2dba:	0f 93       	push	r16
    2dbc:	1f 93       	push	r17
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
    2dc2:	fb 01       	movw	r30, r22
    2dc4:	23 81       	ldd	r18, Z+3	; 0x03
    2dc6:	21 fd       	sbrc	r18, 1
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <fputc+0x16>
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	9f ef       	ldi	r25, 0xFF	; 255
    2dce:	2c c0       	rjmp	.+88     	; 0x2e28 <fputc+0x6e>
    2dd0:	22 ff       	sbrs	r18, 2
    2dd2:	16 c0       	rjmp	.+44     	; 0x2e00 <fputc+0x46>
    2dd4:	46 81       	ldd	r20, Z+6	; 0x06
    2dd6:	57 81       	ldd	r21, Z+7	; 0x07
    2dd8:	24 81       	ldd	r18, Z+4	; 0x04
    2dda:	35 81       	ldd	r19, Z+5	; 0x05
    2ddc:	42 17       	cp	r20, r18
    2dde:	53 07       	cpc	r21, r19
    2de0:	44 f4       	brge	.+16     	; 0x2df2 <fputc+0x38>
    2de2:	a0 81       	ld	r26, Z
    2de4:	b1 81       	ldd	r27, Z+1	; 0x01
    2de6:	9d 01       	movw	r18, r26
    2de8:	2f 5f       	subi	r18, 0xFF	; 255
    2dea:	3f 4f       	sbci	r19, 0xFF	; 255
    2dec:	31 83       	std	Z+1, r19	; 0x01
    2dee:	20 83       	st	Z, r18
    2df0:	8c 93       	st	X, r24
    2df2:	26 81       	ldd	r18, Z+6	; 0x06
    2df4:	37 81       	ldd	r19, Z+7	; 0x07
    2df6:	2f 5f       	subi	r18, 0xFF	; 255
    2df8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfa:	37 83       	std	Z+7, r19	; 0x07
    2dfc:	26 83       	std	Z+6, r18	; 0x06
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <fputc+0x6e>
    2e00:	8b 01       	movw	r16, r22
    2e02:	ec 01       	movw	r28, r24
    2e04:	fb 01       	movw	r30, r22
    2e06:	00 84       	ldd	r0, Z+8	; 0x08
    2e08:	f1 85       	ldd	r31, Z+9	; 0x09
    2e0a:	e0 2d       	mov	r30, r0
    2e0c:	09 95       	icall
    2e0e:	89 2b       	or	r24, r25
    2e10:	e1 f6       	brne	.-72     	; 0x2dca <fputc+0x10>
    2e12:	d8 01       	movw	r26, r16
    2e14:	16 96       	adiw	r26, 0x06	; 6
    2e16:	8d 91       	ld	r24, X+
    2e18:	9c 91       	ld	r25, X
    2e1a:	17 97       	sbiw	r26, 0x07	; 7
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	17 96       	adiw	r26, 0x07	; 7
    2e20:	9c 93       	st	X, r25
    2e22:	8e 93       	st	-X, r24
    2e24:	16 97       	sbiw	r26, 0x06	; 6
    2e26:	ce 01       	movw	r24, r28
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	08 95       	ret

00002e32 <__ultoa_invert>:
    2e32:	fa 01       	movw	r30, r20
    2e34:	aa 27       	eor	r26, r26
    2e36:	28 30       	cpi	r18, 0x08	; 8
    2e38:	51 f1       	breq	.+84     	; 0x2e8e <__ultoa_invert+0x5c>
    2e3a:	20 31       	cpi	r18, 0x10	; 16
    2e3c:	81 f1       	breq	.+96     	; 0x2e9e <__ultoa_invert+0x6c>
    2e3e:	e8 94       	clt
    2e40:	6f 93       	push	r22
    2e42:	6e 7f       	andi	r22, 0xFE	; 254
    2e44:	6e 5f       	subi	r22, 0xFE	; 254
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	af 4f       	sbci	r26, 0xFF	; 255
    2e4e:	b1 e0       	ldi	r27, 0x01	; 1
    2e50:	3e d0       	rcall	.+124    	; 0x2ece <__ultoa_invert+0x9c>
    2e52:	b4 e0       	ldi	r27, 0x04	; 4
    2e54:	3c d0       	rcall	.+120    	; 0x2ece <__ultoa_invert+0x9c>
    2e56:	67 0f       	add	r22, r23
    2e58:	78 1f       	adc	r23, r24
    2e5a:	89 1f       	adc	r24, r25
    2e5c:	9a 1f       	adc	r25, r26
    2e5e:	a1 1d       	adc	r26, r1
    2e60:	68 0f       	add	r22, r24
    2e62:	79 1f       	adc	r23, r25
    2e64:	8a 1f       	adc	r24, r26
    2e66:	91 1d       	adc	r25, r1
    2e68:	a1 1d       	adc	r26, r1
    2e6a:	6a 0f       	add	r22, r26
    2e6c:	71 1d       	adc	r23, r1
    2e6e:	81 1d       	adc	r24, r1
    2e70:	91 1d       	adc	r25, r1
    2e72:	a1 1d       	adc	r26, r1
    2e74:	20 d0       	rcall	.+64     	; 0x2eb6 <__ultoa_invert+0x84>
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <__ultoa_invert+0x48>
    2e78:	68 94       	set
    2e7a:	3f 91       	pop	r19
    2e7c:	2a e0       	ldi	r18, 0x0A	; 10
    2e7e:	26 9f       	mul	r18, r22
    2e80:	11 24       	eor	r1, r1
    2e82:	30 19       	sub	r19, r0
    2e84:	30 5d       	subi	r19, 0xD0	; 208
    2e86:	31 93       	st	Z+, r19
    2e88:	de f6       	brtc	.-74     	; 0x2e40 <__ultoa_invert+0xe>
    2e8a:	cf 01       	movw	r24, r30
    2e8c:	08 95       	ret
    2e8e:	46 2f       	mov	r20, r22
    2e90:	47 70       	andi	r20, 0x07	; 7
    2e92:	40 5d       	subi	r20, 0xD0	; 208
    2e94:	41 93       	st	Z+, r20
    2e96:	b3 e0       	ldi	r27, 0x03	; 3
    2e98:	0f d0       	rcall	.+30     	; 0x2eb8 <__ultoa_invert+0x86>
    2e9a:	c9 f7       	brne	.-14     	; 0x2e8e <__ultoa_invert+0x5c>
    2e9c:	f6 cf       	rjmp	.-20     	; 0x2e8a <__ultoa_invert+0x58>
    2e9e:	46 2f       	mov	r20, r22
    2ea0:	4f 70       	andi	r20, 0x0F	; 15
    2ea2:	40 5d       	subi	r20, 0xD0	; 208
    2ea4:	4a 33       	cpi	r20, 0x3A	; 58
    2ea6:	18 f0       	brcs	.+6      	; 0x2eae <__ultoa_invert+0x7c>
    2ea8:	49 5d       	subi	r20, 0xD9	; 217
    2eaa:	31 fd       	sbrc	r19, 1
    2eac:	40 52       	subi	r20, 0x20	; 32
    2eae:	41 93       	st	Z+, r20
    2eb0:	02 d0       	rcall	.+4      	; 0x2eb6 <__ultoa_invert+0x84>
    2eb2:	a9 f7       	brne	.-22     	; 0x2e9e <__ultoa_invert+0x6c>
    2eb4:	ea cf       	rjmp	.-44     	; 0x2e8a <__ultoa_invert+0x58>
    2eb6:	b4 e0       	ldi	r27, 0x04	; 4
    2eb8:	a6 95       	lsr	r26
    2eba:	97 95       	ror	r25
    2ebc:	87 95       	ror	r24
    2ebe:	77 95       	ror	r23
    2ec0:	67 95       	ror	r22
    2ec2:	ba 95       	dec	r27
    2ec4:	c9 f7       	brne	.-14     	; 0x2eb8 <__ultoa_invert+0x86>
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	61 05       	cpc	r22, r1
    2eca:	71 05       	cpc	r23, r1
    2ecc:	08 95       	ret
    2ece:	9b 01       	movw	r18, r22
    2ed0:	ac 01       	movw	r20, r24
    2ed2:	0a 2e       	mov	r0, r26
    2ed4:	06 94       	lsr	r0
    2ed6:	57 95       	ror	r21
    2ed8:	47 95       	ror	r20
    2eda:	37 95       	ror	r19
    2edc:	27 95       	ror	r18
    2ede:	ba 95       	dec	r27
    2ee0:	c9 f7       	brne	.-14     	; 0x2ed4 <__ultoa_invert+0xa2>
    2ee2:	62 0f       	add	r22, r18
    2ee4:	73 1f       	adc	r23, r19
    2ee6:	84 1f       	adc	r24, r20
    2ee8:	95 1f       	adc	r25, r21
    2eea:	a0 1d       	adc	r26, r0
    2eec:	08 95       	ret

00002eee <__muluhisi3>:
    2eee:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__umulhisi3>
    2ef2:	a5 9f       	mul	r26, r21
    2ef4:	90 0d       	add	r25, r0
    2ef6:	b4 9f       	mul	r27, r20
    2ef8:	90 0d       	add	r25, r0
    2efa:	a4 9f       	mul	r26, r20
    2efc:	80 0d       	add	r24, r0
    2efe:	91 1d       	adc	r25, r1
    2f00:	11 24       	eor	r1, r1
    2f02:	08 95       	ret

00002f04 <__mulshisi3>:
    2f04:	b7 ff       	sbrs	r27, 7
    2f06:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__muluhisi3>

00002f0a <__mulohisi3>:
    2f0a:	0e 94 77 17 	call	0x2eee	; 0x2eee <__muluhisi3>
    2f0e:	82 1b       	sub	r24, r18
    2f10:	93 0b       	sbc	r25, r19
    2f12:	08 95       	ret

00002f14 <__prologue_saves__>:
    2f14:	2f 92       	push	r2
    2f16:	3f 92       	push	r3
    2f18:	4f 92       	push	r4
    2f1a:	5f 92       	push	r5
    2f1c:	6f 92       	push	r6
    2f1e:	7f 92       	push	r7
    2f20:	8f 92       	push	r8
    2f22:	9f 92       	push	r9
    2f24:	af 92       	push	r10
    2f26:	bf 92       	push	r11
    2f28:	cf 92       	push	r12
    2f2a:	df 92       	push	r13
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	ca 1b       	sub	r28, r26
    2f3e:	db 0b       	sbc	r29, r27
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	09 94       	ijmp

00002f4c <__epilogue_restores__>:
    2f4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2f4e:	39 88       	ldd	r3, Y+17	; 0x11
    2f50:	48 88       	ldd	r4, Y+16	; 0x10
    2f52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2f60:	c8 84       	ldd	r12, Y+8	; 0x08
    2f62:	df 80       	ldd	r13, Y+7	; 0x07
    2f64:	ee 80       	ldd	r14, Y+6	; 0x06
    2f66:	fd 80       	ldd	r15, Y+5	; 0x05
    2f68:	0c 81       	ldd	r16, Y+4	; 0x04
    2f6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2f6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2f6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2f70:	ce 0f       	add	r28, r30
    2f72:	d1 1d       	adc	r29, r1
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	ed 01       	movw	r28, r26
    2f80:	08 95       	ret

00002f82 <__umulhisi3>:
    2f82:	a2 9f       	mul	r26, r18
    2f84:	b0 01       	movw	r22, r0
    2f86:	b3 9f       	mul	r27, r19
    2f88:	c0 01       	movw	r24, r0
    2f8a:	a3 9f       	mul	r26, r19
    2f8c:	70 0d       	add	r23, r0
    2f8e:	81 1d       	adc	r24, r1
    2f90:	11 24       	eor	r1, r1
    2f92:	91 1d       	adc	r25, r1
    2f94:	b2 9f       	mul	r27, r18
    2f96:	70 0d       	add	r23, r0
    2f98:	81 1d       	adc	r24, r1
    2f9a:	11 24       	eor	r1, r1
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	08 95       	ret

00002fa0 <_exit>:
    2fa0:	f8 94       	cli

00002fa2 <__stop_program>:
    2fa2:	ff cf       	rjmp	.-2      	; 0x2fa2 <__stop_program>
