
pacman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  0000243a  000024ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000243a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  00800166  00800166  00002534  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000361d  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a2  00000000  00000000  00005f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c80  00000000  00000000  000072bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009d4  00000000  00000000  00008f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fec  00000000  00000000  00009914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002b1b  00000000  00000000  0000a900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0000d41b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__ctors_end>
       4:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       8:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      10:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      14:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_5>
      18:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      1c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      20:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      28:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      2c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      30:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      34:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      38:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      3c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      40:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_16>
      44:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      48:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      4c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      50:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__vector_20>
      54:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <__vector_21>
      58:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      5c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      60:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      64:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      68:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      6c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      70:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      74:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      78:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      7c:	08 06       	cpc	r0, r24
      7e:	17 06       	cpc	r1, r23
      80:	17 06       	cpc	r1, r23
      82:	17 06       	cpc	r1, r23
      84:	17 06       	cpc	r1, r23
      86:	17 06       	cpc	r1, r23
      88:	17 06       	cpc	r1, r23
      8a:	17 06       	cpc	r1, r23
      8c:	17 06       	cpc	r1, r23
      8e:	17 06       	cpc	r1, r23
      90:	17 06       	cpc	r1, r23
      92:	fd 05       	cpc	r31, r13
      94:	17 06       	cpc	r1, r23
      96:	85 05       	cpc	r24, r5
      98:	12 06       	cpc	r1, r18
      9a:	17 06       	cpc	r1, r23
      9c:	17 06       	cpc	r1, r23
      9e:	17 06       	cpc	r1, r23
      a0:	17 06       	cpc	r1, r23
      a2:	17 06       	cpc	r1, r23
      a4:	17 06       	cpc	r1, r23
      a6:	17 06       	cpc	r1, r23
      a8:	17 06       	cpc	r1, r23
      aa:	a6 05       	cpc	r26, r6
      ac:	17 06       	cpc	r1, r23
      ae:	17 06       	cpc	r1, r23
      b0:	17 06       	cpc	r1, r23
      b2:	17 06       	cpc	r1, r23
      b4:	d6 05       	cpc	r29, r6
      b6:	17 06       	cpc	r1, r23
      b8:	c9 05       	cpc	r28, r9
      ba:	17 06       	cpc	r1, r23
      bc:	17 06       	cpc	r1, r23
      be:	17 06       	cpc	r1, r23
      c0:	17 06       	cpc	r1, r23
      c2:	17 06       	cpc	r1, r23
      c4:	17 06       	cpc	r1, r23
      c6:	17 06       	cpc	r1, r23
      c8:	9b 05       	cpc	r25, r11
      ca:	17 06       	cpc	r1, r23
      cc:	17 06       	cpc	r1, r23
      ce:	17 06       	cpc	r1, r23
      d0:	bc 05       	cpc	r27, r12
      d2:	17 06       	cpc	r1, r23
      d4:	b1 05       	cpc	r27, r1
      d6:	17 06       	cpc	r1, r23
      d8:	17 06       	cpc	r1, r23
      da:	17 06       	cpc	r1, r23
      dc:	0d 06       	cpc	r0, r29
      de:	17 06       	cpc	r1, r23
      e0:	17 06       	cpc	r1, r23
      e2:	17 06       	cpc	r1, r23
      e4:	17 06       	cpc	r1, r23
      e6:	17 06       	cpc	r1, r23
      e8:	17 06       	cpc	r1, r23
      ea:	17 06       	cpc	r1, r23
      ec:	17 06       	cpc	r1, r23
      ee:	17 06       	cpc	r1, r23
      f0:	17 06       	cpc	r1, r23
      f2:	17 06       	cpc	r1, r23
      f4:	17 06       	cpc	r1, r23
      f6:	17 06       	cpc	r1, r23
      f8:	e3 05       	cpc	r30, r3
      fa:	17 06       	cpc	r1, r23
      fc:	17 06       	cpc	r1, r23
      fe:	17 06       	cpc	r1, r23
     100:	17 06       	cpc	r1, r23
     102:	17 06       	cpc	r1, r23
     104:	17 06       	cpc	r1, r23
     106:	17 06       	cpc	r1, r23
     108:	17 06       	cpc	r1, r23
     10a:	17 06       	cpc	r1, r23
     10c:	17 06       	cpc	r1, r23
     10e:	17 06       	cpc	r1, r23
     110:	17 06       	cpc	r1, r23
     112:	17 06       	cpc	r1, r23
     114:	17 06       	cpc	r1, r23
     116:	17 06       	cpc	r1, r23
     118:	17 06       	cpc	r1, r23
     11a:	17 06       	cpc	r1, r23
     11c:	17 06       	cpc	r1, r23
     11e:	17 06       	cpc	r1, r23
     120:	17 06       	cpc	r1, r23
     122:	17 06       	cpc	r1, r23
     124:	17 06       	cpc	r1, r23
     126:	17 06       	cpc	r1, r23
     128:	f0 05       	cpc	r31, r0
     12a:	17 06       	cpc	r1, r23
     12c:	17 06       	cpc	r1, r23
     12e:	17 06       	cpc	r1, r23
     130:	17 06       	cpc	r1, r23
     132:	17 06       	cpc	r1, r23
     134:	90 05       	cpc	r25, r0

00000136 <__trampolines_end>:
     136:	46 2d       	mov	r20, r6
     138:	2d 2d       	mov	r18, r13
     13a:	2d 2d       	mov	r18, r13
     13c:	2d 2d       	mov	r18, r13
     13e:	2d 2d       	mov	r18, r13
     140:	2d 2d       	mov	r18, r13
     142:	2d 2d       	mov	r18, r13
     144:	76 2d       	mov	r23, r6
     146:	76 2d       	mov	r23, r6
     148:	2d 2d       	mov	r18, r13
     14a:	2d 2d       	mov	r18, r13
     14c:	2d 2d       	mov	r18, r13
     14e:	2d 2d       	mov	r18, r13
     150:	2d 2d       	mov	r18, r13
     152:	2d 2d       	mov	r18, r13
     154:	37 7c       	andi	r19, 0xC7	; 199
     156:	2e 2e       	mov	r2, r30
     158:	2e 2e       	mov	r2, r30
     15a:	2e 2e       	mov	r2, r30
     15c:	2e 2e       	mov	r2, r30
     15e:	2e 2e       	mov	r2, r30
     160:	2e 2e       	mov	r2, r30
     162:	2e 7c       	andi	r18, 0xCE	; 206
     164:	20 7c       	andi	r18, 0xC0	; 192
     166:	2e 2e       	mov	r2, r30
     168:	2e 2e       	mov	r2, r30
     16a:	2e 2e       	mov	r2, r30
     16c:	2e 2e       	mov	r2, r30
     16e:	2e 2e       	mov	r2, r30
     170:	2e 2e       	mov	r2, r30
     172:	2e 7c       	andi	r18, 0xCE	; 206
     174:	7c 2e       	mov	r7, r28
     176:	46 2d       	mov	r20, r6
     178:	2d 2d       	mov	r18, r13
     17a:	37 2e       	mov	r3, r23
     17c:	46 2d       	mov	r20, r6
     17e:	2d 2d       	mov	r18, r13
     180:	37 2e       	mov	r3, r23
     182:	7c 20       	and	r7, r12
     184:	7c 2e       	mov	r7, r28
     186:	46 2d       	mov	r20, r6
     188:	2d 2d       	mov	r18, r13
     18a:	37 2e       	mov	r3, r23
     18c:	46 2d       	mov	r20, r6
     18e:	2d 2d       	mov	r18, r13
     190:	37 2e       	mov	r3, r23
     192:	7c 7c       	andi	r23, 0xCC	; 204
     194:	2e 7c       	andi	r18, 0xCE	; 206
     196:	20 20       	and	r2, r0
     198:	20 7c       	andi	r18, 0xC0	; 192
     19a:	2e 4c       	sbci	r18, 0xCE	; 206
     19c:	2d 2d       	mov	r18, r13
     19e:	2d 4a       	sbci	r18, 0xAD	; 173
     1a0:	2e 4c       	sbci	r18, 0xCE	; 206
     1a2:	2d 4a       	sbci	r18, 0xAD	; 173
     1a4:	2e 4c       	sbci	r18, 0xCE	; 206
     1a6:	2d 2d       	mov	r18, r13
     1a8:	2d 4a       	sbci	r18, 0xAD	; 173
     1aa:	2e 7c       	andi	r18, 0xCE	; 206
     1ac:	20 20       	and	r2, r0
     1ae:	20 7c       	andi	r18, 0xC0	; 192
     1b0:	2e 7c       	andi	r18, 0xCE	; 206
     1b2:	7c 2e       	mov	r7, r28
     1b4:	7c 20       	and	r7, r12
     1b6:	20 20       	and	r2, r0
     1b8:	7c 2e       	mov	r7, r28
     1ba:	2e 2e       	mov	r2, r30
     1bc:	2e 2e       	mov	r2, r30
     1be:	2e 2e       	mov	r2, r30
     1c0:	2e 2e       	mov	r2, r30
     1c2:	2e 2e       	mov	r2, r30
     1c4:	2e 2e       	mov	r2, r30
     1c6:	2e 2e       	mov	r2, r30
     1c8:	2e 2e       	mov	r2, r30
     1ca:	7c 20       	and	r7, r12
     1cc:	20 20       	and	r2, r0
     1ce:	7c 2e       	mov	r7, r28
     1d0:	7c 7c       	andi	r23, 0xCC	; 204
     1d2:	2e 7c       	andi	r18, 0xCE	; 206
     1d4:	20 20       	and	r2, r0
     1d6:	20 7c       	andi	r18, 0xC0	; 192
     1d8:	2e 46       	sbci	r18, 0x6E	; 110
     1da:	2d 2d       	mov	r18, r13
     1dc:	2d 37       	cpi	r18, 0x7D	; 125
     1de:	2e 46       	sbci	r18, 0x6E	; 110
     1e0:	2d 37       	cpi	r18, 0x7D	; 125
     1e2:	2e 46       	sbci	r18, 0x6E	; 110
     1e4:	2d 2d       	mov	r18, r13
     1e6:	2d 37       	cpi	r18, 0x7D	; 125
     1e8:	2e 7c       	andi	r18, 0xCE	; 206
     1ea:	20 20       	and	r2, r0
     1ec:	20 7c       	andi	r18, 0xC0	; 192
     1ee:	2e 7c       	andi	r18, 0xCE	; 206
     1f0:	7c 50       	subi	r23, 0x0C	; 12
     1f2:	4c 2d       	mov	r20, r12
     1f4:	2d 2d       	mov	r18, r13
     1f6:	4a 2e       	mov	r4, r26
     1f8:	4c 2d       	mov	r20, r12
     1fa:	2d 2d       	mov	r18, r13
     1fc:	4a 2e       	mov	r4, r26
     1fe:	4c 2d       	mov	r20, r12
     200:	4a 2e       	mov	r4, r26
     202:	4c 2d       	mov	r20, r12
     204:	2d 2d       	mov	r18, r13
     206:	4a 2e       	mov	r4, r26
     208:	4c 2d       	mov	r20, r12
     20a:	2d 2d       	mov	r18, r13
     20c:	4a 50       	subi	r20, 0x0A	; 10
     20e:	7c 7c       	andi	r23, 0xCC	; 204
     210:	2e 2e       	mov	r2, r30
     212:	2e 2e       	mov	r2, r30
     214:	2e 2e       	mov	r2, r30
     216:	2e 2e       	mov	r2, r30
     218:	2e 2e       	mov	r2, r30
     21a:	2e 2e       	mov	r2, r30
     21c:	2e 2e       	mov	r2, r30
     21e:	2e 2e       	mov	r2, r30
     220:	2e 2e       	mov	r2, r30
     222:	2e 2e       	mov	r2, r30
     224:	2e 2e       	mov	r2, r30
     226:	2e 2e       	mov	r2, r30
     228:	2e 2e       	mov	r2, r30
     22a:	2e 2e       	mov	r2, r30
     22c:	2e 7c       	andi	r18, 0xCE	; 206
     22e:	7c 2e       	mov	r7, r28
     230:	46 2d       	mov	r20, r6
     232:	2d 2d       	mov	r18, r13
     234:	37 2e       	mov	r3, r23
     236:	46 37       	cpi	r20, 0x76	; 118
     238:	2e 46       	sbci	r18, 0x6E	; 110
     23a:	2d 2d       	mov	r18, r13
     23c:	2d 2d       	mov	r18, r13
     23e:	2d 2d       	mov	r18, r13
     240:	2d 37       	cpi	r18, 0x7D	; 125
     242:	2e 46       	sbci	r18, 0x6E	; 110
     244:	37 2e       	mov	r3, r23
     246:	46 2d       	mov	r20, r6
     248:	2d 2d       	mov	r18, r13
     24a:	37 2e       	mov	r3, r23
     24c:	7c 7c       	andi	r23, 0xCC	; 204
     24e:	2e 4c       	sbci	r18, 0xCE	; 206
     250:	2d 2d       	mov	r18, r13
     252:	2d 4a       	sbci	r18, 0xAD	; 173
     254:	2e 7c       	andi	r18, 0xCE	; 206
     256:	7c 2e       	mov	r7, r28
     258:	4c 2d       	mov	r20, r12
     25a:	2d 37       	cpi	r18, 0x7D	; 125
     25c:	20 46       	sbci	r18, 0x60	; 96
     25e:	2d 2d       	mov	r18, r13
     260:	4a 2e       	mov	r4, r26
     262:	7c 7c       	andi	r23, 0xCC	; 204
     264:	2e 4c       	sbci	r18, 0xCE	; 206
     266:	2d 2d       	mov	r18, r13
     268:	2d 4a       	sbci	r18, 0xAD	; 173
     26a:	2e 7c       	andi	r18, 0xCE	; 206
     26c:	7c 2e       	mov	r7, r28
     26e:	2e 2e       	mov	r2, r30
     270:	2e 2e       	mov	r2, r30
     272:	2e 2e       	mov	r2, r30
     274:	7c 7c       	andi	r23, 0xCC	; 204
     276:	2e 2e       	mov	r2, r30
     278:	2e 2e       	mov	r2, r30
     27a:	7c 20       	and	r7, r12
     27c:	7c 2e       	mov	r7, r28
     27e:	2e 2e       	mov	r2, r30
     280:	2e 7c       	andi	r18, 0xCE	; 206
     282:	7c 2e       	mov	r7, r28
     284:	2e 2e       	mov	r2, r30
     286:	2e 2e       	mov	r2, r30
     288:	2e 2e       	mov	r2, r30
     28a:	7c 4c       	sbci	r23, 0xCC	; 204
     28c:	2d 2d       	mov	r18, r13
     28e:	2d 2d       	mov	r18, r13
     290:	2d 37       	cpi	r18, 0x7D	; 125
     292:	2e 7c       	andi	r18, 0xCE	; 206
     294:	4c 2d       	mov	r20, r12
     296:	2d 37       	cpi	r18, 0x7D	; 125
     298:	20 7c       	andi	r18, 0xC0	; 192
     29a:	20 7c       	andi	r18, 0xC0	; 192
     29c:	20 46       	sbci	r18, 0x60	; 96
     29e:	2d 2d       	mov	r18, r13
     2a0:	4a 7c       	andi	r20, 0xCA	; 202
     2a2:	2e 46       	sbci	r18, 0x6E	; 110
     2a4:	2d 2d       	mov	r18, r13
     2a6:	2d 2d       	mov	r18, r13
     2a8:	2d 4a       	sbci	r18, 0xAD	; 173
     2aa:	20 20       	and	r2, r0
     2ac:	20 20       	and	r2, r0
     2ae:	20 20       	and	r2, r0
     2b0:	7c 2e       	mov	r7, r28
     2b2:	7c 46       	sbci	r23, 0x6C	; 108
     2b4:	2d 2d       	mov	r18, r13
     2b6:	4a 20       	and	r4, r10
     2b8:	4c 2d       	mov	r20, r12
     2ba:	4a 20       	and	r4, r10
     2bc:	4c 2d       	mov	r20, r12
     2be:	2d 37       	cpi	r18, 0x7D	; 125
     2c0:	7c 2e       	mov	r7, r28
     2c2:	7c 20       	and	r7, r12
     2c4:	20 20       	and	r2, r0
     2c6:	20 20       	and	r2, r0
     2c8:	20 20       	and	r2, r0
     2ca:	20 20       	and	r2, r0
     2cc:	20 20       	and	r2, r0
     2ce:	20 7c       	andi	r18, 0xC0	; 192
     2d0:	2e 7c       	andi	r18, 0xCE	; 206
     2d2:	7c 20       	and	r7, r12
     2d4:	20 20       	and	r2, r0
     2d6:	20 20       	and	r2, r0
     2d8:	20 20       	and	r2, r0
     2da:	20 20       	and	r2, r0
     2dc:	20 20       	and	r2, r0
     2de:	7c 7c       	andi	r23, 0xCC	; 204
     2e0:	2e 7c       	andi	r18, 0xCE	; 206
     2e2:	20 20       	and	r2, r0
     2e4:	20 20       	and	r2, r0
     2e6:	20 20       	and	r2, r0
     2e8:	2d 2d       	mov	r18, r13
     2ea:	2d 2d       	mov	r18, r13
     2ec:	2d 2d       	mov	r18, r13
     2ee:	4a 2e       	mov	r4, r26
     2f0:	4c 4a       	sbci	r20, 0xAC	; 172
     2f2:	20 46       	sbci	r18, 0x60	; 96
     2f4:	2d 2d       	mov	r18, r13
     2f6:	20 20       	and	r2, r0
     2f8:	20 2d       	mov	r18, r0
     2fa:	2d 37       	cpi	r18, 0x7D	; 125
     2fc:	20 4c       	sbci	r18, 0xC0	; 192
     2fe:	4a 2e       	mov	r4, r26
     300:	4c 2d       	mov	r20, r12
     302:	2d 2d       	mov	r18, r13
     304:	2d 2d       	mov	r18, r13
     306:	2d 20       	and	r2, r13
     308:	20 20       	and	r2, r0
     30a:	20 20       	and	r2, r0
     30c:	20 20       	and	r2, r0
     30e:	2e 20       	and	r2, r14
     310:	20 20       	and	r2, r0
     312:	7c 20       	and	r7, r12
     314:	20 20       	and	r2, r0
     316:	20 20       	and	r2, r0
     318:	20 20       	and	r2, r0
     31a:	7c 20       	and	r7, r12
     31c:	20 20       	and	r2, r0
     31e:	2e 20       	and	r2, r14
     320:	20 20       	and	r2, r0
     322:	20 20       	and	r2, r0
     324:	20 20       	and	r2, r0
     326:	2d 2d       	mov	r18, r13
     328:	2d 2d       	mov	r18, r13
     32a:	2d 2d       	mov	r18, r13
     32c:	37 2e       	mov	r3, r23
     32e:	46 37       	cpi	r20, 0x76	; 118
     330:	20 4c       	sbci	r18, 0xC0	; 192
     332:	2d 2d       	mov	r18, r13
     334:	2d 2d       	mov	r18, r13
     336:	2d 2d       	mov	r18, r13
     338:	2d 4a       	sbci	r18, 0xAD	; 173
     33a:	20 46       	sbci	r18, 0x60	; 96
     33c:	37 2e       	mov	r3, r23
     33e:	46 2d       	mov	r20, r6
     340:	2d 2d       	mov	r18, r13
     342:	2d 2d       	mov	r18, r13
     344:	2d 20       	and	r2, r13
     346:	20 20       	and	r2, r0
     348:	20 20       	and	r2, r0
     34a:	20 7c       	andi	r18, 0xC0	; 192
     34c:	2e 7c       	andi	r18, 0xCE	; 206
     34e:	7c 20       	and	r7, r12
     350:	20 20       	and	r2, r0
     352:	20 20       	and	r2, r0
     354:	20 20       	and	r2, r0
     356:	20 20       	and	r2, r0
     358:	20 20       	and	r2, r0
     35a:	7c 7c       	andi	r23, 0xCC	; 204
     35c:	2e 7c       	andi	r18, 0xCE	; 206
     35e:	20 20       	and	r2, r0
     360:	20 20       	and	r2, r0
     362:	20 20       	and	r2, r0
     364:	20 20       	and	r2, r0
     366:	20 20       	and	r2, r0
     368:	20 20       	and	r2, r0
     36a:	7c 2e       	mov	r7, r28
     36c:	7c 7c       	andi	r23, 0xCC	; 204
     36e:	20 46       	sbci	r18, 0x60	; 96
     370:	2d 2d       	mov	r18, r13
     372:	2d 2d       	mov	r18, r13
     374:	2d 2d       	mov	r18, r13
     376:	2d 37       	cpi	r18, 0x7D	; 125
     378:	20 7c       	andi	r18, 0xC0	; 192
     37a:	7c 2e       	mov	r7, r28
     37c:	7c 20       	and	r7, r12
     37e:	20 20       	and	r2, r0
     380:	20 20       	and	r2, r0
     382:	20 46       	sbci	r18, 0x60	; 96
     384:	2d 2d       	mov	r18, r13
     386:	2d 2d       	mov	r18, r13
     388:	2d 4a       	sbci	r18, 0xAD	; 173
     38a:	2e 4c       	sbci	r18, 0xCE	; 206
     38c:	4a 20       	and	r4, r10
     38e:	4c 2d       	mov	r20, r12
     390:	2d 37       	cpi	r18, 0x7D	; 125
     392:	20 46       	sbci	r18, 0x60	; 96
     394:	2d 2d       	mov	r18, r13
     396:	4a 20       	and	r4, r10
     398:	4c 4a       	sbci	r20, 0xAC	; 172
     39a:	2e 4c       	sbci	r18, 0xCE	; 206
     39c:	2d 2d       	mov	r18, r13
     39e:	2d 2d       	mov	r18, r13
     3a0:	2d 37       	cpi	r18, 0x7D	; 125
     3a2:	7c 2e       	mov	r7, r28
     3a4:	2e 2e       	mov	r2, r30
     3a6:	2e 2e       	mov	r2, r30
     3a8:	2e 2e       	mov	r2, r30
     3aa:	2e 2e       	mov	r2, r30
     3ac:	2e 2e       	mov	r2, r30
     3ae:	2e 2e       	mov	r2, r30
     3b0:	7c 20       	and	r7, r12
     3b2:	7c 2e       	mov	r7, r28
     3b4:	2e 2e       	mov	r2, r30
     3b6:	2e 2e       	mov	r2, r30
     3b8:	2e 2e       	mov	r2, r30
     3ba:	2e 2e       	mov	r2, r30
     3bc:	2e 2e       	mov	r2, r30
     3be:	2e 2e       	mov	r2, r30
     3c0:	7c 7c       	andi	r23, 0xCC	; 204
     3c2:	2e 46       	sbci	r18, 0x6E	; 110
     3c4:	2d 2d       	mov	r18, r13
     3c6:	2d 37       	cpi	r18, 0x7D	; 125
     3c8:	2e 46       	sbci	r18, 0x6E	; 110
     3ca:	2d 2d       	mov	r18, r13
     3cc:	2d 37       	cpi	r18, 0x7D	; 125
     3ce:	2e 7c       	andi	r18, 0xCE	; 206
     3d0:	20 7c       	andi	r18, 0xC0	; 192
     3d2:	2e 46       	sbci	r18, 0x6E	; 110
     3d4:	2d 2d       	mov	r18, r13
     3d6:	2d 37       	cpi	r18, 0x7D	; 125
     3d8:	2e 46       	sbci	r18, 0x6E	; 110
     3da:	2d 2d       	mov	r18, r13
     3dc:	2d 37       	cpi	r18, 0x7D	; 125
     3de:	2e 7c       	andi	r18, 0xCE	; 206
     3e0:	7c 2e       	mov	r7, r28
     3e2:	4c 2d       	mov	r20, r12
     3e4:	37 20       	and	r3, r7
     3e6:	7c 2e       	mov	r7, r28
     3e8:	4c 2d       	mov	r20, r12
     3ea:	2d 2d       	mov	r18, r13
     3ec:	4a 2e       	mov	r4, r26
     3ee:	4c 2d       	mov	r20, r12
     3f0:	4a 2e       	mov	r4, r26
     3f2:	4c 2d       	mov	r20, r12
     3f4:	2d 2d       	mov	r18, r13
     3f6:	4a 2e       	mov	r4, r26
     3f8:	7c 20       	and	r7, r12
     3fa:	46 2d       	mov	r20, r6
     3fc:	4a 2e       	mov	r4, r26
     3fe:	7c 7c       	andi	r23, 0xCC	; 204
     400:	50 2e       	mov	r5, r16
     402:	2e 7c       	andi	r18, 0xCE	; 206
     404:	20 7c       	andi	r18, 0xC0	; 192
     406:	2e 2e       	mov	r2, r30
     408:	2e 2e       	mov	r2, r30
     40a:	2e 2e       	mov	r2, r30
     40c:	2e 2e       	mov	r2, r30
     40e:	20 2e       	mov	r2, r16
     410:	2e 2e       	mov	r2, r30
     412:	2e 2e       	mov	r2, r30
     414:	2e 2e       	mov	r2, r30
     416:	2e 7c       	andi	r18, 0xCE	; 206
     418:	20 7c       	andi	r18, 0xC0	; 192
     41a:	2e 2e       	mov	r2, r30
     41c:	50 7c       	andi	r21, 0xC0	; 192
     41e:	3e 2d       	mov	r19, r14
     420:	37 2e       	mov	r3, r23
     422:	7c 20       	and	r7, r12
     424:	7c 2e       	mov	r7, r28
     426:	46 37       	cpi	r20, 0x76	; 118
     428:	2e 46       	sbci	r18, 0x6E	; 110
     42a:	2d 2d       	mov	r18, r13
     42c:	2d 2d       	mov	r18, r13
     42e:	2d 2d       	mov	r18, r13
     430:	2d 37       	cpi	r18, 0x7D	; 125
     432:	2e 46       	sbci	r18, 0x6E	; 110
     434:	37 2e       	mov	r3, r23
     436:	7c 20       	and	r7, r12
     438:	7c 2e       	mov	r7, r28
     43a:	46 2d       	mov	r20, r6
     43c:	3c 3e       	cpi	r19, 0xEC	; 236
     43e:	2d 4a       	sbci	r18, 0xAD	; 173
     440:	2e 4c       	sbci	r18, 0xCE	; 206
     442:	2d 4a       	sbci	r18, 0xAD	; 173
     444:	2e 7c       	andi	r18, 0xCE	; 206
     446:	7c 2e       	mov	r7, r28
     448:	4c 2d       	mov	r20, r12
     44a:	2d 37       	cpi	r18, 0x7D	; 125
     44c:	20 46       	sbci	r18, 0x60	; 96
     44e:	2d 2d       	mov	r18, r13
     450:	4a 2e       	mov	r4, r26
     452:	7c 7c       	andi	r23, 0xCC	; 204
     454:	2e 4c       	sbci	r18, 0xCE	; 206
     456:	2d 4a       	sbci	r18, 0xAD	; 173
     458:	2e 4c       	sbci	r18, 0xCE	; 206
     45a:	2d 3c       	cpi	r18, 0xCD	; 205
     45c:	7c 2e       	mov	r7, r28
     45e:	2e 2e       	mov	r2, r30
     460:	2e 2e       	mov	r2, r30
     462:	2e 2e       	mov	r2, r30
     464:	7c 7c       	andi	r23, 0xCC	; 204
     466:	2e 2e       	mov	r2, r30
     468:	2e 2e       	mov	r2, r30
     46a:	7c 20       	and	r7, r12
     46c:	7c 2e       	mov	r7, r28
     46e:	2e 2e       	mov	r2, r30
     470:	2e 7c       	andi	r18, 0xCE	; 206
     472:	7c 2e       	mov	r7, r28
     474:	2e 2e       	mov	r2, r30
     476:	2e 2e       	mov	r2, r30
     478:	2e 2e       	mov	r2, r30
     47a:	7c 7c       	andi	r23, 0xCC	; 204
     47c:	2e 46       	sbci	r18, 0x6E	; 110
     47e:	2d 2d       	mov	r18, r13
     480:	2d 2d       	mov	r18, r13
     482:	2d 4a       	sbci	r18, 0xAD	; 173
     484:	4c 2d       	mov	r20, r12
     486:	2d 37       	cpi	r18, 0x7D	; 125
     488:	2e 7c       	andi	r18, 0xCE	; 206
     48a:	20 7c       	andi	r18, 0xC0	; 192
     48c:	2e 46       	sbci	r18, 0x6E	; 110
     48e:	2d 2d       	mov	r18, r13
     490:	4a 4c       	sbci	r20, 0xCA	; 202
     492:	2d 2d       	mov	r18, r13
     494:	2d 2d       	mov	r18, r13
     496:	2d 37       	cpi	r18, 0x7D	; 125
     498:	2e 7c       	andi	r18, 0xCE	; 206
     49a:	7c 2e       	mov	r7, r28
     49c:	4c 2d       	mov	r20, r12
     49e:	2d 2d       	mov	r18, r13
     4a0:	2d 2d       	mov	r18, r13
     4a2:	2d 2d       	mov	r18, r13
     4a4:	2d 2d       	mov	r18, r13
     4a6:	4a 2e       	mov	r4, r26
     4a8:	4c 2d       	mov	r20, r12
     4aa:	4a 2e       	mov	r4, r26
     4ac:	4c 2d       	mov	r20, r12
     4ae:	2d 2d       	mov	r18, r13
     4b0:	2d 2d       	mov	r18, r13
     4b2:	2d 2d       	mov	r18, r13
     4b4:	2d 2d       	mov	r18, r13
     4b6:	4a 2e       	mov	r4, r26
     4b8:	7c 7c       	andi	r23, 0xCC	; 204
     4ba:	2e 2e       	mov	r2, r30
     4bc:	2e 2e       	mov	r2, r30
     4be:	2e 2e       	mov	r2, r30
     4c0:	2e 2e       	mov	r2, r30
     4c2:	2e 2e       	mov	r2, r30
     4c4:	2e 2e       	mov	r2, r30
     4c6:	2e 2e       	mov	r2, r30
     4c8:	2e 2e       	mov	r2, r30
     4ca:	2e 2e       	mov	r2, r30
     4cc:	2e 2e       	mov	r2, r30
     4ce:	2e 2e       	mov	r2, r30
     4d0:	2e 2e       	mov	r2, r30
     4d2:	2e 2e       	mov	r2, r30
     4d4:	2e 2e       	mov	r2, r30
     4d6:	2e 7c       	andi	r18, 0xCE	; 206
     4d8:	4c 2d       	mov	r20, r12
     4da:	2d 2d       	mov	r18, r13
     4dc:	2d 2d       	mov	r18, r13
     4de:	2d 2d       	mov	r18, r13
     4e0:	2d 2d       	mov	r18, r13
     4e2:	2d 2d       	mov	r18, r13
     4e4:	2d 2d       	mov	r18, r13
     4e6:	2d 2d       	mov	r18, r13
     4e8:	2d 2d       	mov	r18, r13
     4ea:	2d 2d       	mov	r18, r13
     4ec:	2d 2d       	mov	r18, r13
     4ee:	2d 2d       	mov	r18, r13
     4f0:	2d 2d       	mov	r18, r13
     4f2:	2d 2d       	mov	r18, r13
     4f4:	2d 2d       	mov	r18, r13
     4f6:	4a 00       	.word	0x004a	; ????

000004f8 <__c.2297>:
     4f8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
     508:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000516 <__c.2295>:
     516:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000520 <__c.2287>:
     520:	50 75 73 68 20 61 20 62 75 74 74 6f 6e 20 6f 72     Push a button or
     530:	20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75 65      key to continue
	...

00000541 <__c.2285>:
     541:	4c 65 76 65 6c 20 63 6f 6d 70 6c 65 74 65 00        Level complete.

00000550 <__c.2260>:
     550:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     560:	6f 6a 65 63 74 20 62 79 20 3c 4a 75 61 6e 20 45     oject by <Juan E
     570:	73 70 61 72 65 73 3e 00                             spares>.

00000578 <__c.2258>:
     578:	50 61 63 2d 4d 61 6e 00                             Pac-Man.

00000580 <numbers>:
     580:	eb 05 e8 05 e4 05 e0 05 dc 05 d8 05 d4 05 d0 05     ................
     590:	cc 05 c8 05                                         ....

00000594 <letters>:
     594:	5a 06 56 06 52 06 4e 06 4a 06 46 06 42 06 3e 06     Z.V.R.N.J.F.B.>.
     5a4:	3b 06 37 06 33 06 2f 06 2a 06 26 06 22 06 1e 06     ;.7.3./.*.&."...
     5b4:	19 06 15 06 11 06 0c 06 08 06 03 06 fe 05 f9 05     ................
     5c4:	f4 05 ef 05                                         ....

000005c8 <cols_9>:
     5c8:	64 92 92 7d                                         d..}

000005cc <cols_8>:
     5cc:	6c 92 92 6d                                         l..m

000005d0 <cols_7>:
     5d0:	80 9e a0 c1                                         ....

000005d4 <cols_6>:
     5d4:	7c 92 92 4d                                         |..M

000005d8 <cols_5>:
     5d8:	e4 a2 a2 9d                                         ....

000005dc <cols_4>:
     5dc:	18 28 48 ff                                         .(H.

000005e0 <cols_3>:
     5e0:	44 92 92 6d                                         D..m

000005e4 <cols_2>:
     5e4:	46 8a 92 63                                         F..c

000005e8 <cols_1>:
     5e8:	42 fe 03                                            B..

000005eb <cols_0>:
     5eb:	7c 92 a2 7d                                         |..}

000005ef <cols_Z>:
     5ef:	86 8a 92 a2 c3                                      .....

000005f4 <cols_Y>:
     5f4:	e0 10 0e 10 e1                                      .....

000005f9 <cols_X>:
     5f9:	c6 28 10 28 c7                                      .(.(.

000005fe <cols_W>:
     5fe:	fc 02 1c 02 fd                                      .....

00000603 <cols_V>:
     603:	f8 04 02 04 f9                                      .....

00000608 <cols_U>:
     608:	fc 02 02 fd                                         ....

0000060c <cols_T>:
     60c:	80 80 fe 80 81                                      .....

00000611 <cols_S>:
     611:	64 92 92 4d                                         d..M

00000615 <cols_R>:
     615:	fe 90 98 67                                         ...g

00000619 <cols_Q>:
     619:	7c 82 8a 7c 03                                      |..|.

0000061e <cols_P>:
     61e:	fe 90 90 61                                         ...a

00000622 <cols_O>:
     622:	7c 82 82 7d                                         |..}

00000626 <cols_N>:
     626:	fe 20 10 ff                                         . ..

0000062a <cols_M>:
     62a:	fe 40 30 40 ff                                      .@0@.

0000062f <cols_L>:
     62f:	fe 02 02 03                                         ....

00000633 <cols_K>:
     633:	fe 10 28 c7                                         ..(.

00000637 <cols_J>:
     637:	04 02 02 fd                                         ....

0000063b <cols_I>:
     63b:	82 fe 83                                            ...

0000063e <cols_H>:
     63e:	fe 10 10 ff                                         ....

00000642 <cols_G>:
     642:	7c 82 92 5d                                         |..]

00000646 <cols_F>:
     646:	fe 90 90 81                                         ....

0000064a <cols_E>:
     64a:	fe 92 92 83                                         ....

0000064e <cols_D>:
     64e:	fe 82 82 7d                                         ...}

00000652 <cols_C>:
     652:	7c 82 82 45                                         |..E

00000656 <cols_B>:
     656:	fe 92 92 6d                                         ...m

0000065a <cols_A>:
     65a:	7e 90 90 7f                                         ~...

0000065e <__c.2082>:
     65e:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000665 <__c.2078>:
     665:	1b 5b 25 64 6d 00                                   .[%dm.

0000066b <__c.2068>:
     66b:	1b 5b 32 4a 00                                      .[2J.

00000670 <__c.2058>:
     670:	1b 5b 30 6d 00                                      .[0m.

00000675 <__c.2033>:
     675:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000067e <__ctors_end>:
     67e:	11 24       	eor	r1, r1
     680:	1f be       	out	0x3f, r1	; 63
     682:	cf ef       	ldi	r28, 0xFF	; 255
     684:	d8 e0       	ldi	r29, 0x08	; 8
     686:	de bf       	out	0x3e, r29	; 62
     688:	cd bf       	out	0x3d, r28	; 61

0000068a <__do_copy_data>:
     68a:	11 e0       	ldi	r17, 0x01	; 1
     68c:	a0 e0       	ldi	r26, 0x00	; 0
     68e:	b1 e0       	ldi	r27, 0x01	; 1
     690:	ea e3       	ldi	r30, 0x3A	; 58
     692:	f4 e2       	ldi	r31, 0x24	; 36
     694:	02 c0       	rjmp	.+4      	; 0x69a <__do_copy_data+0x10>
     696:	05 90       	lpm	r0, Z+
     698:	0d 92       	st	X+, r0
     69a:	a6 36       	cpi	r26, 0x66	; 102
     69c:	b1 07       	cpc	r27, r17
     69e:	d9 f7       	brne	.-10     	; 0x696 <__do_copy_data+0xc>

000006a0 <__do_clear_bss>:
     6a0:	23 e0       	ldi	r18, 0x03	; 3
     6a2:	a6 e6       	ldi	r26, 0x66	; 102
     6a4:	b1 e0       	ldi	r27, 0x01	; 1
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <.do_clear_bss_start>

000006a8 <.do_clear_bss_loop>:
     6a8:	1d 92       	st	X+, r1

000006aa <.do_clear_bss_start>:
     6aa:	a4 32       	cpi	r26, 0x24	; 36
     6ac:	b2 07       	cpc	r27, r18
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <.do_clear_bss_loop>
     6b0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <main>
     6b4:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <_exit>

000006b8 <__bad_interrupt>:
     6b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006bc <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     6bc:	e8 e6       	ldi	r30, 0x68	; 104
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	82 60       	ori	r24, 0x02	; 2
     6c4:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     6c6:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     6c8:	ec e6       	ldi	r30, 0x6C	; 108
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	8f 60       	ori	r24, 0x0F	; 15
     6d0:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     6d2:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
     6d6:	08 95       	ret

000006d8 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     6d8:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
     6dc:	18 16       	cp	r1, r24
     6de:	3c f5       	brge	.+78     	; 0x72e <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     6e0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     6e4:	6f b7       	in	r22, 0x3f	; 63
		cli();
     6e6:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     6e8:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <__data_end>
     6ec:	92 30       	cpi	r25, 0x02	; 2
     6ee:	b4 f0       	brlt	.+44     	; 0x71c <button_pushed+0x44>
     6f0:	21 e0       	ldi	r18, 0x01	; 1
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     6f6:	f9 01       	movw	r30, r18
     6f8:	e9 59       	subi	r30, 0x99	; 153
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	40 81       	ld	r20, Z
     6fe:	f9 01       	movw	r30, r18
     700:	ea 59       	subi	r30, 0x9A	; 154
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     706:	9f 5f       	subi	r25, 0xFF	; 255
     708:	29 2f       	mov	r18, r25
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <__data_end>
     710:	04 2e       	mov	r0, r20
     712:	00 0c       	add	r0, r0
     714:	55 0b       	sbc	r21, r21
     716:	24 17       	cp	r18, r20
     718:	35 07       	cpc	r19, r21
     71a:	6c f3       	brlt	.-38     	; 0x6f6 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     71c:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <__data_end>
     720:	91 50       	subi	r25, 0x01	; 1
     722:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <__data_end>
		
		if(interrupts_were_enabled) {
     726:	66 23       	and	r22, r22
     728:	1c f4       	brge	.+6      	; 0x730 <button_pushed+0x58>
			// Turn them back on again
			sei();
     72a:	78 94       	sei
     72c:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     72e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     730:	08 95       	ret

00000732 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     750:	43 b1       	in	r20, 0x03	; 3
     752:	4f 70       	andi	r20, 0x0F	; 15
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     758:	64 2f       	mov	r22, r20
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__data_end>
     760:	24 30       	cpi	r18, 0x04	; 4
     762:	04 f5       	brge	.+64     	; 0x7a4 <__vector_5+0x72>
     764:	9b 01       	movw	r18, r22
     766:	08 2e       	mov	r0, r24
     768:	02 c0       	rjmp	.+4      	; 0x76e <__vector_5+0x3c>
     76a:	35 95       	asr	r19
     76c:	27 95       	ror	r18
     76e:	0a 94       	dec	r0
     770:	e2 f7       	brpl	.-8      	; 0x76a <__vector_5+0x38>
     772:	20 ff       	sbrs	r18, 0
     774:	17 c0       	rjmp	.+46     	; 0x7a4 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     776:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	08 2e       	mov	r0, r24
     77e:	02 c0       	rjmp	.+4      	; 0x784 <__vector_5+0x52>
     780:	35 95       	asr	r19
     782:	27 95       	ror	r18
     784:	0a 94       	dec	r0
     786:	e2 f7       	brpl	.-8      	; 0x780 <__vector_5+0x4e>
     788:	20 fd       	sbrc	r18, 0
     78a:	0c c0       	rjmp	.+24     	; 0x7a4 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     78c:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <__data_end>
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	2e 0f       	add	r18, r30
     794:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <__data_end>
     798:	0e 2e       	mov	r0, r30
     79a:	00 0c       	add	r0, r0
     79c:	ff 0b       	sbc	r31, r31
     79e:	e9 59       	subi	r30, 0x99	; 153
     7a0:	fe 4f       	sbci	r31, 0xFE	; 254
     7a2:	80 83       	st	Z, r24
     7a4:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	91 05       	cpc	r25, r1
     7aa:	c1 f6       	brne	.-80     	; 0x75c <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     7ac:	40 93 6b 01 	sts	0x016B, r20	; 0x80016b <last_button_state>
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <is_ghost_home>:
}

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
     7ce:	6f 30       	cpi	r22, 0x0F	; 15
     7d0:	39 f4       	brne	.+14     	; 0x7e0 <is_ghost_home+0x12>
		return 1;
     7d2:	94 ef       	ldi	r25, 0xF4	; 244
     7d4:	98 0f       	add	r25, r24
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	97 30       	cpi	r25, 0x07	; 7
     7da:	60 f0       	brcs	.+24     	; 0x7f4 <is_ghost_home+0x26>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
     7e0:	6e 30       	cpi	r22, 0x0E	; 14
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <is_ghost_home+0x24>

// Returns true (1) if the given location is the home of the ghosts
// (this includes the entry to the home of the ghosts)
static int8_t is_ghost_home(uint8_t x, uint8_t y) {
	if(y == GHOST_HOME_Y && x >= GHOST_HOME_X_LEFT && x <= GHOST_HOME_X_RIGHT) {
		return 1;
     7e4:	92 ef       	ldi	r25, 0xF2	; 242
     7e6:	98 0f       	add	r25, r24
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	93 30       	cpi	r25, 0x03	; 3
     7ec:	18 f0       	brcs	.+6      	; 0x7f4 <is_ghost_home+0x26>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	08 95       	ret
	} else if(y == GHOST_HOME_ENTRY_Y && x >= GHOST_HOME_ENTRY_X_LEFT
			&& x <= GHOST_HOME_ENTRY_X_RIGHT) {
		return 1;
	} else {
		return 0;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7f4:	08 95       	ret

000007f6 <what_is_in_dirn>:

// what_is_in_dirn(x,y,direction) returns what is in the cell one from 
// the cell at (x,y) in the given direction - provided that is not off
// the game field. (If it is, we just indicate that a wall is there.)
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
	switch(direction) {
     7fe:	41 30       	cpi	r20, 0x01	; 1
     800:	91 f0       	breq	.+36     	; 0x826 <what_is_in_dirn+0x30>
     802:	28 f0       	brcs	.+10     	; 0x80e <what_is_in_dirn+0x18>
     804:	42 30       	cpi	r20, 0x02	; 2
     806:	49 f0       	breq	.+18     	; 0x81a <what_is_in_dirn+0x24>
     808:	43 30       	cpi	r20, 0x03	; 3
     80a:	99 f0       	breq	.+38     	; 0x832 <what_is_in_dirn+0x3c>
     80c:	5e c0       	rjmp	.+188    	; 0x8ca <what_is_in_dirn+0xd4>
		case DIRN_LEFT:
			if(x == 0) {
     80e:	88 23       	and	r24, r24
     810:	09 f4       	brne	.+2      	; 0x814 <what_is_in_dirn+0x1e>
     812:	5d c0       	rjmp	.+186    	; 0x8ce <what_is_in_dirn+0xd8>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     814:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = -1;
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	11 c0       	rjmp	.+34     	; 0x83c <what_is_in_dirn+0x46>
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
     81a:	8e 31       	cpi	r24, 0x1E	; 30
     81c:	09 f4       	brne	.+2      	; 0x820 <what_is_in_dirn+0x2a>
     81e:	59 c0       	rjmp	.+178    	; 0x8d2 <what_is_in_dirn+0xdc>
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
	int8_t delta_y = 0;
     820:	20 e0       	ldi	r18, 0x00	; 0
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
			}
			delta_x = 1;
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0b c0       	rjmp	.+22     	; 0x83c <what_is_in_dirn+0x46>
			break;
		case DIRN_UP:
			if(y == 0) {
     826:	66 23       	and	r22, r22
     828:	09 f4       	brne	.+2      	; 0x82c <what_is_in_dirn+0x36>
     82a:	55 c0       	rjmp	.+170    	; 0x8d6 <what_is_in_dirn+0xe0>
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = -1;
     82c:	2f ef       	ldi	r18, 0xFF	; 255
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	05 c0       	rjmp	.+10     	; 0x83c <what_is_in_dirn+0x46>
				return CELL_IS_WALL;
			}
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
     832:	6e 31       	cpi	r22, 0x1E	; 30
     834:	09 f4       	brne	.+2      	; 0x838 <what_is_in_dirn+0x42>
     836:	51 c0       	rjmp	.+162    	; 0x8da <what_is_in_dirn+0xe4>
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
			}
			delta_y = 1;
     838:	21 e0       	ldi	r18, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     83a:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
     83c:	62 0f       	add	r22, r18
     83e:	89 0f       	add	r24, r25
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
     840:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <pacman_x>
     844:	89 13       	cpse	r24, r25
     846:	05 c0       	rjmp	.+10     	; 0x852 <what_is_in_dirn+0x5c>
     848:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <pacman_y>
     84c:	69 17       	cp	r22, r25
     84e:	09 f4       	brne	.+2      	; 0x852 <what_is_in_dirn+0x5c>
     850:	46 c0       	rjmp	.+140    	; 0x8de <what_is_in_dirn+0xe8>
     852:	a5 e7       	ldi	r26, 0x75	; 117
     854:	b1 e0       	ldi	r27, 0x01	; 1
     856:	e1 e7       	ldi	r30, 0x71	; 113
     858:	f1 e0       	ldi	r31, 0x01	; 1
// We check for a wall first because this also checks that we're not at the edge
static int8_t what_is_in_dirn(uint8_t x, uint8_t y, uint8_t direction) {
	// delta_x and delta_y keep track of the change to the current x,y
	// - we set these based on the direction we're checking in. One of these
	// will end up as -1 or +1, the other will stay at 0.
	int8_t delta_x = 0;
     85a:	90 e0       	ldi	r25, 0x00	; 0
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     85c:	2d 91       	ld	r18, X+
     85e:	82 13       	cpse	r24, r18
     860:	04 c0       	rjmp	.+8      	; 0x86a <what_is_in_dirn+0x74>
     862:	20 81       	ld	r18, Z
     864:	62 17       	cp	r22, r18
     866:	09 f4       	brne	.+2      	; 0x86a <what_is_in_dirn+0x74>
     868:	3c c0       	rjmp	.+120    	; 0x8e2 <what_is_in_dirn+0xec>
     86a:	9f 5f       	subi	r25, 0xFF	; 255
     86c:	31 96       	adiw	r30, 0x01	; 1
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     86e:	94 30       	cpi	r25, 0x04	; 4
     870:	a9 f7       	brne	.-22     	; 0x85c <what_is_in_dirn+0x66>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     872:	46 2f       	mov	r20, r22
     874:	50 e0       	ldi	r21, 0x00	; 0
	// Extract the value for the column x (which is in bit x)
	if(dots_on_row & (1UL<< x)) {
     876:	28 2f       	mov	r18, r24
     878:	30 e0       	ldi	r19, 0x00	; 0

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     87a:	fa 01       	movw	r30, r20
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	e2 58       	subi	r30, 0x82	; 130
     886:	fe 4f       	sbci	r31, 0xFE	; 254
			if(x == ghost_x[i] && y == ghost_y[i]) {
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
     888:	c0 80       	ld	r12, Z
     88a:	d1 80       	ldd	r13, Z+1	; 0x01
     88c:	e2 80       	ldd	r14, Z+2	; 0x02
     88e:	f3 80       	ldd	r15, Z+3	; 0x03
     890:	08 2e       	mov	r0, r24
     892:	04 c0       	rjmp	.+8      	; 0x89c <what_is_in_dirn+0xa6>
     894:	f6 94       	lsr	r15
     896:	e7 94       	ror	r14
     898:	d7 94       	ror	r13
     89a:	c7 94       	ror	r12
     89c:	0a 94       	dec	r0
     89e:	d2 f7       	brpl	.-12     	; 0x894 <what_is_in_dirn+0x9e>
     8a0:	c0 fc       	sbrc	r12, 0
     8a2:	21 c0       	rjmp	.+66     	; 0x8e6 <what_is_in_dirn+0xf0>
//
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
     8a4:	9f e1       	ldi	r25, 0x1F	; 31
     8a6:	94 9f       	mul	r25, r20
     8a8:	f0 01       	movw	r30, r0
     8aa:	95 9f       	mul	r25, r21
     8ac:	f0 0d       	add	r31, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	e2 0f       	add	r30, r18
     8b2:	f3 1f       	adc	r31, r19
     8b4:	ea 5c       	subi	r30, 0xCA	; 202
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	e4 91       	lpm	r30, Z
	return (wall_character != ' ' && wall_character != '.'
			&& wall_character != 'P');
     8ba:	e0 32       	cpi	r30, 0x20	; 32
     8bc:	c1 f0       	breq	.+48     	; 0x8ee <what_is_in_dirn+0xf8>
// is_wall_at() returns true (1) if there is a wall at the given 
// game location, 0 otherwise
static int8_t is_wall_at (uint8_t x, uint8_t y) {
	// Get information about any wall in that position
	char wall_character = pgm_read_byte(& init_game_field[y * FIELD_WIDTH + x]);
	return (wall_character != ' ' && wall_character != '.'
     8be:	ee 32       	cpi	r30, 0x2E	; 46
     8c0:	b1 f0       	breq	.+44     	; 0x8ee <what_is_in_dirn+0xf8>
			&& wall_character != 'P');
     8c2:	e0 35       	cpi	r30, 0x50	; 80
     8c4:	a1 f0       	breq	.+40     	; 0x8ee <what_is_in_dirn+0xf8>
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
     8c6:	8e ef       	ldi	r24, 0xFE	; 254
     8c8:	17 c0       	rjmp	.+46     	; 0x8f8 <what_is_in_dirn+0x102>
			}
			delta_y = 1;
			break;
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
     8ca:	8e ef       	ldi	r24, 0xFE	; 254
     8cc:	15 c0       	rjmp	.+42     	; 0x8f8 <what_is_in_dirn+0x102>
	int8_t delta_y = 0;
	switch(direction) {
		case DIRN_LEFT:
			if(x == 0) {
				// We can't move left since we're at the edge
				return CELL_IS_WALL;
     8ce:	8e ef       	ldi	r24, 0xFE	; 254
     8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <what_is_in_dirn+0x102>
			delta_x = -1;
			break;
		case DIRN_RIGHT:
			if(x == FIELD_WIDTH-1) {
				// We can't move right since we're at the edge
				return CELL_IS_WALL;
     8d2:	8e ef       	ldi	r24, 0xFE	; 254
     8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <what_is_in_dirn+0x102>
			delta_x = 1;
			break;
		case DIRN_UP:
			if(y == 0) {
				// We can't move up since we're at the edge
				return CELL_IS_WALL;
     8d6:	8e ef       	ldi	r24, 0xFE	; 254
     8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <what_is_in_dirn+0x102>
			delta_y = -1;
			break;
		case DIRN_DOWN:
			if(y == FIELD_HEIGHT-1) {
				// We can't move down since we're at the edge
				return CELL_IS_WALL;
     8da:	8e ef       	ldi	r24, 0xFE	; 254
     8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <what_is_in_dirn+0x102>
// what_is_at(x,y) returns
//		CELL_EMPTY, CELL_CONTAINS_PACDOT, CELL_CONTAINS_PACMAN, CELL_IS_WALL,
//		CELL_IS_GHOST_HOME or the ghost number if the cell contains a ghost
static int8_t what_is_at(uint8_t x, uint8_t y) {
	if(is_pacman_at(x,y)) {
		return CELL_CONTAINS_PACMAN;
     8de:	8d ef       	ldi	r24, 0xFD	; 253
     8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <what_is_in_dirn+0x102>
	} else { // Check for ghosts next - these take priority over dots
		// BUT note that there may be a pacdot at the same location
		for(int8_t i = 0; i < NUM_GHOSTS; i++) {
			if(x == ghost_x[i] && y == ghost_y[i]) {
     8e2:	89 2f       	mov	r24, r25
     8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <what_is_in_dirn+0x102>
				return i;	// ghost number
			}
		}
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
     8e6:	8c ef       	ldi	r24, 0xFC	; 252
     8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <what_is_in_dirn+0x102>
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
		return CELL_IS_GHOST_HOME;
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <what_is_in_dirn+0x102>
	}
	if (is_pacdot_at(x,y)) {
		return CELL_CONTAINS_PACDOT;
	} else if (is_wall_at(x,y)) {
		return CELL_IS_WALL;
	} else if(is_ghost_home(x,y)) {
     8ee:	0e 94 e7 03 	call	0x7ce	; 0x7ce <is_ghost_home>
     8f2:	81 11       	cpse	r24, r1
     8f4:	fa cf       	rjmp	.-12     	; 0x8ea <what_is_in_dirn+0xf4>
		return CELL_IS_GHOST_HOME;
	}
	// If we get here, we haven't found anything else - cell is empty
	return CELL_EMPTY;
     8f6:	8b ef       	ldi	r24, 0xFB	; 251
		default:	// Shouldn't happen - we just return CELL_IS_WALL if
			// the direction given is invalid
			return CELL_IS_WALL;
	}	
	return what_is_at(x + delta_x, y + delta_y);
}
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <determine_dirns_ghost_can_move_in>:
// - a pacdot
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	08 2f       	mov	r16, r24
     914:	f6 2e       	mov	r15, r22
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
     916:	0e 94 e7 03 	call	0x7ce	; 0x7ce <is_ghost_home>
     91a:	e8 2e       	mov	r14, r24
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	d0 e0       	ldi	r29, 0x00	; 0
// - empty
// It can not move there if the cell is a ghost or a wall.
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
     920:	10 e0       	ldi	r17, 0x00	; 0
		if(adjacent_cell_contents < CELL_IS_WALL) {
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     922:	cc 24       	eor	r12, r12
     924:	c3 94       	inc	r12
     926:	d1 2c       	mov	r13, r1
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		int8_t adjacent_cell_contents = what_is_in_dirn(x,y,dirn);
     928:	4c 2f       	mov	r20, r28
     92a:	6f 2d       	mov	r22, r15
     92c:	80 2f       	mov	r24, r16
     92e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <what_is_in_dirn>
		
		if(adjacent_cell_contents < CELL_IS_WALL) {
     932:	8e 3f       	cpi	r24, 0xFE	; 254
     934:	4c f4       	brge	.+18     	; 0x948 <determine_dirns_ghost_can_move_in+0x46>
			// cell is empty or pacdot or pacman
			return_value |= (1 << dirn);
     936:	c6 01       	movw	r24, r12
     938:	0c 2e       	mov	r0, r28
     93a:	02 c0       	rjmp	.+4      	; 0x940 <determine_dirns_ghost_can_move_in+0x3e>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	0a 94       	dec	r0
     942:	e2 f7       	brpl	.-8      	; 0x93c <determine_dirns_ghost_can_move_in+0x3a>
     944:	18 2b       	or	r17, r24
     946:	0c c0       	rjmp	.+24     	; 0x960 <determine_dirns_ghost_can_move_in+0x5e>
		} else if(posn_is_in_ghost_home && adjacent_cell_contents == CELL_IS_GHOST_HOME) {
     948:	ee 20       	and	r14, r14
     94a:	51 f0       	breq	.+20     	; 0x960 <determine_dirns_ghost_can_move_in+0x5e>
     94c:	8f 3f       	cpi	r24, 0xFF	; 255
     94e:	41 f4       	brne	.+16     	; 0x960 <determine_dirns_ghost_can_move_in+0x5e>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
     950:	c6 01       	movw	r24, r12
     952:	0c 2e       	mov	r0, r28
     954:	02 c0       	rjmp	.+4      	; 0x95a <determine_dirns_ghost_can_move_in+0x58>
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	0a 94       	dec	r0
     95c:	e2 f7       	brpl	.-8      	; 0x956 <determine_dirns_ghost_can_move_in+0x54>
     95e:	18 2b       	or	r17, r24
     960:	21 96       	adiw	r28, 0x01	; 1
// If we're in the ghost home we can move to another cell in the ghost home.
// If we're outside the ghost home we can't move into it.
static int8_t determine_dirns_ghost_can_move_in(uint8_t x, uint8_t y) {
	int8_t return_value = 0;
	int8_t posn_is_in_ghost_home = is_ghost_home(x,y);
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
     962:	c4 30       	cpi	r28, 0x04	; 4
     964:	d1 05       	cpc	r29, r1
     966:	01 f7       	brne	.-64     	; 0x928 <determine_dirns_ghost_can_move_in+0x26>
			// we're in the ghost home and can move to an empty cell in the ghost home
			return_value |= (1 << dirn);
		} 
	}
	return return_value;
}
     968:	81 2f       	mov	r24, r17
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	08 95       	ret

0000097c <draw_pacman_at>:

// We draw the pac-man at the given location. The character used
// to draw the pac-man is based on the direction it is currently
// facing.
static void draw_pacman_at(uint8_t x, uint8_t y) {
	move_cursor(x+1,y+1);
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	set_display_attribute(PACMAN_COLOUR);
     98a:	81 e2       	ldi	r24, 0x21	; 33
     98c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <set_display_attribute>
	printf("%s", pacman_characters[pacman_direction]);
     990:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <pacman_direction>
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 5a       	subi	r30, 0xAE	; 174
     99c:	fe 4f       	sbci	r31, 0xFE	; 254
     99e:	81 81       	ldd	r24, Z+1	; 0x01
     9a0:	8f 93       	push	r24
     9a2:	80 81       	ld	r24, Z
     9a4:	8f 93       	push	r24
     9a6:	83 e1       	ldi	r24, 0x13	; 19
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
	normal_display_mode();
     9b2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <normal_display_mode>
}
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	08 95       	ret

000009c0 <draw_ghost_at>:

// ghostnum is assumed to be in the range 0..NUM_GHOSTS-1
// x and y values are assumed to be valid
static void draw_ghost_at(uint8_t ghostnum, uint8_t x, uint8_t y) {
     9c0:	0f 93       	push	r16
     9c2:	1f 93       	push	r17
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	18 2f       	mov	r17, r24
     9ca:	06 2f       	mov	r16, r22
	move_cursor(x+1,y+1);
     9cc:	c4 2f       	mov	r28, r20
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	86 2f       	mov	r24, r22
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
     9e0:	e1 2f       	mov	r30, r17
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	e6 5a       	subi	r30, 0xA6	; 166
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	80 81       	ld	r24, Z
     9ea:	0e 94 66 0d 	call	0x1acc	; 0x1acc <set_display_attribute>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     9ee:	cc 0f       	add	r28, r28
     9f0:	dd 1f       	adc	r29, r29
     9f2:	cc 0f       	add	r28, r28
     9f4:	dd 1f       	adc	r29, r29
     9f6:	c2 58       	subi	r28, 0x82	; 130
     9f8:	de 4f       	sbci	r29, 0xFE	; 254
	move_cursor(x+1,y+1);
	// change the background colour to the colour of the given ghost
	set_display_attribute(ghost_colours[ghostnum]);
	// If there is a pac-dot at this location we output a "." otherwise
	// we output a space (which will be shown as a block in reverse video)
	if(is_pacdot_at(x,y)) {
     9fa:	88 81       	ld	r24, Y
     9fc:	99 81       	ldd	r25, Y+1	; 0x01
     9fe:	aa 81       	ldd	r26, Y+2	; 0x02
     a00:	bb 81       	ldd	r27, Y+3	; 0x03
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <draw_ghost_at+0x4c>
     a04:	b6 95       	lsr	r27
     a06:	a7 95       	ror	r26
     a08:	97 95       	ror	r25
     a0a:	87 95       	ror	r24
     a0c:	0a 95       	dec	r16
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <draw_ghost_at+0x44>
     a10:	80 ff       	sbrs	r24, 0
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <draw_ghost_at+0x5e>
		printf(".");
     a14:	8e e2       	ldi	r24, 0x2E	; 46
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <draw_ghost_at+0x66>
	} else {
		printf(" ");
     a1e:	80 e2       	ldi	r24, 0x20	; 32
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
	}
	// Return to normal display mode to ensure we don't use this
	// background colour for any other printing
	normal_display_mode();
     a26:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <normal_display_mode>
}
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	1f 91       	pop	r17
     a30:	0f 91       	pop	r16
     a32:	08 95       	ret

00000a34 <erase_pixel_at>:

// Erase the pixel at the given location - presumably because the 
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	18 2f       	mov	r17, r24
	move_cursor(x+1, y+1);
     a3c:	c6 2f       	mov	r28, r22
     a3e:	d0 e0       	ldi	r29, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	be 01       	movw	r22, r28
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>

// is_pacdot_at() returns true (1) if there is a pacdot at the given
// game location, 0 otherwise
static int8_t is_pacdot_at (uint8_t x, uint8_t y) {
	// Get the details for the row
	uint32_t dots_on_row = pacdots[y];
     a4e:	cc 0f       	add	r28, r28
     a50:	dd 1f       	adc	r29, r29
     a52:	cc 0f       	add	r28, r28
     a54:	dd 1f       	adc	r29, r29
     a56:	c2 58       	subi	r28, 0x82	; 130
     a58:	de 4f       	sbci	r29, 0xFE	; 254
// ghost or the pac-man has moved out of this space. If there is 
// still a pac-dot at this space, we output a dot, otherwise we
// output a space. It is assumed that we are in normal video mode.
static void erase_pixel_at(uint8_t x, uint8_t y) {
	move_cursor(x+1, y+1);
	if(is_pacdot_at(x,y)) {
     a5a:	88 81       	ld	r24, Y
     a5c:	99 81       	ldd	r25, Y+1	; 0x01
     a5e:	aa 81       	ldd	r26, Y+2	; 0x02
     a60:	bb 81       	ldd	r27, Y+3	; 0x03
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <erase_pixel_at+0x38>
     a64:	b6 95       	lsr	r27
     a66:	a7 95       	ror	r26
     a68:	97 95       	ror	r25
     a6a:	87 95       	ror	r24
     a6c:	1a 95       	dec	r17
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <erase_pixel_at+0x30>
     a70:	80 ff       	sbrs	r24, 0
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <erase_pixel_at+0x4a>
		printf(".");
     a74:	8e e2       	ldi	r24, 0x2E	; 46
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <erase_pixel_at+0x52>
 	} else {
		printf(" ");
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
	 }
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	08 95       	ret

00000a8e <initialise_game_level>:
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
     a8e:	2f 92       	push	r2
     a90:	3f 92       	push	r3
     a92:	4f 92       	push	r4
     a94:	5f 92       	push	r5
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
}


// draw_initial_game_field()
static void draw_initial_game_field(void) {
	clear_terminal();
     ab2:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear_terminal>
	normal_display_mode();
     ab6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <normal_display_mode>
	hide_cursor();
     aba:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <hide_cursor>
	move_cursor(1,1);	// Start at top left
     abe:	61 e0       	ldi	r22, 0x01	; 1
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
     aca:	0f 2e       	mov	r0, r31
     acc:	f5 e5       	ldi	r31, 0x55	; 85
     ace:	6f 2e       	mov	r6, r31
     ad0:	f1 e0       	ldi	r31, 0x01	; 1
     ad2:	7f 2e       	mov	r7, r31
     ad4:	f0 2d       	mov	r31, r0
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     ad6:	0f 2e       	mov	r0, r31
     ad8:	fe e3       	ldi	r31, 0x3E	; 62
     ada:	2f 2e       	mov	r2, r31
     adc:	f1 e0       	ldi	r31, 0x01	; 1
     ade:	3f 2e       	mov	r3, r31
     ae0:	f0 2d       	mov	r31, r0
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f3 e1       	ldi	r31, 0x13	; 19
     ae6:	4f 2e       	mov	r4, r31
     ae8:	f1 e0       	ldi	r31, 0x01	; 1
     aea:	5f 2e       	mov	r5, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	b6 c0       	rjmp	.+364    	; 0xc5c <initialise_game_level+0x1ce>
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     af0:	f6 01       	movw	r30, r12
     af2:	84 91       	lpm	r24, Z
			switch(wall_character) {
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	b0 97       	sbiw	r30, 0x20	; 32
     afa:	ed 35       	cpi	r30, 0x5D	; 93
     afc:	f1 05       	cpc	r31, r1
     afe:	08 f0       	brcs	.+2      	; 0xb02 <initialise_game_level+0x74>
     b00:	96 c0       	rjmp	.+300    	; 0xc2e <initialise_game_level+0x1a0>
     b02:	e2 5c       	subi	r30, 0xC2	; 194
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	0c 94 e6 0d 	jmp	0x1bcc	; 0x1bcc <__tablejump2__>
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     b0a:	9f 92       	push	r9
     b0c:	8f 92       	push	r8
     b0e:	5f 92       	push	r5
     b10:	4f 92       	push	r4
     b12:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	8b c0       	rjmp	.+278    	; 0xc36 <initialise_game_level+0x1a8>
				case '|':	printf("%s", LINE_VERTICAL); break;
     b20:	bf 92       	push	r11
     b22:	af 92       	push	r10
     b24:	5f 92       	push	r5
     b26:	4f 92       	push	r4
     b28:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	80 c0       	rjmp	.+256    	; 0xc36 <initialise_game_level+0x1a8>
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	5f 92       	push	r5
     b3c:	4f 92       	push	r4
     b3e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	75 c0       	rjmp	.+234    	; 0xc36 <initialise_game_level+0x1a8>
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     b4c:	1f 93       	push	r17
     b4e:	0f 93       	push	r16
     b50:	5f 92       	push	r5
     b52:	4f 92       	push	r4
     b54:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	6a c0       	rjmp	.+212    	; 0xc36 <initialise_game_level+0x1a8>
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     b62:	ff 92       	push	r15
     b64:	ef 92       	push	r14
     b66:	5f 92       	push	r5
     b68:	4f 92       	push	r4
     b6a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	5f c0       	rjmp	.+190    	; 0xc36 <initialise_game_level+0x1a8>
				case 'J':	printf("%s", LINE_UP_AND_LEFT); break;
     b78:	8a e2       	ldi	r24, 0x2A	; 42
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	5f 92       	push	r5
     b82:	4f 92       	push	r4
     b84:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	52 c0       	rjmp	.+164    	; 0xc36 <initialise_game_level+0x1a8>
				case '>':	printf("%s", LINE_VERTICAL_AND_RIGHT); break;
     b92:	8e e2       	ldi	r24, 0x2E	; 46
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	5f 92       	push	r5
     b9c:	4f 92       	push	r4
     b9e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	45 c0       	rjmp	.+138    	; 0xc36 <initialise_game_level+0x1a8>
				case '<':	printf("%s", LINE_VERTICAL_AND_LEFT); break;
     bac:	82 e3       	ldi	r24, 0x32	; 50
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	5f 92       	push	r5
     bb6:	4f 92       	push	r4
     bb8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	38 c0       	rjmp	.+112    	; 0xc36 <initialise_game_level+0x1a8>
				case '^':	printf("%s", LINE_HORIZONTAL_AND_UP); break;
     bc6:	86 e3       	ldi	r24, 0x36	; 54
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	5f 92       	push	r5
     bd0:	4f 92       	push	r4
     bd2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	2b c0       	rjmp	.+86     	; 0xc36 <initialise_game_level+0x1a8>
				case 'v':	printf("%s", LINE_HORIZONTAL_AND_DOWN); break;
     be0:	8a e3       	ldi	r24, 0x3A	; 58
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	5f 92       	push	r5
     bea:	4f 92       	push	r4
     bec:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	1e c0       	rjmp	.+60     	; 0xc36 <initialise_game_level+0x1a8>
				case '+':	printf("%s", LINE_VERTICAL_AND_HORIZONTAL); break;
     bfa:	3f 92       	push	r3
     bfc:	2f 92       	push	r2
     bfe:	5f 92       	push	r5
     c00:	4f 92       	push	r4
     c02:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <printf>
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	13 c0       	rjmp	.+38     	; 0xc36 <initialise_game_level+0x1a8>
				case ' ':	printf(" "); break;
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     c18:	0e c0       	rjmp	.+28     	; 0xc36 <initialise_game_level+0x1a8>
				case 'P':	printf("."); break;	// power-pellet initially just implemented as a pac-dot
     c1a:	8e e2       	ldi	r24, 0x2E	; 46
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     c22:	09 c0       	rjmp	.+18     	; 0xc36 <initialise_game_level+0x1a8>
				case '.':	printf("."); break;	// pac-dot
     c24:	8e e2       	ldi	r24, 0x2E	; 46
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     c2c:	04 c0       	rjmp	.+8      	; 0xc36 <initialise_game_level+0x1a8>
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
     c2e:	88 e7       	ldi	r24, 0x78	; 120
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     c36:	ff ef       	ldi	r31, 0xFF	; 255
     c38:	cf 1a       	sub	r12, r31
     c3a:	df 0a       	sbc	r13, r31
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     c3c:	6c 14       	cp	r6, r12
     c3e:	7d 04       	cpc	r7, r13
     c40:	09 f0       	breq	.+2      	; 0xc44 <initialise_game_level+0x1b6>
     c42:	56 cf       	rjmp	.-340    	; 0xaf0 <initialise_game_level+0x62>
				case '.':	printf("."); break;	// pac-dot
				default:	printf("x"); break;	// shouldn't happen but we show an x in case it does
			}
			wall_array_index++;
		}
		printf("\n");
     c44:	8a e0       	ldi	r24, 0x0A	; 10
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <putchar>
     c4c:	2f e1       	ldi	r18, 0x1F	; 31
     c4e:	62 0e       	add	r6, r18
     c50:	71 1c       	adc	r7, r1
	clear_terminal();
	normal_display_mode();
	hide_cursor();
	move_cursor(1,1);	// Start at top left
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     c52:	86 e1       	ldi	r24, 0x16	; 22
     c54:	95 e0       	ldi	r25, 0x05	; 5
     c56:	86 15       	cp	r24, r6
     c58:	97 05       	cpc	r25, r7
     c5a:	d9 f0       	breq	.+54     	; 0xc92 <initialise_game_level+0x204>
     c5c:	63 01       	movw	r12, r6
     c5e:	9f e1       	ldi	r25, 0x1F	; 31
     c60:	c9 1a       	sub	r12, r25
     c62:	d1 08       	sbc	r13, r1
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
				case 'L':	printf("%s", LINE_UP_AND_RIGHT); break;
     c64:	0f 2e       	mov	r0, r31
     c66:	f6 e2       	ldi	r31, 0x26	; 38
     c68:	ef 2e       	mov	r14, r31
     c6a:	f1 e0       	ldi	r31, 0x01	; 1
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
				case '7':	printf("%s", LINE_DOWN_AND_LEFT); break;
     c70:	02 e2       	ldi	r16, 0x22	; 34
     c72:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
				case 'F':	printf("%s", LINE_DOWN_AND_RIGHT); break;
     c74:	ce e1       	ldi	r28, 0x1E	; 30
     c76:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
				case '|':	printf("%s", LINE_VERTICAL); break;
     c78:	0f 2e       	mov	r0, r31
     c7a:	fa e1       	ldi	r31, 0x1A	; 26
     c7c:	af 2e       	mov	r10, r31
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	bf 2e       	mov	r11, r31
     c82:	f0 2d       	mov	r31, r0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			switch(wall_character) {
				case '-':	printf("%s", LINE_HORIZONTAL); break;
     c84:	0f 2e       	mov	r0, r31
     c86:	f6 e1       	ldi	r31, 0x16	; 22
     c88:	8f 2e       	mov	r8, r31
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	9f 2e       	mov	r9, r31
     c8e:	f0 2d       	mov	r31, r0
     c90:	2f cf       	rjmp	.-418    	; 0xaf0 <initialise_game_level+0x62>
     c92:	ce e7       	ldi	r28, 0x7E	; 126
     c94:	d1 e0       	ldi	r29, 0x01	; 1
		printf("\n");
	}
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
			if(wall_character == '.' || wall_character == 'P') {
				pacdots[y] |= (1UL<<x);
     c9e:	81 2c       	mov	r8, r1
     ca0:	91 2c       	mov	r9, r1
     ca2:	54 01       	movw	r10, r8
     ca4:	83 94       	inc	r8
     ca6:	de 01       	movw	r26, r28

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
     ca8:	18 82       	st	Y, r1
     caa:	19 82       	std	Y+1, r1	; 0x01
     cac:	1a 82       	std	Y+2, r1	; 0x02
     cae:	1b 82       	std	Y+3, r1	; 0x03
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
			char wall_character = pgm_read_byte(&init_game_field[wall_array_index]);
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	ea 5c       	subi	r30, 0xCA	; 202
     cbc:	fe 4f       	sbci	r31, 0xFE	; 254
     cbe:	e4 91       	lpm	r30, Z
			if(wall_character == '.' || wall_character == 'P') {
     cc0:	ee 32       	cpi	r30, 0x2E	; 46
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <initialise_game_level+0x23a>
     cc4:	e0 35       	cpi	r30, 0x50	; 80
     cc6:	d1 f4       	brne	.+52     	; 0xcfc <initialise_game_level+0x26e>
				pacdots[y] |= (1UL<<x);
     cc8:	4d 90       	ld	r4, X+
     cca:	5d 90       	ld	r5, X+
     ccc:	6d 90       	ld	r6, X+
     cce:	7c 90       	ld	r7, X
     cd0:	13 97       	sbiw	r26, 0x03	; 3
     cd2:	75 01       	movw	r14, r10
     cd4:	64 01       	movw	r12, r8
     cd6:	08 2e       	mov	r0, r24
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <initialise_game_level+0x254>
     cda:	cc 0c       	add	r12, r12
     cdc:	dd 1c       	adc	r13, r13
     cde:	ee 1c       	adc	r14, r14
     ce0:	ff 1c       	adc	r15, r15
     ce2:	0a 94       	dec	r0
     ce4:	d2 f7       	brpl	.-12     	; 0xcda <initialise_game_level+0x24c>
     ce6:	c4 28       	or	r12, r4
     ce8:	d5 28       	or	r13, r5
     cea:	e6 28       	or	r14, r6
     cec:	f7 28       	or	r15, r7
     cee:	cd 92       	st	X+, r12
     cf0:	dd 92       	st	X+, r13
     cf2:	ed 92       	st	X+, r14
     cf4:	fc 92       	st	X, r15
     cf6:	13 97       	sbiw	r26, 0x03	; 3
				num_pacdots++;
     cf8:	4f 5f       	subi	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	01 96       	adiw	r24, 0x01	; 1
static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
		pacdots[y] = 0;
		for(uint8_t x = 0; x < FIELD_WIDTH; x++) {
     cfe:	8f 31       	cpi	r24, 0x1F	; 31
     d00:	91 05       	cpc	r25, r1
     d02:	c1 f6       	brne	.-80     	; 0xcb4 <initialise_game_level+0x226>
     d04:	21 5e       	subi	r18, 0xE1	; 225
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	24 96       	adiw	r28, 0x04	; 4
}

static void initialise_pacdots(void) {
	num_pacdots = 0;
	uint16_t wall_array_index = 0;  // row_number * 31 + column_number, i.e. 31*x+y
	for(uint8_t y = 0; y < FIELD_HEIGHT; y++) {
     d0a:	21 3c       	cpi	r18, 0xC1	; 193
     d0c:	e3 e0       	ldi	r30, 0x03	; 3
     d0e:	3e 07       	cpc	r19, r30
     d10:	51 f6       	brne	.-108    	; 0xca6 <initialise_game_level+0x218>
     d12:	50 93 7d 01 	sts	0x017D, r21	; 0x80017d <num_pacdots+0x1>
     d16:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <num_pacdots>
/////////////////////////////////////////////////////////////////////////
// Public Functions
void initialise_game_level(void) {
	draw_initial_game_field();
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
     d1a:	8f e0       	ldi	r24, 0x0F	; 15
     d1c:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <pacman_x>
	pacman_y = INIT_PACMAN_Y;
     d20:	87 e1       	ldi	r24, 0x17	; 23
     d22:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <pacman_y>
	pacman_direction = INIT_PACMAN_DIRN;
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <pacman_direction>
	draw_pacman_at(pacman_x, pacman_y);
     d2c:	67 e1       	ldi	r22, 0x17	; 23
     d2e:	8f e0       	ldi	r24, 0x0F	; 15
     d30:	0e 94 be 04 	call	0x97c	; 0x97c <draw_pacman_at>
     d34:	0f 2e       	mov	r0, r31
     d36:	f5 e7       	ldi	r31, 0x75	; 117
     d38:	af 2e       	mov	r10, r31
     d3a:	f1 e0       	ldi	r31, 0x01	; 1
     d3c:	bf 2e       	mov	r11, r31
     d3e:	f0 2d       	mov	r31, r0
     d40:	0f 2e       	mov	r0, r31
     d42:	f1 e7       	ldi	r31, 0x71	; 113
     d44:	cf 2e       	mov	r12, r31
     d46:	f1 e0       	ldi	r31, 0x01	; 1
     d48:	df 2e       	mov	r13, r31
     d4a:	f0 2d       	mov	r31, r0
     d4c:	0f 2e       	mov	r0, r31
     d4e:	fd e6       	ldi	r31, 0x6D	; 109
     d50:	ef 2e       	mov	r14, r31
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	ff 2e       	mov	r15, r31
     d56:	f0 2d       	mov	r31, r0
     d58:	dc e0       	ldi	r29, 0x0C	; 12
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
     d5c:	1f e0       	ldi	r17, 0x0F	; 15
		ghost_direction[i] = INIT_GHOST_DIRN;
     d5e:	02 e0       	ldi	r16, 0x02	; 2
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
     d60:	f5 01       	movw	r30, r10
     d62:	d1 93       	st	Z+, r29
     d64:	5f 01       	movw	r10, r30
		ghost_y[i] = GHOST_HOME_Y;
     d66:	f6 01       	movw	r30, r12
     d68:	11 93       	st	Z+, r17
     d6a:	6f 01       	movw	r12, r30
		ghost_direction[i] = INIT_GHOST_DIRN;
     d6c:	f7 01       	movw	r30, r14
     d6e:	01 93       	st	Z+, r16
     d70:	7f 01       	movw	r14, r30
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
     d72:	41 2f       	mov	r20, r17
     d74:	6d 2f       	mov	r22, r29
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <draw_ghost_at>
     d7c:	cf 5f       	subi	r28, 0xFF	; 255
     d7e:	de 5f       	subi	r29, 0xFE	; 254
	initialise_pacdots();
	pacman_x = INIT_PACMAN_X;
	pacman_y = INIT_PACMAN_Y;
	pacman_direction = INIT_PACMAN_DIRN;
	draw_pacman_at(pacman_x, pacman_y);
	for(int8_t i = 0; i < NUM_GHOSTS; i++) {
     d80:	c4 30       	cpi	r28, 0x04	; 4
     d82:	71 f7       	brne	.-36     	; 0xd60 <initialise_game_level+0x2d2>
		ghost_x[i] = GHOST_HOME_X_LEFT + 2*i;
		ghost_y[i] = GHOST_HOME_Y;
		ghost_direction[i] = INIT_GHOST_DIRN;
		draw_ghost_at(i, ghost_x[i], ghost_y[i]);
	}
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	7f 90       	pop	r7
     d9e:	6f 90       	pop	r6
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	3f 90       	pop	r3
     da6:	2f 90       	pop	r2
     da8:	08 95       	ret

00000daa <initialise_game>:

void initialise_game(void) {
	initialise_game_level();
     daa:	0e 94 47 05 	call	0xa8e	; 0xa8e <initialise_game_level>
	game_running = 1;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <game_running>
     db4:	08 95       	ret

00000db6 <move_pacman>:
}

int8_t move_pacman(void) {
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
	if(!game_running) {
     dbc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <game_running>
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <move_pacman+0x10>
     dc4:	4d c0       	rjmp	.+154    	; 0xe60 <move_pacman+0xaa>
	// If the pac-man is about to exit through the end of a passage-way
	// then wrap its location around to the other side of the game field
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
     dc6:	10 91 7a 01 	lds	r17, 0x017A	; 0x80017a <pacman_y>
     dca:	d0 91 7b 01 	lds	r29, 0x017B	; 0x80017b <pacman_x>
     dce:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <pacman_direction>
     dd2:	61 2f       	mov	r22, r17
     dd4:	8d 2f       	mov	r24, r29
     dd6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <what_is_in_dirn>
     dda:	c8 2f       	mov	r28, r24
	if(cell_contents == CELL_IS_WALL) {
     ddc:	8e 3f       	cpi	r24, 0xFE	; 254
     dde:	09 f4       	brne	.+2      	; 0xde2 <move_pacman+0x2c>
     de0:	41 c0       	rjmp	.+130    	; 0xe64 <move_pacman+0xae>
		return 0;	// We can't move - wall is straight ahead
	}
	// We can move - erase the pac-man in the current location
	erase_pixel_at(pacman_x, pacman_y);
     de2:	61 2f       	mov	r22, r17
     de4:	8d 2f       	mov	r24, r29
     de6:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	// Update the pac-man location
	if(pacman_direction == DIRN_LEFT) {
     dea:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <pacman_direction>
     dee:	81 11       	cpse	r24, r1
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <move_pacman+0x48>
		pacman_x--;
     df2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <pacman_x>
     df6:	81 50       	subi	r24, 0x01	; 1
     df8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <pacman_x>
     dfc:	15 c0       	rjmp	.+42     	; 0xe28 <move_pacman+0x72>
	} else if(pacman_direction == DIRN_RIGHT) {
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	31 f4       	brne	.+12     	; 0xe0e <move_pacman+0x58>
		pacman_x++;
     e02:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <pacman_x>
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <pacman_x>
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <move_pacman+0x72>
	} else if(pacman_direction == DIRN_UP) {
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	31 f4       	brne	.+12     	; 0xe1e <move_pacman+0x68>
		pacman_y--;
     e12:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <pacman_y>
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <pacman_y>
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <move_pacman+0x72>
	} else {
		pacman_y++;
     e1e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <pacman_y>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <pacman_y>
	}
	if(cell_contents >= 0) {
     e28:	cc 23       	and	r28, r28
     e2a:	94 f0       	brlt	.+36     	; 0xe50 <move_pacman+0x9a>
		// We've encountered a ghost - draw both at the location
		// Set the background colour to that of the ghost
		// before we print out the pac-man
		// Note that the variable cell_contents contains the ghost number
		set_display_attribute(ghost_colours[cell_contents]);
     e2c:	ec 2f       	mov	r30, r28
     e2e:	cc 0f       	add	r28, r28
     e30:	ff 0b       	sbc	r31, r31
     e32:	e6 5a       	subi	r30, 0xA6	; 166
     e34:	fe 4f       	sbci	r31, 0xFE	; 254
     e36:	80 81       	ld	r24, Z
     e38:	0e 94 66 0d 	call	0x1acc	; 0x1acc <set_display_attribute>
		draw_pacman_at(pacman_x, pacman_y);
     e3c:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <pacman_y>
     e40:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <pacman_x>
     e44:	0e 94 be 04 	call	0x97c	; 0x97c <draw_pacman_at>
		// Game is over 
		game_running = 0;
     e48:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <game_running>
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0b c0       	rjmp	.+22     	; 0xe66 <move_pacman+0xb0>
		game_running = 0;
	} else {
		if(cell_contents == CELL_CONTAINS_PACDOT) {
			eat_pacdot();
		}
		draw_pacman_at(pacman_x, pacman_y);
     e50:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <pacman_y>
     e54:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <pacman_x>
     e58:	0e 94 be 04 	call	0x97c	; 0x97c <draw_pacman_at>
	}
	return 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <move_pacman+0xb0>
}

int8_t move_pacman(void) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <move_pacman+0xb0>
	// YOUR CODE HERE - you may need to alter the code below also
	
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, pacman_direction);
	if(cell_contents == CELL_IS_WALL) {
		return 0;	// We can't move - wall is straight ahead
     e64:	80 e0       	ldi	r24, 0x00	; 0
			eat_pacdot();
		}
		draw_pacman_at(pacman_x, pacman_y);
	}
	return 1;
}
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	08 95       	ret

00000e6e <change_pacman_direction>:

int8_t change_pacman_direction(int8_t direction) {
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
	if(!game_running) {
     e74:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <game_running>
     e78:	99 23       	and	r25, r25
     e7a:	a1 f0       	breq	.+40     	; 0xea4 <change_pacman_direction+0x36>
     e7c:	c8 2f       	mov	r28, r24
		// Game is over - do nothing
		return 0;
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
     e7e:	10 91 7a 01 	lds	r17, 0x017A	; 0x80017a <pacman_y>
     e82:	d0 91 7b 01 	lds	r29, 0x017B	; 0x80017b <pacman_x>
     e86:	48 2f       	mov	r20, r24
     e88:	61 2f       	mov	r22, r17
     e8a:	8d 2f       	mov	r24, r29
     e8c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <what_is_in_dirn>
	if(cell_contents == CELL_IS_WALL) {
     e90:	8e 3f       	cpi	r24, 0xFE	; 254
     e92:	51 f0       	breq	.+20     	; 0xea8 <change_pacman_direction+0x3a>
		// Can't move
		return 0;
	} else {
		pacman_direction = direction;
     e94:	c0 93 79 01 	sts	0x0179, r28	; 0x800179 <pacman_direction>
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
     e98:	61 2f       	mov	r22, r17
     e9a:	8d 2f       	mov	r24, r29
     e9c:	0e 94 be 04 	call	0x97c	; 0x97c <draw_pacman_at>
		return 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <change_pacman_direction+0x3c>
}

int8_t change_pacman_direction(int8_t direction) {
	if(!game_running) {
		// Game is over - do nothing
		return 0;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <change_pacman_direction+0x3c>
	}
	// Work out what is in the direction we want to move
	int8_t cell_contents = what_is_in_dirn(pacman_x, pacman_y, direction);
	if(cell_contents == CELL_IS_WALL) {
		// Can't move
		return 0;
     ea8:	80 e0       	ldi	r24, 0x00	; 0
		pacman_direction = direction;
		// Redraw the pacman so it is facing in the right direction
		draw_pacman_at(pacman_x, pacman_y);
		return 1;
	}
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	08 95       	ret

00000eb2 <move_ghost>:


void move_ghost(int8_t ghostnum) {
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
	if(!game_running) {
     ebc:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <game_running>
     ec0:	99 23       	and	r25, r25
     ec2:	09 f4       	brne	.+2      	; 0xec6 <move_ghost+0x14>
     ec4:	e2 c1       	rjmp	.+964    	; 0x128a <move_ghost+0x3d8>
     ec6:	c8 2f       	mov	r28, r24
// Determine the direction the given ghost (0 to 3) should move in.
// (Each ghost uses a different approach to moving.)
// Return -1 if the ghost can't move (e.g. surrounded by walls and other
// ghosts).
static int8_t determine_ghost_direction_to_move(uint8_t ghostnum) {
	uint8_t x = ghost_x[ghostnum];
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	eb 58       	subi	r30, 0x8B	; 139
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	10 81       	ld	r17, Z
	uint8_t y = ghost_y[ghostnum];
     ed2:	fc 01       	movw	r30, r24
     ed4:	ef 58       	subi	r30, 0x8F	; 143
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	f0 80       	ld	r15, Z
	uint8_t curdirn = ghost_direction[ghostnum];
     eda:	fc 01       	movw	r30, r24
     edc:	e3 59       	subi	r30, 0x93	; 147
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	d0 81       	ld	r29, Z

	int8_t dirn_options = determine_dirns_ghost_can_move_in(x,y);
     ee2:	6f 2d       	mov	r22, r15
     ee4:	81 2f       	mov	r24, r17
     ee6:	0e 94 81 04 	call	0x902	; 0x902 <determine_dirns_ghost_can_move_in>
     eea:	08 2f       	mov	r16, r24
	if(dirn_options == 0) {
     eec:	88 23       	and	r24, r24
     eee:	09 f4       	brne	.+2      	; 0xef2 <move_ghost+0x40>
     ef0:	cc c1       	rjmp	.+920    	; 0x128a <move_ghost+0x3d8>
		// ghost has no options - indicate that the ghost can't move
		return -1;
	}
	
	if(is_ghost_home(x,y)) {
     ef2:	6f 2d       	mov	r22, r15
     ef4:	81 2f       	mov	r24, r17
     ef6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <is_ghost_home>
     efa:	88 23       	and	r24, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <move_ghost+0x4e>
     efe:	45 c1       	rjmp	.+650    	; 0x118a <move_ghost+0x2d8>
		// Attempt to move ghost out of home - try UP
		if(dirn_options & (1 << DIRN_UP)) {
     f00:	01 ff       	sbrs	r16, 1
     f02:	43 c1       	rjmp	.+646    	; 0x118a <move_ghost+0x2d8>
     f04:	9a c1       	rjmp	.+820    	; 0x123a <move_ghost+0x388>
// to move in that will take us closer to the pacman (from DIRN_LEFT to DIRN_DOWN)
// or -1 if we can't move at all. (Note we can only move into cells that are empty
// OR contain a pacdot OR contain the pacman. We can't move into walls or cells 
// that contain ghosts.)
static int8_t direction_to_pacman(uint8_t x, uint8_t y) {
	int8_t delta_x = pacman_x - x;
     f06:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <pacman_x>
     f0a:	01 1b       	sub	r16, r17
	int8_t delta_y = pacman_y - y;
     f0c:	d0 91 7a 01 	lds	r29, 0x017A	; 0x80017a <pacman_y>
     f10:	df 19       	sub	r29, r15
	// Work out which direction options are possible
	int8_t dirn_options = determine_dirns_ghost_can_move_in(x, y);
     f12:	6f 2d       	mov	r22, r15
     f14:	81 2f       	mov	r24, r17
     f16:	0e 94 81 04 	call	0x902	; 0x902 <determine_dirns_ghost_can_move_in>
	if(dirn_options == 0) {
     f1a:	88 23       	and	r24, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <move_ghost+0x6e>
     f1e:	b5 c1       	rjmp	.+874    	; 0x128a <move_ghost+0x3d8>
		// Can't move
		return -1;
	}
	
	if(abs(delta_x) < abs(delta_y)) {
     f20:	40 2f       	mov	r20, r16
     f22:	00 2e       	mov	r0, r16
     f24:	00 0c       	add	r0, r0
     f26:	55 0b       	sbc	r21, r21
     f28:	55 23       	and	r21, r21
     f2a:	1c f4       	brge	.+6      	; 0xf32 <move_ghost+0x80>
     f2c:	51 95       	neg	r21
     f2e:	41 95       	neg	r20
     f30:	51 09       	sbc	r21, r1
     f32:	2d 2f       	mov	r18, r29
     f34:	0d 2e       	mov	r0, r29
     f36:	00 0c       	add	r0, r0
     f38:	33 0b       	sbc	r19, r19
     f3a:	33 23       	and	r19, r19
     f3c:	1c f4       	brge	.+6      	; 0xf44 <move_ghost+0x92>
     f3e:	31 95       	neg	r19
     f40:	21 95       	neg	r18
     f42:	31 09       	sbc	r19, r1
     f44:	42 17       	cp	r20, r18
     f46:	53 07       	cpc	r21, r19
     f48:	4c f4       	brge	.+18     	; 0xf5c <move_ghost+0xaa>
		// Pacman is further away in y direction - try this direction (up/down) first
		if(delta_y < 0) {
     f4a:	dd 23       	and	r29, r29
     f4c:	1c f4       	brge	.+6      	; 0xf54 <move_ghost+0xa2>
			if(dirn_options & (1 << DIRN_UP)) {
     f4e:	81 ff       	sbrs	r24, 1
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <move_ghost+0xaa>
     f52:	73 c1       	rjmp	.+742    	; 0x123a <move_ghost+0x388>
				return DIRN_UP;
			}
			// Can't move up - move on to checking left/right
		} else if(delta_y > 0) {
     f54:	1d 16       	cp	r1, r29
     f56:	14 f4       	brge	.+4      	; 0xf5c <move_ghost+0xaa>
			if(dirn_options & (1 << DIRN_DOWN)) {
     f58:	83 fd       	sbrc	r24, 3
     f5a:	83 c1       	rjmp	.+774    	; 0x1262 <move_ghost+0x3b0>
			}
			// Can't move down - move on to checking left/right
		} // else delta_y is 0 - so try left/right
	}
	// Try the x direction 
	if(delta_x < 0) {
     f5c:	00 23       	and	r16, r16
     f5e:	54 f4       	brge	.+20     	; 0xf74 <move_ghost+0xc2>
		if(dirn_options & (1 << DIRN_LEFT)) {
     f60:	80 fd       	sbrc	r24, 0
     f62:	44 c1       	rjmp	.+648    	; 0x11ec <move_ghost+0x33a>
			return DIRN_LEFT;
		}
		// Pacman is left but we can't move left - try up or down
		if(delta_y < 0) {
     f64:	dd 23       	and	r29, r29
     f66:	1c f4       	brge	.+6      	; 0xf6e <move_ghost+0xbc>
			if(dirn_options & (1 << DIRN_UP)) {
     f68:	81 ff       	sbrs	r24, 1
     f6a:	3c c1       	rjmp	.+632    	; 0x11e4 <move_ghost+0x332>
     f6c:	66 c1       	rjmp	.+716    	; 0x123a <move_ghost+0x388>
				return DIRN_UP;
			}
		} else if(dirn_options & (1 << DIRN_DOWN)) {
     f6e:	83 fd       	sbrc	r24, 3
     f70:	78 c1       	rjmp	.+752    	; 0x1262 <move_ghost+0x3b0>
     f72:	38 c1       	rjmp	.+624    	; 0x11e4 <move_ghost+0x332>
			return DIRN_DOWN;
		}
	} else {
		if(dirn_options & (1 << DIRN_RIGHT)) {
     f74:	82 fd       	sbrc	r24, 2
     f76:	4d c1       	rjmp	.+666    	; 0x1212 <move_ghost+0x360>
			return DIRN_RIGHT;
		}
		// Pacman is right (or directly above/below) but we can't move right - try up or down
		if(delta_y < 0) {
     f78:	dd 23       	and	r29, r29
     f7a:	1c f4       	brge	.+6      	; 0xf82 <move_ghost+0xd0>
			if(dirn_options & (1 << DIRN_UP)) {
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	14 c1       	rjmp	.+552    	; 0x11a8 <move_ghost+0x2f6>
     f80:	5c c1       	rjmp	.+696    	; 0x123a <move_ghost+0x388>
				return DIRN_UP;
			} 
		} else if(dirn_options & (1 << DIRN_DOWN)) {
     f82:	83 fd       	sbrc	r24, 3
     f84:	6e c1       	rjmp	.+732    	; 0x1262 <move_ghost+0x3b0>
     f86:	10 c1       	rjmp	.+544    	; 0x11a8 <move_ghost+0x2f6>
		return 1;
	}
}


void move_ghost(int8_t ghostnum) {
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
     f8c:	ab 01       	movw	r20, r22
     f8e:	08 2e       	mov	r0, r24
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <move_ghost+0xe4>
     f92:	55 95       	asr	r21
     f94:	47 95       	ror	r20
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <move_ghost+0xe0>
     f9a:	40 fd       	sbrc	r20, 0
     f9c:	a0 c0       	rjmp	.+320    	; 0x10de <move_ghost+0x22c>
     f9e:	01 96       	adiw	r24, 0x01	; 1
		} else if(dirn_options & (1 << DIRN_DOWN)) {
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	91 05       	cpc	r25, r1
     fa4:	99 f7       	brne	.-26     	; 0xf8c <move_ghost+0xda>
     fa6:	71 c1       	rjmp	.+738    	; 0x128a <move_ghost+0x3d8>
			break;
		case 1:
		case 3:
			// Ghosts 1 and 3 will always try to keep moving in their current
			// direction if possible
			if(dirn_options & (1<<curdirn)) {
     fa8:	00 2e       	mov	r0, r16
     faa:	00 0c       	add	r0, r0
     fac:	11 0b       	sbc	r17, r17
     fae:	4d 2f       	mov	r20, r29
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	c8 01       	movw	r24, r16
     fb4:	0d 2e       	mov	r0, r29
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <move_ghost+0x10a>
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <move_ghost+0x106>
     fc0:	80 fd       	sbrc	r24, 0
     fc2:	94 c0       	rjmp	.+296    	; 0x10ec <move_ghost+0x23a>
				// Current direction is valid - just keep going
				return curdirn;
			} else {
				// Can't move in current direction - try right angles
				int8_t new_dirn = (curdirn + ghostnum)%4;
     fc4:	dc 0f       	add	r29, r28
     fc6:	d3 70       	andi	r29, 0x03	; 3
				if(dirn_options & (1 << new_dirn)) {
     fc8:	2d 2f       	mov	r18, r29
     fca:	0d 2e       	mov	r0, r29
     fcc:	00 0c       	add	r0, r0
     fce:	33 0b       	sbc	r19, r19
     fd0:	c8 01       	movw	r24, r16
     fd2:	0d 2e       	mov	r0, r29
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <move_ghost+0x128>
     fd6:	95 95       	asr	r25
     fd8:	87 95       	ror	r24
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <move_ghost+0x124>
     fde:	80 fd       	sbrc	r24, 0
     fe0:	85 c0       	rjmp	.+266    	; 0x10ec <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
     fe2:	2e 5f       	subi	r18, 0xFE	; 254
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	23 70       	andi	r18, 0x03	; 3
     fe8:	30 78       	andi	r19, 0x80	; 128
     fea:	33 23       	and	r19, r19
     fec:	34 f4       	brge	.+12     	; 0xffa <move_ghost+0x148>
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	31 09       	sbc	r19, r1
     ff2:	2c 6f       	ori	r18, 0xFC	; 252
     ff4:	3f 6f       	ori	r19, 0xFF	; 255
     ff6:	2f 5f       	subi	r18, 0xFF	; 255
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << new_dirn)) {
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <move_ghost+0x150>
     ffe:	15 95       	asr	r17
    1000:	07 95       	ror	r16
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <move_ghost+0x14c>
    1006:	00 fd       	sbrc	r16, 0
    1008:	6c c0       	rjmp	.+216    	; 0x10e2 <move_ghost+0x230>
						return new_dirn;
					} else {
						// Neither of the right angles directions worked
						// - just go back in the opposite direction 
						return (curdirn + 2)%4;
    100a:	9a 01       	movw	r18, r20
    100c:	2e 5f       	subi	r18, 0xFE	; 254
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	23 70       	andi	r18, 0x03	; 3
    1012:	30 78       	andi	r19, 0x80	; 128
    1014:	33 23       	and	r19, r19
    1016:	34 f4       	brge	.+12     	; 0x1024 <move_ghost+0x172>
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	31 09       	sbc	r19, r1
    101c:	2c 6f       	ori	r18, 0xFC	; 252
    101e:	3f 6f       	ori	r19, 0xFF	; 255
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	d2 2f       	mov	r29, r18
    1026:	62 c0       	rjmp	.+196    	; 0x10ec <move_ghost+0x23a>
				}
			}
			break;	
		case 2:
			// Ghost 2 will try to move in the same direction as the pacman is moving
			if(dirn_options & (1 << pacman_direction)) {
    1028:	00 2e       	mov	r0, r16
    102a:	00 0c       	add	r0, r0
    102c:	11 0b       	sbc	r17, r17
    102e:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <pacman_direction>
    1032:	c8 01       	movw	r24, r16
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <move_ghost+0x18a>
    1038:	95 95       	asr	r25
    103a:	87 95       	ror	r24
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <move_ghost+0x186>
    1040:	80 ff       	sbrs	r24, 0
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <move_ghost+0x196>
				// That direction is one of the valid options
				return pacman_direction;
    1044:	d2 2f       	mov	r29, r18
    1046:	52 c0       	rjmp	.+164    	; 0x10ec <move_ghost+0x23a>
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
    1048:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <random>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	83 70       	andi	r24, 0x03	; 3
    1052:	99 27       	eor	r25, r25
    1054:	aa 27       	eor	r26, r26
    1056:	b0 78       	andi	r27, 0x80	; 128
    1058:	bb 23       	and	r27, r27
    105a:	54 f4       	brge	.+20     	; 0x1070 <move_ghost+0x1be>
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	a1 09       	sbc	r26, r1
    1060:	b1 09       	sbc	r27, r1
    1062:	8c 6f       	ori	r24, 0xFC	; 252
    1064:	9f 6f       	ori	r25, 0xFF	; 255
    1066:	af 6f       	ori	r26, 0xFF	; 255
    1068:	bf 6f       	ori	r27, 0xFF	; 255
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	a1 1d       	adc	r26, r1
    106e:	b1 1d       	adc	r27, r1
    1070:	48 2f       	mov	r20, r24
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    1072:	68 2f       	mov	r22, r24
    1074:	88 0f       	add	r24, r24
    1076:	77 0b       	sbc	r23, r23
    1078:	9b 01       	movw	r18, r22
    107a:	23 70       	andi	r18, 0x03	; 3
    107c:	30 78       	andi	r19, 0x80	; 128
    107e:	33 23       	and	r19, r19
    1080:	34 f4       	brge	.+12     	; 0x108e <move_ghost+0x1dc>
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	31 09       	sbc	r19, r1
    1086:	2c 6f       	ori	r18, 0xFC	; 252
    1088:	3f 6f       	ori	r19, 0xFF	; 255
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
					if(dirn_options & (1 << direction_to_check)) {
    108e:	c8 01       	movw	r24, r16
    1090:	02 2e       	mov	r0, r18
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <move_ghost+0x1e6>
    1094:	95 95       	asr	r25
    1096:	87 95       	ror	r24
    1098:	0a 94       	dec	r0
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <move_ghost+0x1e2>
    109c:	80 fd       	sbrc	r24, 0
    109e:	23 c0       	rjmp	.+70     	; 0x10e6 <move_ghost+0x234>
    10a0:	6f 5f       	subi	r22, 0xFF	; 255
    10a2:	7f 4f       	sbci	r23, 0xFF	; 255
    10a4:	04 2e       	mov	r0, r20
    10a6:	00 0c       	add	r0, r0
    10a8:	55 0b       	sbc	r21, r21
    10aa:	4c 5f       	subi	r20, 0xFC	; 252
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    10ae:	cb 01       	movw	r24, r22
    10b0:	83 70       	andi	r24, 0x03	; 3
    10b2:	90 78       	andi	r25, 0x80	; 128
    10b4:	99 23       	and	r25, r25
    10b6:	24 f4       	brge	.+8      	; 0x10c0 <move_ghost+0x20e>
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	8c 6f       	ori	r24, 0xFC	; 252
    10bc:	9f 6f       	ori	r25, 0xFF	; 255
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	28 2f       	mov	r18, r24
					if(dirn_options & (1 << direction_to_check)) {
    10c2:	f8 01       	movw	r30, r16
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <move_ghost+0x218>
    10c6:	f5 95       	asr	r31
    10c8:	e7 95       	ror	r30
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <move_ghost+0x214>
    10ce:	e0 fd       	sbrc	r30, 0
    10d0:	0c c0       	rjmp	.+24     	; 0x10ea <move_ghost+0x238>
    10d2:	6f 5f       	subi	r22, 0xFF	; 255
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
				// That direction is one of the valid options
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
    10d6:	64 17       	cp	r22, r20
    10d8:	75 07       	cpc	r23, r21
    10da:	49 f7       	brne	.-46     	; 0x10ae <move_ghost+0x1fc>
    10dc:	d6 c0       	rjmp	.+428    	; 0x128a <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    10de:	d8 2f       	mov	r29, r24
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <move_ghost+0x23a>
					return new_dirn;
				} else {
					// Try the other direction at right angles
					new_dirn = (new_dirn + 2)%4;
					if(dirn_options & (1 << new_dirn)) {
						return new_dirn;
    10e2:	d2 2f       	mov	r29, r18
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <move_ghost+0x23a>
				return pacman_direction;
			} else {
				// Otherwise, start from a random direction and try each in turn
				int8_t first_direction_to_check = random()%4;
				for(int8_t i = 0; i < 4; i++) {
					int8_t direction_to_check = (first_direction_to_check + i)%4;
    10e6:	d2 2f       	mov	r29, r18
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <move_ghost+0x23a>
    10ea:	d2 2f       	mov	r29, r18
	if(!game_running) {
		// Game is over - do nothing
		return;
	}
	int8_t dirn_to_move = determine_ghost_direction_to_move(ghostnum);
	if(dirn_to_move < 0) {
    10ec:	dd 23       	and	r29, r29
    10ee:	0c f4       	brge	.+2      	; 0x10f2 <move_ghost+0x240>
    10f0:	cc c0       	rjmp	.+408    	; 0x128a <move_ghost+0x3d8>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    10f2:	0c 2f       	mov	r16, r28
    10f4:	0c 2e       	mov	r0, r28
    10f6:	00 0c       	add	r0, r0
    10f8:	11 0b       	sbc	r17, r17
    10fa:	d8 01       	movw	r26, r16
    10fc:	af 58       	subi	r26, 0x8F	; 143
    10fe:	be 4f       	sbci	r27, 0xFE	; 254
    1100:	f8 01       	movw	r30, r16
    1102:	eb 58       	subi	r30, 0x8B	; 139
    1104:	fe 4f       	sbci	r31, 0xFE	; 254
    1106:	6c 91       	ld	r22, X
    1108:	80 81       	ld	r24, Z
    110a:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    110e:	f8 01       	movw	r30, r16
    1110:	e3 59       	subi	r30, 0x93	; 147
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	d0 83       	st	Z, r29
	// Update the ghost's location
	switch(dirn_to_move) {
    1116:	d1 30       	cpi	r29, 0x01	; 1
    1118:	b9 f0       	breq	.+46     	; 0x1148 <move_ghost+0x296>
    111a:	1c f4       	brge	.+6      	; 0x1122 <move_ghost+0x270>
    111c:	dd 23       	and	r29, r29
    111e:	31 f0       	breq	.+12     	; 0x112c <move_ghost+0x27a>
    1120:	20 c0       	rjmp	.+64     	; 0x1162 <move_ghost+0x2b0>
    1122:	d2 30       	cpi	r29, 0x02	; 2
    1124:	51 f0       	breq	.+20     	; 0x113a <move_ghost+0x288>
    1126:	d3 30       	cpi	r29, 0x03	; 3
    1128:	b1 f0       	breq	.+44     	; 0x1156 <move_ghost+0x2a4>
    112a:	1b c0       	rjmp	.+54     	; 0x1162 <move_ghost+0x2b0>
		case DIRN_LEFT:
			ghost_x[ghostnum]--;
    112c:	f8 01       	movw	r30, r16
    112e:	eb 58       	subi	r30, 0x8B	; 139
    1130:	fe 4f       	sbci	r31, 0xFE	; 254
    1132:	80 81       	ld	r24, Z
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	80 83       	st	Z, r24
			break;
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <move_ghost+0x2b0>
		case DIRN_RIGHT:
			ghost_x[ghostnum]++;
    113a:	f8 01       	movw	r30, r16
    113c:	eb 58       	subi	r30, 0x8B	; 139
    113e:	fe 4f       	sbci	r31, 0xFE	; 254
    1140:	80 81       	ld	r24, Z
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	80 83       	st	Z, r24
			break;
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <move_ghost+0x2b0>
		case DIRN_UP:
			ghost_y[ghostnum]--;
    1148:	f8 01       	movw	r30, r16
    114a:	ef 58       	subi	r30, 0x8F	; 143
    114c:	fe 4f       	sbci	r31, 0xFE	; 254
    114e:	80 81       	ld	r24, Z
    1150:	81 50       	subi	r24, 0x01	; 1
    1152:	80 83       	st	Z, r24
			break;
    1154:	06 c0       	rjmp	.+12     	; 0x1162 <move_ghost+0x2b0>
		case DIRN_DOWN:
			ghost_y[ghostnum]++;
    1156:	f8 01       	movw	r30, r16
    1158:	ef 58       	subi	r30, 0x8F	; 143
    115a:	fe 4f       	sbci	r31, 0xFE	; 254
    115c:	80 81       	ld	r24, Z
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 83       	st	Z, r24
			break;
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
    1162:	f8 01       	movw	r30, r16
    1164:	ef 58       	subi	r30, 0x8F	; 143
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	40 81       	ld	r20, Z
    116a:	f8 01       	movw	r30, r16
    116c:	eb 58       	subi	r30, 0x8B	; 139
    116e:	fe 4f       	sbci	r31, 0xFE	; 254
    1170:	60 81       	ld	r22, Z
}

// is_pacman_at() returns true(1) if the pacman is at the given 
// game location (x,y), 0 otherwise
static int8_t is_pacman_at(uint8_t x, uint8_t y) {
	return (x == pacman_x && y == pacman_y);
    1172:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <pacman_x>
    1176:	68 13       	cpse	r22, r24
    1178:	31 c0       	rjmp	.+98     	; 0x11dc <move_ghost+0x32a>
    117a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <pacman_y>
    117e:	48 13       	cpse	r20, r24
    1180:	2d c0       	rjmp	.+90     	; 0x11dc <move_ghost+0x32a>
    1182:	19 c0       	rjmp	.+50     	; 0x11b6 <move_ghost+0x304>
		set_display_attribute(ghost_colours[ghostnum]);
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
    1184:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <normal_display_mode>
    1188:	80 c0       	rjmp	.+256    	; 0x128a <move_ghost+0x3d8>
		if(dirn_options & (1 << DIRN_UP)) {
			return DIRN_UP;
		}
		// If this doesn't work, we'll try the usual algorithm
	}
	switch(ghostnum) {
    118a:	c1 30       	cpi	r28, 0x01	; 1
    118c:	09 f4       	brne	.+2      	; 0x1190 <move_ghost+0x2de>
    118e:	0c cf       	rjmp	.-488    	; 0xfa8 <move_ghost+0xf6>
    1190:	24 f4       	brge	.+8      	; 0x119a <move_ghost+0x2e8>
    1192:	cc 23       	and	r28, r28
    1194:	09 f4       	brne	.+2      	; 0x1198 <move_ghost+0x2e6>
    1196:	b7 ce       	rjmp	.-658    	; 0xf06 <move_ghost+0x54>
    1198:	78 c0       	rjmp	.+240    	; 0x128a <move_ghost+0x3d8>
    119a:	c2 30       	cpi	r28, 0x02	; 2
    119c:	09 f4       	brne	.+2      	; 0x11a0 <move_ghost+0x2ee>
    119e:	44 cf       	rjmp	.-376    	; 0x1028 <move_ghost+0x176>
    11a0:	c3 30       	cpi	r28, 0x03	; 3
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <move_ghost+0x2f4>
    11a4:	01 cf       	rjmp	.-510    	; 0xfa8 <move_ghost+0xf6>
    11a6:	71 c0       	rjmp	.+226    	; 0x128a <move_ghost+0x3d8>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    11a8:	68 2f       	mov	r22, r24
    11aa:	08 2e       	mov	r0, r24
    11ac:	00 0c       	add	r0, r0
    11ae:	77 0b       	sbc	r23, r23
    11b0:	80 ff       	sbrs	r24, 0
    11b2:	ea ce       	rjmp	.-556    	; 0xf88 <move_ghost+0xd6>
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <move_ghost+0x33a>
	}
	
	// Check if the pac-man is at this ghost location. 
	if(is_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum])) {
		// Ghost has just moved into the pac-man. Game is over
		game_running = 0;
    11b6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <game_running>
		// We draw the background colour for the
		// ghost and output the pac-man over the top of it.
		set_display_attribute(ghost_colours[ghostnum]);
    11ba:	f8 01       	movw	r30, r16
    11bc:	e6 5a       	subi	r30, 0xA6	; 166
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	80 81       	ld	r24, Z
    11c2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <set_display_attribute>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    11c6:	d8 01       	movw	r26, r16
    11c8:	af 58       	subi	r26, 0x8F	; 143
    11ca:	be 4f       	sbci	r27, 0xFE	; 254
    11cc:	f8 01       	movw	r30, r16
    11ce:	eb 58       	subi	r30, 0x8B	; 139
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	6c 91       	ld	r22, X
    11d4:	80 81       	ld	r24, Z
    11d6:	0e 94 be 04 	call	0x97c	; 0x97c <draw_pacman_at>
    11da:	d4 cf       	rjmp	.-88     	; 0x1184 <move_ghost+0x2d2>
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
    11dc:	8c 2f       	mov	r24, r28
    11de:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <draw_ghost_at>
    11e2:	d0 cf       	rjmp	.-96     	; 0x1184 <move_ghost+0x2d2>
			return DIRN_DOWN;
		}
	}
	// Just move whichever way we can - try until we find one that works
	for(int8_t dirn = DIRN_LEFT; dirn <= DIRN_DOWN; dirn++) {
		if(dirn_options & (1 << dirn)) {
    11e4:	68 2f       	mov	r22, r24
    11e6:	88 0f       	add	r24, r24
    11e8:	77 0b       	sbc	r23, r23
    11ea:	ce ce       	rjmp	.-612    	; 0xf88 <move_ghost+0xd6>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    11ec:	0c 2f       	mov	r16, r28
    11ee:	0c 2e       	mov	r0, r28
    11f0:	00 0c       	add	r0, r0
    11f2:	11 0b       	sbc	r17, r17
    11f4:	d8 01       	movw	r26, r16
    11f6:	af 58       	subi	r26, 0x8F	; 143
    11f8:	be 4f       	sbci	r27, 0xFE	; 254
    11fa:	f8 01       	movw	r30, r16
    11fc:	eb 58       	subi	r30, 0x8B	; 139
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	6c 91       	ld	r22, X
    1202:	80 81       	ld	r24, Z
    1204:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1208:	f8 01       	movw	r30, r16
    120a:	e3 59       	subi	r30, 0x93	; 147
    120c:	fe 4f       	sbci	r31, 0xFE	; 254
    120e:	10 82       	st	Z, r1
    1210:	8d cf       	rjmp	.-230    	; 0x112c <move_ghost+0x27a>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1212:	0c 2f       	mov	r16, r28
    1214:	0c 2e       	mov	r0, r28
    1216:	00 0c       	add	r0, r0
    1218:	11 0b       	sbc	r17, r17
    121a:	d8 01       	movw	r26, r16
    121c:	af 58       	subi	r26, 0x8F	; 143
    121e:	be 4f       	sbci	r27, 0xFE	; 254
    1220:	f8 01       	movw	r30, r16
    1222:	eb 58       	subi	r30, 0x8B	; 139
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	6c 91       	ld	r22, X
    1228:	80 81       	ld	r24, Z
    122a:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    122e:	f8 01       	movw	r30, r16
    1230:	e3 59       	subi	r30, 0x93	; 147
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	80 83       	st	Z, r24
    1238:	80 cf       	rjmp	.-256    	; 0x113a <move_ghost+0x288>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    123a:	0c 2f       	mov	r16, r28
    123c:	0c 2e       	mov	r0, r28
    123e:	00 0c       	add	r0, r0
    1240:	11 0b       	sbc	r17, r17
    1242:	d8 01       	movw	r26, r16
    1244:	af 58       	subi	r26, 0x8F	; 143
    1246:	be 4f       	sbci	r27, 0xFE	; 254
    1248:	f8 01       	movw	r30, r16
    124a:	eb 58       	subi	r30, 0x8B	; 139
    124c:	fe 4f       	sbci	r31, 0xFE	; 254
    124e:	6c 91       	ld	r22, X
    1250:	80 81       	ld	r24, Z
    1252:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    1256:	f8 01       	movw	r30, r16
    1258:	e3 59       	subi	r30, 0x93	; 147
    125a:	fe 4f       	sbci	r31, 0xFE	; 254
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 83       	st	Z, r24
    1260:	73 cf       	rjmp	.-282    	; 0x1148 <move_ghost+0x296>
		// Ghost can't move (e.g. boxed in) - do nothing
		return;
	}
	
	// Erase the ghost from the current location
	erase_pixel_at(ghost_x[ghostnum], ghost_y[ghostnum]);
    1262:	0c 2f       	mov	r16, r28
    1264:	0c 2e       	mov	r0, r28
    1266:	00 0c       	add	r0, r0
    1268:	11 0b       	sbc	r17, r17
    126a:	d8 01       	movw	r26, r16
    126c:	af 58       	subi	r26, 0x8F	; 143
    126e:	be 4f       	sbci	r27, 0xFE	; 254
    1270:	f8 01       	movw	r30, r16
    1272:	eb 58       	subi	r30, 0x8B	; 139
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	6c 91       	ld	r22, X
    1278:	80 81       	ld	r24, Z
    127a:	0e 94 1a 05 	call	0xa34	; 0xa34 <erase_pixel_at>
	
	// Update the ghost's direction (it's possible this may be the same value)
	ghost_direction[ghostnum] = dirn_to_move;
    127e:	f8 01       	movw	r30, r16
    1280:	e3 59       	subi	r30, 0x93	; 147
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	80 83       	st	Z, r24
    1288:	66 cf       	rjmp	.-308    	; 0x1156 <move_ghost+0x2a4>
		draw_pacman_at(ghost_x[ghostnum], ghost_y[ghostnum]);
	} else {
		draw_ghost_at(ghostnum, ghost_x[ghostnum], ghost_y[ghostnum]);
	}
	normal_display_mode();
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	08 95       	ret

00001296 <is_game_over>:

int8_t is_game_over(void) {
	return !game_running;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <game_running>
    129c:	91 11       	cpse	r25, r1
    129e:	80 e0       	ldi	r24, 0x00	; 0
}
    12a0:	08 95       	ret

000012a2 <is_level_complete>:

int8_t is_level_complete(void) {
	return (num_pacdots == 0);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <num_pacdots>
    12a8:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <num_pacdots+0x1>
    12ac:	23 2b       	or	r18, r19
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <is_level_complete+0x10>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
}
    12b2:	08 95       	ret

000012b4 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <spi_setup_master>
    12ba:	08 95       	ret

000012bc <ledmatrix_update_column>:
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	80 31       	cpi	r24, 0x10	; 16
    12c6:	90 f4       	brcc	.+36     	; 0x12ec <ledmatrix_update_column+0x30>
    12c8:	8b 01       	movw	r16, r22
    12ca:	c8 2f       	mov	r28, r24
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    12d2:	8c 2f       	mov	r24, r28
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    12da:	e8 01       	movw	r28, r16
    12dc:	08 5f       	subi	r16, 0xF8	; 248
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	89 91       	ld	r24, Y+
    12e2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    12e6:	c0 17       	cp	r28, r16
    12e8:	d1 07       	cpc	r29, r17
    12ea:	d1 f7       	brne	.-12     	; 0x12e0 <ledmatrix_update_column+0x24>
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <ledmatrix_shift_display_left>:
    12f6:	84 e0       	ldi	r24, 0x04	; 4
    12f8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    1302:	08 95       	ret

00001304 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1304:	8f e0       	ldi	r24, 0x0F	; 15
    1306:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <spi_send_byte>
    130a:	08 95       	ret

0000130c <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    130c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <ledmatrix_setup>
	init_button_interrupts();
    1310:	0e 94 5e 03 	call	0x6bc	; 0x6bc <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	7b e4       	ldi	r23, 0x4B	; 75
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 2d 0c 	call	0x185a	; 0x185a <init_serial_stdio>
	
	init_timer0();
    1322:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <init_timer0>
	
	// Turn on global interrupts
	sei();
    1326:	78 94       	sei
    1328:	08 95       	ret

0000132a <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    132a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <clear_terminal>
	move_cursor(10,10);
    132e:	6a e0       	ldi	r22, 0x0A	; 10
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	8a e0       	ldi	r24, 0x0A	; 10
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("Pac-Man"));
    133a:	88 e7       	ldi	r24, 0x78	; 120
    133c:	95 e0       	ldi	r25, 0x05	; 5
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	move_cursor(10,12);
    1346:	6c e0       	ldi	r22, 0x0C	; 12
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	8a e0       	ldi	r24, 0x0A	; 10
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by <Juan Espares>"));
    1352:	80 e5       	ldi	r24, 0x50	; 80
    1354:	95 e0       	ldi	r25, 0x05	; 5
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    135e:	0e 94 82 09 	call	0x1304	; 0x1304 <ledmatrix_clear>
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("PACMAN", COLOUR_YELLOW);
    136a:	6f ed       	ldi	r22, 0xDF	; 223
    136c:	8e e5       	ldi	r24, 0x5E	; 94
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1374:	10 c0       	rjmp	.+32     	; 0x1396 <splash_screen+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1376:	2f e7       	ldi	r18, 0x7F	; 127
    1378:	89 ea       	ldi	r24, 0xA9	; 169
    137a:	93 e0       	ldi	r25, 0x03	; 3
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <splash_screen+0x52>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <splash_screen+0x5c>
    1386:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    1388:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <button_pushed>
    138c:	8f 3f       	cpi	r24, 0xFF	; 255
    138e:	19 f0       	breq	.+6      	; 0x1396 <splash_screen+0x6c>
				ledmatrix_clear();
    1390:	0e 94 82 09 	call	0x1304	; 0x1304 <ledmatrix_clear>
				return;
    1394:	08 95       	ret
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("PACMAN", COLOUR_YELLOW);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
    1396:	0e 94 05 0b 	call	0x160a	; 0x160a <scroll_display>
    139a:	81 11       	cpse	r24, r1
    139c:	ec cf       	rjmp	.-40     	; 0x1376 <splash_screen+0x4c>
    139e:	e5 cf       	rjmp	.-54     	; 0x136a <splash_screen+0x40>

000013a0 <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    13a0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <initialise_game>
	
	// Initialise the score
	init_score();
    13a4:	0e 94 ed 0a 	call	0x15da	; 0x15da <init_score>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    13a8:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <button_pushed>
	clear_serial_input_buffer();
    13ac:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <clear_serial_input_buffer>
    13b0:	08 95       	ret

000013b2 <handle_level_complete>:
	}
	// We get here if the game is over.
}

void handle_level_complete(void) {
	move_cursor(35,10);
    13b2:	6a e0       	ldi	r22, 0x0A	; 10
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	83 e2       	ldi	r24, 0x23	; 35
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("Level complete"));
    13be:	81 e4       	ldi	r24, 0x41	; 65
    13c0:	95 e0       	ldi	r25, 0x05	; 5
    13c2:	9f 93       	push	r25
    13c4:	8f 93       	push	r24
    13c6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	move_cursor(35,11);
    13ca:	6b e0       	ldi	r22, 0x0B	; 11
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	83 e2       	ldi	r24, 0x23	; 35
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("Push a button or key to continue"));
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	95 e0       	ldi	r25, 0x05	; 5
    13da:	9f 93       	push	r25
    13dc:	8f 93       	push	r24
    13de:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	// Clear any characters in the serial input buffer - to make
	// sure we only use key presses from now on.
	clear_serial_input_buffer();
    13e2:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <clear_serial_input_buffer>
	while(button_pushed() == NO_BUTTON_PUSHED && !serial_input_available()) {
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <button_pushed>
    13f2:	8f 3f       	cpi	r24, 0xFF	; 255
    13f4:	21 f4       	brne	.+8      	; 0x13fe <handle_level_complete+0x4c>
    13f6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <serial_input_available>
    13fa:	88 23       	and	r24, r24
    13fc:	c1 f3       	breq	.-16     	; 0x13ee <handle_level_complete+0x3c>
		; // wait
	}
	// Throw away any characters in the serial input buffer
	clear_serial_input_buffer();
    13fe:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <clear_serial_input_buffer>
    1402:	08 95       	ret

00001404 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    1404:	3f 92       	push	r3
    1406:	4f 92       	push	r4
    1408:	5f 92       	push	r5
    140a:	6f 92       	push	r6
    140c:	7f 92       	push	r7
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    1426:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <get_current_time>
    142a:	4b 01       	movw	r8, r22
    142c:	5c 01       	movw	r10, r24
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
    142e:	2b 01       	movw	r4, r22
    1430:	3c 01       	movw	r6, r24
	uint32_t current_time;
	uint32_t pacman_last_move_time;
	uint32_t ghost_last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1432:	10 e0       	ldi	r17, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1434:	33 24       	eor	r3, r3
    1436:	3a 94       	dec	r3
		
		if(button == NO_BUTTON_PUSHED) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1438:	ce e1       	ldi	r28, 0x1E	; 30
    143a:	d3 e0       	ldi	r29, 0x03	; 3
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    143c:	01 e0       	ldi	r16, 0x01	; 1
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    143e:	73 c0       	rjmp	.+230    	; 0x1526 <play_game+0x122>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1440:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <button_pushed>
		
		if(button == NO_BUTTON_PUSHED) {
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	09 f0       	breq	.+2      	; 0x144a <play_game+0x46>
    1448:	7a c0       	rjmp	.+244    	; 0x153e <play_game+0x13a>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    144a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <serial_input_available>
    144e:	88 23       	and	r24, r24
    1450:	39 f1       	breq	.+78     	; 0x14a0 <play_game+0x9c>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1452:	88 81       	ld	r24, Y
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    145a:	11 11       	cpse	r17, r1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <play_game+0x64>
    145e:	8b 31       	cpi	r24, 0x1B	; 27
    1460:	09 f4       	brne	.+2      	; 0x1464 <play_game+0x60>
    1462:	67 c0       	rjmp	.+206    	; 0x1532 <play_game+0x12e>
    1464:	83 2d       	mov	r24, r3
    1466:	0a c0       	rjmp	.+20     	; 0x147c <play_game+0x78>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1468:	11 30       	cpi	r17, 0x01	; 1
    146a:	29 f4       	brne	.+10     	; 0x1476 <play_game+0x72>
    146c:	8b 35       	cpi	r24, 0x5B	; 91
    146e:	09 f4       	brne	.+2      	; 0x1472 <play_game+0x6e>
    1470:	62 c0       	rjmp	.+196    	; 0x1536 <play_game+0x132>
    1472:	83 2d       	mov	r24, r3
    1474:	03 c0       	rjmp	.+6      	; 0x147c <play_game+0x78>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1476:	12 30       	cpi	r17, 0x02	; 2
    1478:	09 f0       	breq	.+2      	; 0x147c <play_game+0x78>
    147a:	5f c0       	rjmp	.+190    	; 0x153a <play_game+0x136>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
    147c:	84 34       	cpi	r24, 0x44	; 68
    147e:	09 f0       	breq	.+2      	; 0x1482 <play_game+0x7e>
    1480:	67 c0       	rjmp	.+206    	; 0x1550 <play_game+0x14c>
    1482:	10 e0       	ldi	r17, 0x00	; 0
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	0e 94 37 07 	call	0xe6e	; 0xe6e <change_pacman_direction>
    148a:	0a c0       	rjmp	.+20     	; 0x14a0 <play_game+0x9c>
			// Button 2 pressed or up cursor key escape sequence completed
			// YOUR CODE HERE
		} else if(button==1 || escape_sequence_char=='B') {
			// Button 1 pressed OR down cursor key escape sequence completed
			// YOUR CODE HERE
		} else if(button==0 || escape_sequence_char=='C') {
    148c:	88 23       	and	r24, r24
    148e:	19 f0       	breq	.+6      	; 0x1496 <play_game+0x92>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1490:	83 2d       	mov	r24, r3
			// Button 2 pressed or up cursor key escape sequence completed
			// YOUR CODE HERE
		} else if(button==1 || escape_sequence_char=='B') {
			// Button 1 pressed OR down cursor key escape sequence completed
			// YOUR CODE HERE
		} else if(button==0 || escape_sequence_char=='C') {
    1492:	83 34       	cpi	r24, 0x43	; 67
    1494:	29 f4       	brne	.+10     	; 0x14a0 <play_game+0x9c>
			// Button 0 pressed OR right cursor key escape sequence completed 
			// Attempt to move right
			change_pacman_direction(DIRN_RIGHT);
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	0e 94 37 07 	call	0xe6e	; 0xe6e <change_pacman_direction>
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <play_game+0x9c>
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if(button==2 || escape_sequence_char=='A') {
    149e:	10 e0       	ldi	r17, 0x00	; 0
			// pressed again
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    14a0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <get_current_time>
    14a4:	6b 01       	movw	r12, r22
    14a6:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
    14a8:	0e 94 4b 09 	call	0x1296	; 0x1296 <is_game_over>
    14ac:	81 11       	cpse	r24, r1
    14ae:	1e c0       	rjmp	.+60     	; 0x14ec <play_game+0xe8>
    14b0:	d5 01       	movw	r26, r10
    14b2:	c4 01       	movw	r24, r8
    14b4:	80 57       	subi	r24, 0x70	; 112
    14b6:	9e 4f       	sbci	r25, 0xFE	; 254
    14b8:	af 4f       	sbci	r26, 0xFF	; 255
    14ba:	bf 4f       	sbci	r27, 0xFF	; 255
    14bc:	c8 16       	cp	r12, r24
    14be:	d9 06       	cpc	r13, r25
    14c0:	ea 06       	cpc	r14, r26
    14c2:	fb 06       	cpc	r15, r27
    14c4:	98 f0       	brcs	.+38     	; 0x14ec <play_game+0xe8>
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
    14c6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <move_pacman>
			pacman_last_move_time = current_time;
			
			// Check if the move finished the level - and restart if so
			if(is_level_complete()) {
    14ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <is_level_complete>
    14ce:	88 23       	and	r24, r24
    14d0:	59 f0       	breq	.+22     	; 0x14e8 <play_game+0xe4>
				handle_level_complete();	// This will pause until a button is pushed
    14d2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <handle_level_complete>
				initialise_game_level();
    14d6:	0e 94 47 05 	call	0xa8e	; 0xa8e <initialise_game_level>
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
    14da:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <get_current_time>
    14de:	4b 01       	movw	r8, r22
    14e0:	5c 01       	movw	r10, r24
    14e2:	2b 01       	movw	r4, r22
    14e4:	3c 01       	movw	r6, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <play_game+0xe8>
		current_time = get_current_time();
		if(!is_game_over() && current_time >= pacman_last_move_time + 400) {
			// 400ms (0.4 second) has passed since the last time we moved 
			// the pac-man - move it.
			move_pacman();
			pacman_last_move_time = current_time;
    14e8:	46 01       	movw	r8, r12
    14ea:	57 01       	movw	r10, r14
				initialise_game_level();
				// Update our timers since we have a pause above
				pacman_last_move_time = ghost_last_move_time = get_current_time();
			}
		}
		if(!is_game_over() && current_time >= ghost_last_move_time + 500) {
    14ec:	0e 94 4b 09 	call	0x1296	; 0x1296 <is_game_over>
    14f0:	81 11       	cpse	r24, r1
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <play_game+0x122>
    14f4:	d3 01       	movw	r26, r6
    14f6:	c2 01       	movw	r24, r4
    14f8:	8c 50       	subi	r24, 0x0C	; 12
    14fa:	9e 4f       	sbci	r25, 0xFE	; 254
    14fc:	af 4f       	sbci	r26, 0xFF	; 255
    14fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1500:	c8 16       	cp	r12, r24
    1502:	d9 06       	cpc	r13, r25
    1504:	ea 06       	cpc	r14, r26
    1506:	fb 06       	cpc	r15, r27
    1508:	70 f0       	brcs	.+28     	; 0x1526 <play_game+0x122>
			// 500ms (0.5 second) has passed since the last time we moved the
			// ghosts - move them
			move_ghost(0);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <move_ghost>
			move_ghost(1);
    1510:	80 2f       	mov	r24, r16
    1512:	0e 94 59 07 	call	0xeb2	; 0xeb2 <move_ghost>
			move_ghost(2);
    1516:	82 e0       	ldi	r24, 0x02	; 2
    1518:	0e 94 59 07 	call	0xeb2	; 0xeb2 <move_ghost>
			move_ghost(3);
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <move_ghost>
			ghost_last_move_time = current_time;
    1522:	26 01       	movw	r4, r12
    1524:	37 01       	movw	r6, r14
	current_time = get_current_time();
	pacman_last_move_time = current_time;
	ghost_last_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    1526:	0e 94 4b 09 	call	0x1296	; 0x1296 <is_game_over>
    152a:	88 23       	and	r24, r24
    152c:	09 f4       	brne	.+2      	; 0x1530 <play_game+0x12c>
    152e:	88 cf       	rjmp	.-240    	; 0x1440 <play_game+0x3c>
    1530:	16 c0       	rjmp	.+44     	; 0x155e <play_game+0x15a>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1532:	10 2f       	mov	r17, r16
    1534:	b5 cf       	rjmp	.-150    	; 0x14a0 <play_game+0x9c>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1536:	12 e0       	ldi	r17, 0x02	; 2
    1538:	b3 cf       	rjmp	.-154    	; 0x14a0 <play_game+0x9c>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	b1 cf       	rjmp	.-158    	; 0x14a0 <play_game+0x9c>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	09 f4       	brne	.+2      	; 0x1544 <play_game+0x140>
    1542:	a0 cf       	rjmp	.-192    	; 0x1484 <play_game+0x80>
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if(button==2 || escape_sequence_char=='A') {
			// Button 2 pressed or up cursor key escape sequence completed
			// YOUR CODE HERE
		} else if(button==1 || escape_sequence_char=='B') {
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	98 0f       	add	r25, r24
    1548:	92 30       	cpi	r25, 0x02	; 2
    154a:	08 f0       	brcs	.+2      	; 0x154e <play_game+0x14a>
    154c:	9f cf       	rjmp	.-194    	; 0x148c <play_game+0x88>
    154e:	a8 cf       	rjmp	.-176    	; 0x14a0 <play_game+0x9c>
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
			// Button 3 pressed OR left cursor key escape sequence completed 
			// Attempt to move left
			change_pacman_direction(DIRN_LEFT);
		} else if(button==2 || escape_sequence_char=='A') {
    1550:	9f eb       	ldi	r25, 0xBF	; 191
    1552:	98 0f       	add	r25, r24
    1554:	92 30       	cpi	r25, 0x02	; 2
    1556:	08 f4       	brcc	.+2      	; 0x155a <play_game+0x156>
    1558:	a2 cf       	rjmp	.-188    	; 0x149e <play_game+0x9a>
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	9a cf       	rjmp	.-204    	; 0x1492 <play_game+0x8e>
			move_ghost(3);
			ghost_last_move_time = current_time;
		}
	}
	// We get here if the game is over.
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	7f 90       	pop	r7
    1578:	6f 90       	pop	r6
    157a:	5f 90       	pop	r5
    157c:	4f 90       	pop	r4
    157e:	3f 90       	pop	r3
    1580:	08 95       	ret

00001582 <handle_game_over>:
	clear_serial_input_buffer();

}

void handle_game_over(void) {
	move_cursor(35,14);
    1582:	6e e0       	ldi	r22, 0x0E	; 14
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	83 e2       	ldi	r24, 0x23	; 35
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    158e:	86 e1       	ldi	r24, 0x16	; 22
    1590:	95 e0       	ldi	r25, 0x05	; 5
    1592:	9f 93       	push	r25
    1594:	8f 93       	push	r24
    1596:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	move_cursor(35,16);
    159a:	60 e1       	ldi	r22, 0x10	; 16
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	83 e2       	ldi	r24, 0x23	; 35
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    15a6:	88 ef       	ldi	r24, 0xF8	; 248
    15a8:	94 e0       	ldi	r25, 0x04	; 4
    15aa:	9f 93       	push	r25
    15ac:	8f 93       	push	r24
    15ae:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <button_pushed>
    15be:	8f 3f       	cpi	r24, 0xFF	; 255
    15c0:	e1 f3       	breq	.-8      	; 0x15ba <handle_game_over+0x38>
		; // wait
	}
	
}
    15c2:	08 95       	ret

000015c4 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    15c4:	0e 94 86 09 	call	0x130c	; 0x130c <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    15c8:	0e 94 95 09 	call	0x132a	; 0x132a <splash_screen>
	
	while(1) {
		new_game();
    15cc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <new_game>
		play_game();
    15d0:	0e 94 02 0a 	call	0x1404	; 0x1404 <play_game>
		handle_game_over();
    15d4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <handle_game_over>
    15d8:	f9 cf       	rjmp	.-14     	; 0x15cc <main+0x8>

000015da <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    15da:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <score>
    15de:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <score+0x1>
    15e2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <score+0x2>
    15e6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <score+0x3>
    15ea:	08 95       	ret

000015ec <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    15ec:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    15f0:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <display_string+0x1>
    15f4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <display_string>
	next_col_ptr = 0;
    15f8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <next_col_ptr+0x1>
    15fc:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <next_col_ptr>
	next_char_to_display = 0;
    1600:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <next_char_to_display+0x1>
    1604:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <next_char_to_display>
    1608:	08 95       	ret

0000160a <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	28 97       	sbiw	r28, 0x08	; 8
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1622:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <next_col_ptr>
    1626:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <next_col_ptr+0x1>
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	81 f0       	breq	.+32     	; 0x164e <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    162e:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1630:	10 ff       	sbrs	r17, 0
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1634:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <next_col_ptr+0x1>
    1638:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    163c:	00 e0       	ldi	r16, 0x00	; 0
    163e:	6b c0       	rjmp	.+214    	; 0x1716 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1640:	31 96       	adiw	r30, 0x01	; 1
    1642:	f0 93 00 02 	sts	0x0200, r31	; 0x800200 <next_col_ptr+0x1>
    1646:	e0 93 ff 01 	sts	0x01FF, r30	; 0x8001ff <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    164a:	00 e0       	ldi	r16, 0x00	; 0
    164c:	64 c0       	rjmp	.+200    	; 0x1716 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    164e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <next_char_to_display>
    1652:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <next_char_to_display+0x1>
    1656:	30 97       	sbiw	r30, 0x00	; 0
    1658:	09 f4       	brne	.+2      	; 0x165c <scroll_display+0x52>
    165a:	49 c0       	rjmp	.+146    	; 0x16ee <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    165c:	cf 01       	movw	r24, r30
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <next_char_to_display+0x1>
    1664:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <next_char_to_display>
    1668:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    166a:	e1 11       	cpse	r30, r1
    166c:	0a c0       	rjmp	.+20     	; 0x1682 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    166e:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <next_char_to_display+0x1>
    1672:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <next_char_to_display>
			shift_countdown = 16;
    1676:	80 e1       	ldi	r24, 0x10	; 16
    1678:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    167c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	4a c0       	rjmp	.+148    	; 0x1716 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1682:	8f e9       	ldi	r24, 0x9F	; 159
    1684:	8e 0f       	add	r24, r30
    1686:	8a 31       	cpi	r24, 0x1A	; 26
    1688:	70 f4       	brcc	.+28     	; 0x16a6 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ee 52       	subi	r30, 0x2E	; 46
    1692:	fb 4f       	sbci	r31, 0xFB	; 251
    1694:	85 91       	lpm	r24, Z+
    1696:	94 91       	lpm	r25, Z
    1698:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <next_col_ptr+0x1>
    169c:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16a0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	38 c0       	rjmp	.+112    	; 0x1716 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    16a6:	8f eb       	ldi	r24, 0xBF	; 191
    16a8:	8e 0f       	add	r24, r30
    16aa:	8a 31       	cpi	r24, 0x1A	; 26
    16ac:	70 f4       	brcc	.+28     	; 0x16ca <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 5e       	subi	r30, 0xEE	; 238
    16b6:	fa 4f       	sbci	r31, 0xFA	; 250
    16b8:	85 91       	lpm	r24, Z+
    16ba:	94 91       	lpm	r25, Z
    16bc:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <next_col_ptr+0x1>
    16c0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16c4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16c6:	10 e0       	ldi	r17, 0x00	; 0
    16c8:	26 c0       	rjmp	.+76     	; 0x1716 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    16ca:	80 ed       	ldi	r24, 0xD0	; 208
    16cc:	8e 0f       	add	r24, r30
    16ce:	8a 30       	cpi	r24, 0x0A	; 10
    16d0:	00 f5       	brcc	.+64     	; 0x1712 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	e0 5e       	subi	r30, 0xE0	; 224
    16da:	fa 4f       	sbci	r31, 0xFA	; 250
    16dc:	85 91       	lpm	r24, Z+
    16de:	94 91       	lpm	r25, Z
    16e0:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <next_col_ptr+0x1>
    16e4:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16e8:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    16ee:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <display_string>
    16f2:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    16f6:	01 e0       	ldi	r16, 0x01	; 1
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	09 f0       	breq	.+2      	; 0x16fe <scroll_display+0xf4>
    16fc:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    16fe:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <next_char_to_display+0x1>
    1702:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <next_char_to_display>
		display_string = 0;
    1706:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <display_string+0x1>
    170a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    170e:	10 e0       	ldi	r17, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1712:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1714:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1716:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    171a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    171e:	fe 01       	movw	r30, r28
    1720:	38 96       	adiw	r30, 0x08	; 8
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1726:	11 23       	and	r17, r17
    1728:	14 f4       	brge	.+4      	; 0x172e <scroll_display+0x124>
			column_colour_data[i] = colour;
    172a:	20 83       	st	Z, r18
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    172e:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1730:	11 0f       	add	r17, r17
    1732:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1734:	e8 17       	cp	r30, r24
    1736:	f9 07       	cpc	r31, r25
    1738:	b1 f7       	brne	.-20     	; 0x1726 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    173a:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    173c:	be 01       	movw	r22, r28
    173e:	6f 5f       	subi	r22, 0xFF	; 255
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	8f e0       	ldi	r24, 0x0F	; 15
    1744:	0e 94 5e 09 	call	0x12bc	; 0x12bc <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1748:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <shift_countdown.1854>
    174c:	88 23       	and	r24, r24
    174e:	89 f0       	breq	.+34     	; 0x1772 <scroll_display+0x168>
		shift_countdown--;
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1756:	00 23       	and	r16, r16
    1758:	11 f0       	breq	.+4      	; 0x175e <scroll_display+0x154>
    175a:	88 23       	and	r24, r24
    175c:	11 f0       	breq	.+4      	; 0x1762 <scroll_display+0x158>
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <scroll_display+0x15e>
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <scroll_display+0x15e>
    1766:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	99 23       	and	r25, r25
    176c:	29 f0       	breq	.+10     	; 0x1778 <scroll_display+0x16e>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1772:	00 23       	and	r16, r16
    1774:	a1 f3       	breq	.-24     	; 0x175e <scroll_display+0x154>
    1776:	f7 cf       	rjmp	.-18     	; 0x1766 <scroll_display+0x15c>
	return !finished;
}
    1778:	28 96       	adiw	r28, 0x08	; 8
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	08 95       	ret

0000178e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    178e:	cf 93       	push	r28
    1790:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1792:	8a 30       	cpi	r24, 0x0A	; 10
    1794:	19 f4       	brne	.+6      	; 0x179c <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1796:	8d e0       	ldi	r24, 0x0D	; 13
    1798:	0e 94 c7 0b 	call	0x178e	; 0x178e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    179c:	9f b7       	in	r25, 0x3f	; 63
    179e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    17a2:	99 23       	and	r25, r25
    17a4:	29 f1       	breq	.+74     	; 0x17f0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    17a6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    17aa:	8f 3f       	cpi	r24, 0xFF	; 255
    17ac:	d1 f3       	breq	.-12     	; 0x17a2 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    17ae:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    17b0:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <out_insert_pos>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	8e 0f       	add	r24, r30
    17b8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <out_insert_pos>
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	e4 5f       	subi	r30, 0xF4	; 244
    17c0:	fd 4f       	sbci	r31, 0xFD	; 253
    17c2:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    17c4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    17ce:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <out_insert_pos>
    17d2:	8f 3f       	cpi	r24, 0xFF	; 255
    17d4:	11 f4       	brne	.+4      	; 0x17da <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    17d6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    17da:	e1 ec       	ldi	r30, 0xC1	; 193
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	80 62       	ori	r24, 0x20	; 32
    17e2:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    17e4:	99 23       	and	r25, r25
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <uart_put_char+0x68>
		sei();
    17e8:	78 94       	sei
	}
	return 0;
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	05 c0       	rjmp	.+10     	; 0x17fa <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
}
    17fa:	cf 91       	pop	r28
    17fc:	08 95       	ret

000017fe <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    17fe:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <bytes_in_input_buffer>
    1802:	88 23       	and	r24, r24
    1804:	e1 f3       	breq	.-8      	; 0x17fe <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1806:	2f b7       	in	r18, 0x3f	; 63
    1808:	20 78       	andi	r18, 0x80	; 128
	cli();
    180a:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    180c:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <input_insert_pos>
    1810:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <bytes_in_input_buffer>
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	83 1b       	sub	r24, r19
    1818:	91 09       	sbc	r25, r1
    181a:	5a f4       	brpl	.+22     	; 0x1832 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    181c:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <input_insert_pos>
    1820:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	e8 1b       	sub	r30, r24
    1828:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    182a:	e4 5e       	subi	r30, 0xE4	; 228
    182c:	fc 4f       	sbci	r31, 0xFC	; 252
    182e:	80 81       	ld	r24, Z
    1830:	0a c0       	rjmp	.+20     	; 0x1846 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1832:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <input_insert_pos>
    1836:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <bytes_in_input_buffer>
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	e8 1b       	sub	r30, r24
    183e:	f1 09       	sbc	r31, r1
    1840:	e4 5f       	subi	r30, 0xF4	; 244
    1842:	fc 4f       	sbci	r31, 0xFC	; 252
    1844:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1846:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <bytes_in_input_buffer>
    184a:	91 50       	subi	r25, 0x01	; 1
    184c:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1850:	22 23       	and	r18, r18
    1852:	09 f0       	breq	.+2      	; 0x1856 <uart_get_char+0x58>
		sei();
    1854:	78 94       	sei
	}	
	return c;
}
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	08 95       	ret

0000185a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    185a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <out_insert_pos>
	bytes_in_out_buffer = 0;
    185e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <bytes_in_out_buffer>
	input_insert_pos = 0;
    1862:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1866:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <bytes_in_input_buffer>
	input_overrun = 0;
    186a:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    186e:	40 93 01 02 	sts	0x0201, r20	; 0x800201 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	aa 1f       	adc	r26, r26
    187c:	bb 1f       	adc	r27, r27
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	aa 1f       	adc	r26, r26
    1884:	bb 1f       	adc	r27, r27
    1886:	9c 01       	movw	r18, r24
    1888:	ad 01       	movw	r20, r26
    188a:	22 0f       	add	r18, r18
    188c:	33 1f       	adc	r19, r19
    188e:	44 1f       	adc	r20, r20
    1890:	55 1f       	adc	r21, r21
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	72 e1       	ldi	r23, 0x12	; 18
    1896:	8a e7       	ldi	r24, 0x7A	; 122
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodsi4>
    189e:	ba 01       	movw	r22, r20
    18a0:	a9 01       	movw	r20, r18
    18a2:	4f 5f       	subi	r20, 0xFF	; 255
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	6f 4f       	sbci	r22, 0xFF	; 255
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	db 01       	movw	r26, r22
    18ac:	ca 01       	movw	r24, r20
    18ae:	1a f4       	brpl	.+6      	; 0x18b6 <init_serial_stdio+0x5c>
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	a1 1d       	adc	r26, r1
    18b4:	b1 1d       	adc	r27, r1
    18b6:	b5 95       	asr	r27
    18b8:	a7 95       	ror	r26
    18ba:	97 95       	ror	r25
    18bc:	87 95       	ror	r24
    18be:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    18c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    18c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    18c8:	e1 ec       	ldi	r30, 0xC1	; 193
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	88 e1       	ldi	r24, 0x18	; 24
    18ce:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    18d6:	ee e1       	ldi	r30, 0x1E	; 30
    18d8:	f3 e0       	ldi	r31, 0x03	; 3
    18da:	85 e0       	ldi	r24, 0x05	; 5
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	93 83       	std	Z+3, r25	; 0x03
    18e0:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	08 95       	ret

000018e8 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    18e8:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <bytes_in_input_buffer>
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	91 11       	cpse	r25, r1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <serial_input_available+0xc>
    18f2:	80 e0       	ldi	r24, 0x00	; 0
}
    18f4:	08 95       	ret

000018f6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    18f6:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <input_insert_pos>
	bytes_in_input_buffer = 0;
    18fa:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <bytes_in_input_buffer>
    18fe:	08 95       	ret

00001900 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1900:	1f 92       	push	r1
    1902:	0f 92       	push	r0
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	0f 92       	push	r0
    1908:	11 24       	eor	r1, r1
    190a:	2f 93       	push	r18
    190c:	8f 93       	push	r24
    190e:	9f 93       	push	r25
    1910:	ef 93       	push	r30
    1912:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1914:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    1918:	88 23       	and	r24, r24
    191a:	29 f1       	breq	.+74     	; 0x1966 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    191c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <out_insert_pos>
    1920:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <bytes_in_out_buffer>
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	82 1b       	sub	r24, r18
    1928:	91 09       	sbc	r25, r1
    192a:	5a f4       	brpl	.+22     	; 0x1942 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    192c:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <out_insert_pos>
    1930:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	e8 1b       	sub	r30, r24
    1938:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    193a:	e5 5f       	subi	r30, 0xF5	; 245
    193c:	fc 4f       	sbci	r31, 0xFC	; 252
    193e:	90 81       	ld	r25, Z
    1940:	0a c0       	rjmp	.+20     	; 0x1956 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1942:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <out_insert_pos>
    1946:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	e8 1b       	sub	r30, r24
    194e:	f1 09       	sbc	r31, r1
    1950:	e4 5f       	subi	r30, 0xF4	; 244
    1952:	fd 4f       	sbci	r31, 0xFD	; 253
    1954:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1956:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    195a:	81 50       	subi	r24, 0x01	; 1
    195c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1960:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1966:	e1 ec       	ldi	r30, 0xC1	; 193
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8f 7d       	andi	r24, 0xDF	; 223
    196e:	80 83       	st	Z, r24
	}
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1984:	1f 92       	push	r1
    1986:	0f 92       	push	r0
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	0f 92       	push	r0
    198c:	11 24       	eor	r1, r1
    198e:	2f 93       	push	r18
    1990:	3f 93       	push	r19
    1992:	4f 93       	push	r20
    1994:	5f 93       	push	r21
    1996:	6f 93       	push	r22
    1998:	7f 93       	push	r23
    199a:	8f 93       	push	r24
    199c:	9f 93       	push	r25
    199e:	af 93       	push	r26
    19a0:	bf 93       	push	r27
    19a2:	cf 93       	push	r28
    19a4:	ef 93       	push	r30
    19a6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    19a8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    19ac:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <do_echo>
    19b0:	88 23       	and	r24, r24
    19b2:	49 f0       	breq	.+18     	; 0x19c6 <__vector_20+0x42>
    19b4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <bytes_in_out_buffer>
    19b8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	8c 2f       	mov	r24, r28
    19c2:	0e 94 c7 0b 	call	0x178e	; 0x178e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    19c6:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <bytes_in_input_buffer>
    19ca:	80 31       	cpi	r24, 0x10	; 16
    19cc:	20 f0       	brcs	.+8      	; 0x19d6 <__vector_20+0x52>
		input_overrun = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <input_overrun>
    19d4:	18 c0       	rjmp	.+48     	; 0x1a06 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    19d6:	cd 30       	cpi	r28, 0x0D	; 13
    19d8:	09 f4       	brne	.+2      	; 0x19dc <__vector_20+0x58>
			c = '\n';
    19da:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    19dc:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <input_insert_pos>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	8e 0f       	add	r24, r30
    19e4:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <input_insert_pos>
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	e4 5f       	subi	r30, 0xF4	; 244
    19ec:	fc 4f       	sbci	r31, 0xFC	; 252
    19ee:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    19f0:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <bytes_in_input_buffer>
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    19fa:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <input_insert_pos>
    19fe:	80 31       	cpi	r24, 0x10	; 16
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1a02:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <input_insert_pos>
		}
	}
}
    1a06:	ff 91       	pop	r31
    1a08:	ef 91       	pop	r30
    1a0a:	cf 91       	pop	r28
    1a0c:	bf 91       	pop	r27
    1a0e:	af 91       	pop	r26
    1a10:	9f 91       	pop	r25
    1a12:	8f 91       	pop	r24
    1a14:	7f 91       	pop	r23
    1a16:	6f 91       	pop	r22
    1a18:	5f 91       	pop	r21
    1a1a:	4f 91       	pop	r20
    1a1c:	3f 91       	pop	r19
    1a1e:	2f 91       	pop	r18
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1a2a:	94 b1       	in	r25, 0x04	; 4
    1a2c:	90 6b       	ori	r25, 0xB0	; 176
    1a2e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1a30:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1a32:	90 e5       	ldi	r25, 0x50	; 80
    1a34:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1a36:	88 30       	cpi	r24, 0x08	; 8
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <spi_setup_master+0x18>
    1a3a:	80 32       	cpi	r24, 0x20	; 32
    1a3c:	11 f0       	breq	.+4      	; 0x1a42 <spi_setup_master+0x18>
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	19 f4       	brne	.+6      	; 0x1a48 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	9d bd       	out	0x2d, r25	; 45
			break;
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1a48:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1a4a:	80 32       	cpi	r24, 0x20	; 32
    1a4c:	69 f0       	breq	.+26     	; 0x1a68 <spi_setup_master+0x3e>
    1a4e:	28 f4       	brcc	.+10     	; 0x1a5a <spi_setup_master+0x30>
    1a50:	88 30       	cpi	r24, 0x08	; 8
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <spi_setup_master+0x46>
    1a54:	80 31       	cpi	r24, 0x10	; 16
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <spi_setup_master+0x46>
    1a58:	0e c0       	rjmp	.+28     	; 0x1a76 <spi_setup_master+0x4c>
    1a5a:	80 34       	cpi	r24, 0x40	; 64
    1a5c:	29 f0       	breq	.+10     	; 0x1a68 <spi_setup_master+0x3e>
    1a5e:	80 38       	cpi	r24, 0x80	; 128
    1a60:	51 f4       	brne	.+20     	; 0x1a76 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1a62:	8c b5       	in	r24, 0x2c	; 44
    1a64:	81 60       	ori	r24, 0x01	; 1
    1a66:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1a68:	8c b5       	in	r24, 0x2c	; 44
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	8c bd       	out	0x2c, r24	; 44
			break;
    1a6e:	03 c0       	rjmp	.+6      	; 0x1a76 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1a70:	8c b5       	in	r24, 0x2c	; 44
    1a72:	81 60       	ori	r24, 0x01	; 1
    1a74:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1a76:	2c 98       	cbi	0x05, 4	; 5
    1a78:	08 95       	ret

00001a7a <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1a7a:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1a7c:	0d b4       	in	r0, 0x2d	; 45
    1a7e:	07 fe       	sbrs	r0, 7
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1a82:	8e b5       	in	r24, 0x2e	; 46
    1a84:	08 95       	ret

00001a86 <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	7f 93       	push	r23
    1a8c:	6f 93       	push	r22
    1a8e:	85 e7       	ldi	r24, 0x75	; 117
    1a90:	96 e0       	ldi	r25, 0x06	; 6
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	0f 90       	pop	r0
    1aa6:	08 95       	ret

00001aa8 <normal_display_mode>:
    1aa8:	80 e7       	ldi	r24, 0x70	; 112
    1aaa:	96 e0       	ldi	r25, 0x06	; 6
    1aac:	9f 93       	push	r25
    1aae:	8f 93       	push	r24
    1ab0:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	08 95       	ret

00001aba <clear_terminal>:
    1aba:	8b e6       	ldi	r24, 0x6B	; 107
    1abc:	96 e0       	ldi	r25, 0x06	; 6
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	08 95       	ret

00001acc <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1acc:	1f 92       	push	r1
    1ace:	8f 93       	push	r24
    1ad0:	85 e6       	ldi	r24, 0x65	; 101
    1ad2:	96 e0       	ldi	r25, 0x06	; 6
    1ad4:	9f 93       	push	r25
    1ad6:	8f 93       	push	r24
    1ad8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	08 95       	ret

00001ae6 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1ae6:	8e e5       	ldi	r24, 0x5E	; 94
    1ae8:	96 e0       	ldi	r25, 0x06	; 6
    1aea:	9f 93       	push	r25
    1aec:	8f 93       	push	r24
    1aee:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <printf_P>
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	08 95       	ret

00001af8 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1af8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <clockTicks>
    1afc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <clockTicks+0x1>
    1b00:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <clockTicks+0x2>
    1b04:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    1b08:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1b0a:	8c e7       	ldi	r24, 0x7C	; 124
    1b0c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1b16:	ee e6       	ldi	r30, 0x6E	; 110
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	82 60       	ori	r24, 0x02	; 2
    1b1e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1b20:	85 b3       	in	r24, 0x15	; 21
    1b22:	82 70       	andi	r24, 0x02	; 2
    1b24:	85 bb       	out	0x15, r24	; 21
    1b26:	08 95       	ret

00001b28 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1b28:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1b2a:	f8 94       	cli
	returnValue = clockTicks;
    1b2c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <clockTicks>
    1b30:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <clockTicks+0x1>
    1b34:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <clockTicks+0x2>
    1b38:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <clockTicks+0x3>
	if(interruptsOn) {
    1b3c:	22 23       	and	r18, r18
    1b3e:	0c f4       	brge	.+2      	; 0x1b42 <get_current_time+0x1a>
		sei();
    1b40:	78 94       	sei
	}
	return returnValue;
}
    1b42:	08 95       	ret

00001b44 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	af 93       	push	r26
    1b54:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    1b56:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <clockTicks>
    1b5a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <clockTicks+0x1>
    1b5e:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <clockTicks+0x2>
    1b62:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <clockTicks+0x3>
    1b66:	01 96       	adiw	r24, 0x01	; 1
    1b68:	a1 1d       	adc	r26, r1
    1b6a:	b1 1d       	adc	r27, r1
    1b6c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <clockTicks>
    1b70:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <clockTicks+0x1>
    1b74:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <clockTicks+0x2>
    1b78:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <clockTicks+0x3>
}
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	0f 90       	pop	r0
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	0f 90       	pop	r0
    1b8a:	1f 90       	pop	r1
    1b8c:	18 95       	reti

00001b8e <__divmodsi4>:
    1b8e:	05 2e       	mov	r0, r21
    1b90:	97 fb       	bst	r25, 7
    1b92:	1e f4       	brtc	.+6      	; 0x1b9a <__divmodsi4+0xc>
    1b94:	00 94       	com	r0
    1b96:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__negsi2>
    1b9a:	57 fd       	sbrc	r21, 7
    1b9c:	07 d0       	rcall	.+14     	; 0x1bac <__divmodsi4_neg2>
    1b9e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__udivmodsi4>
    1ba2:	07 fc       	sbrc	r0, 7
    1ba4:	03 d0       	rcall	.+6      	; 0x1bac <__divmodsi4_neg2>
    1ba6:	4e f4       	brtc	.+18     	; 0x1bba <__divmodsi4_exit>
    1ba8:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <__negsi2>

00001bac <__divmodsi4_neg2>:
    1bac:	50 95       	com	r21
    1bae:	40 95       	com	r20
    1bb0:	30 95       	com	r19
    1bb2:	21 95       	neg	r18
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bba <__divmodsi4_exit>:
    1bba:	08 95       	ret

00001bbc <__negsi2>:
    1bbc:	90 95       	com	r25
    1bbe:	80 95       	com	r24
    1bc0:	70 95       	com	r23
    1bc2:	61 95       	neg	r22
    1bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bca:	08 95       	ret

00001bcc <__tablejump2__>:
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	05 90       	lpm	r0, Z+
    1bd2:	f4 91       	lpm	r31, Z
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	09 94       	ijmp

00001bd8 <__udivmodsi4>:
    1bd8:	a1 e2       	ldi	r26, 0x21	; 33
    1bda:	1a 2e       	mov	r1, r26
    1bdc:	aa 1b       	sub	r26, r26
    1bde:	bb 1b       	sub	r27, r27
    1be0:	fd 01       	movw	r30, r26
    1be2:	0d c0       	rjmp	.+26     	; 0x1bfe <__udivmodsi4_ep>

00001be4 <__udivmodsi4_loop>:
    1be4:	aa 1f       	adc	r26, r26
    1be6:	bb 1f       	adc	r27, r27
    1be8:	ee 1f       	adc	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	a2 17       	cp	r26, r18
    1bee:	b3 07       	cpc	r27, r19
    1bf0:	e4 07       	cpc	r30, r20
    1bf2:	f5 07       	cpc	r31, r21
    1bf4:	20 f0       	brcs	.+8      	; 0x1bfe <__udivmodsi4_ep>
    1bf6:	a2 1b       	sub	r26, r18
    1bf8:	b3 0b       	sbc	r27, r19
    1bfa:	e4 0b       	sbc	r30, r20
    1bfc:	f5 0b       	sbc	r31, r21

00001bfe <__udivmodsi4_ep>:
    1bfe:	66 1f       	adc	r22, r22
    1c00:	77 1f       	adc	r23, r23
    1c02:	88 1f       	adc	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	1a 94       	dec	r1
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <__udivmodsi4_loop>
    1c0a:	60 95       	com	r22
    1c0c:	70 95       	com	r23
    1c0e:	80 95       	com	r24
    1c10:	90 95       	com	r25
    1c12:	9b 01       	movw	r18, r22
    1c14:	ac 01       	movw	r20, r24
    1c16:	bd 01       	movw	r22, r26
    1c18:	cf 01       	movw	r24, r30
    1c1a:	08 95       	ret

00001c1c <random_r>:
    1c1c:	8f 92       	push	r8
    1c1e:	9f 92       	push	r9
    1c20:	af 92       	push	r10
    1c22:	bf 92       	push	r11
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
    1c32:	68 81       	ld	r22, Y
    1c34:	79 81       	ldd	r23, Y+1	; 0x01
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	61 15       	cp	r22, r1
    1c3c:	71 05       	cpc	r23, r1
    1c3e:	81 05       	cpc	r24, r1
    1c40:	91 05       	cpc	r25, r1
    1c42:	21 f4       	brne	.+8      	; 0x1c4c <random_r+0x30>
    1c44:	64 e2       	ldi	r22, 0x24	; 36
    1c46:	79 ed       	ldi	r23, 0xD9	; 217
    1c48:	8b e5       	ldi	r24, 0x5B	; 91
    1c4a:	97 e0       	ldi	r25, 0x07	; 7
    1c4c:	2d e1       	ldi	r18, 0x1D	; 29
    1c4e:	33 ef       	ldi	r19, 0xF3	; 243
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodsi4>
    1c58:	49 01       	movw	r8, r18
    1c5a:	5a 01       	movw	r10, r20
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	a7 ea       	ldi	r26, 0xA7	; 167
    1c62:	b1 e4       	ldi	r27, 0x41	; 65
    1c64:	0e 94 c2 11 	call	0x2384	; 0x2384 <__muluhisi3>
    1c68:	6b 01       	movw	r12, r22
    1c6a:	7c 01       	movw	r14, r24
    1c6c:	ac ee       	ldi	r26, 0xEC	; 236
    1c6e:	b4 ef       	ldi	r27, 0xF4	; 244
    1c70:	a5 01       	movw	r20, r10
    1c72:	94 01       	movw	r18, r8
    1c74:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__mulohisi3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	8c 0d       	add	r24, r12
    1c7e:	9d 1d       	adc	r25, r13
    1c80:	ae 1d       	adc	r26, r14
    1c82:	bf 1d       	adc	r27, r15
    1c84:	b7 ff       	sbrs	r27, 7
    1c86:	03 c0       	rjmp	.+6      	; 0x1c8e <random_r+0x72>
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	a1 09       	sbc	r26, r1
    1c8c:	b0 48       	sbci	r27, 0x80	; 128
    1c8e:	88 83       	st	Y, r24
    1c90:	99 83       	std	Y+1, r25	; 0x01
    1c92:	aa 83       	std	Y+2, r26	; 0x02
    1c94:	bb 83       	std	Y+3, r27	; 0x03
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	9f 77       	andi	r25, 0x7F	; 127
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	ff 90       	pop	r15
    1ca2:	ef 90       	pop	r14
    1ca4:	df 90       	pop	r13
    1ca6:	cf 90       	pop	r12
    1ca8:	bf 90       	pop	r11
    1caa:	af 90       	pop	r10
    1cac:	9f 90       	pop	r9
    1cae:	8f 90       	pop	r8
    1cb0:	08 95       	ret

00001cb2 <random>:
    1cb2:	8f 92       	push	r8
    1cb4:	9f 92       	push	r9
    1cb6:	af 92       	push	r10
    1cb8:	bf 92       	push	r11
    1cba:	cf 92       	push	r12
    1cbc:	df 92       	push	r13
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1cc6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1cca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1cce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1cd2:	61 15       	cp	r22, r1
    1cd4:	71 05       	cpc	r23, r1
    1cd6:	81 05       	cpc	r24, r1
    1cd8:	91 05       	cpc	r25, r1
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <random+0x32>
    1cdc:	64 e2       	ldi	r22, 0x24	; 36
    1cde:	79 ed       	ldi	r23, 0xD9	; 217
    1ce0:	8b e5       	ldi	r24, 0x5B	; 91
    1ce2:	97 e0       	ldi	r25, 0x07	; 7
    1ce4:	2d e1       	ldi	r18, 0x1D	; 29
    1ce6:	33 ef       	ldi	r19, 0xF3	; 243
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodsi4>
    1cf0:	49 01       	movw	r8, r18
    1cf2:	5a 01       	movw	r10, r20
    1cf4:	9b 01       	movw	r18, r22
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	a7 ea       	ldi	r26, 0xA7	; 167
    1cfa:	b1 e4       	ldi	r27, 0x41	; 65
    1cfc:	0e 94 c2 11 	call	0x2384	; 0x2384 <__muluhisi3>
    1d00:	6b 01       	movw	r12, r22
    1d02:	7c 01       	movw	r14, r24
    1d04:	ac ee       	ldi	r26, 0xEC	; 236
    1d06:	b4 ef       	ldi	r27, 0xF4	; 244
    1d08:	a5 01       	movw	r20, r10
    1d0a:	94 01       	movw	r18, r8
    1d0c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__mulohisi3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8c 0d       	add	r24, r12
    1d16:	9d 1d       	adc	r25, r13
    1d18:	ae 1d       	adc	r26, r14
    1d1a:	bf 1d       	adc	r27, r15
    1d1c:	b7 ff       	sbrs	r27, 7
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <random+0x74>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	a1 09       	sbc	r26, r1
    1d24:	b0 48       	sbci	r27, 0x80	; 128
    1d26:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1d2a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1d2e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1d32:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	9f 77       	andi	r25, 0x7F	; 127
    1d3c:	ff 90       	pop	r15
    1d3e:	ef 90       	pop	r14
    1d40:	df 90       	pop	r13
    1d42:	cf 90       	pop	r12
    1d44:	bf 90       	pop	r11
    1d46:	af 90       	pop	r10
    1d48:	9f 90       	pop	r9
    1d4a:	8f 90       	pop	r8
    1d4c:	08 95       	ret

00001d4e <srandom>:
    1d4e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1d52:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1d56:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1d5a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1d5e:	08 95       	ret

00001d60 <fgetc>:
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	ec 01       	movw	r28, r24
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	20 ff       	sbrs	r18, 0
    1d6a:	33 c0       	rjmp	.+102    	; 0x1dd2 <fgetc+0x72>
    1d6c:	26 ff       	sbrs	r18, 6
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <fgetc+0x24>
    1d70:	2f 7b       	andi	r18, 0xBF	; 191
    1d72:	2b 83       	std	Y+3, r18	; 0x03
    1d74:	8e 81       	ldd	r24, Y+6	; 0x06
    1d76:	9f 81       	ldd	r25, Y+7	; 0x07
    1d78:	01 96       	adiw	r24, 0x01	; 1
    1d7a:	9f 83       	std	Y+7, r25	; 0x07
    1d7c:	8e 83       	std	Y+6, r24	; 0x06
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	29 c0       	rjmp	.+82     	; 0x1dd6 <fgetc+0x76>
    1d84:	22 ff       	sbrs	r18, 2
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <fgetc+0x46>
    1d88:	e8 81       	ld	r30, Y
    1d8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d8c:	80 81       	ld	r24, Z
    1d8e:	08 2e       	mov	r0, r24
    1d90:	00 0c       	add	r0, r0
    1d92:	99 0b       	sbc	r25, r25
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <fgetc+0x3e>
    1d98:	20 62       	ori	r18, 0x20	; 32
    1d9a:	2b 83       	std	Y+3, r18	; 0x03
    1d9c:	1a c0       	rjmp	.+52     	; 0x1dd2 <fgetc+0x72>
    1d9e:	31 96       	adiw	r30, 0x01	; 1
    1da0:	f9 83       	std	Y+1, r31	; 0x01
    1da2:	e8 83       	st	Y, r30
    1da4:	0e c0       	rjmp	.+28     	; 0x1dc2 <fgetc+0x62>
    1da6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1da8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1daa:	09 95       	icall
    1dac:	97 ff       	sbrs	r25, 7
    1dae:	09 c0       	rjmp	.+18     	; 0x1dc2 <fgetc+0x62>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	11 f0       	breq	.+4      	; 0x1dba <fgetc+0x5a>
    1db6:	80 e2       	ldi	r24, 0x20	; 32
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <fgetc+0x5c>
    1dba:	80 e1       	ldi	r24, 0x10	; 16
    1dbc:	82 2b       	or	r24, r18
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	08 c0       	rjmp	.+16     	; 0x1dd2 <fgetc+0x72>
    1dc2:	2e 81       	ldd	r18, Y+6	; 0x06
    1dc4:	3f 81       	ldd	r19, Y+7	; 0x07
    1dc6:	2f 5f       	subi	r18, 0xFF	; 255
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	3f 83       	std	Y+7, r19	; 0x07
    1dcc:	2e 83       	std	Y+6, r18	; 0x06
    1dce:	99 27       	eor	r25, r25
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <fgetc+0x76>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	08 95       	ret

00001ddc <printf>:
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e4 ef       	ldi	r30, 0xF4	; 244
    1de2:	fe e0       	ldi	r31, 0x0E	; 14
    1de4:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__prologue_saves__+0x20>
    1de8:	ae 01       	movw	r20, r28
    1dea:	4b 5f       	subi	r20, 0xFB	; 251
    1dec:	5f 4f       	sbci	r21, 0xFF	; 255
    1dee:	fa 01       	movw	r30, r20
    1df0:	61 91       	ld	r22, Z+
    1df2:	71 91       	ld	r23, Z+
    1df4:	af 01       	movw	r20, r30
    1df6:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <__iob+0x2>
    1dfa:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <__iob+0x3>
    1dfe:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vfprintf>
    1e02:	e2 e0       	ldi	r30, 0x02	; 2
    1e04:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__epilogue_restores__+0x20>

00001e08 <printf_P>:
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e0       	ldi	r30, 0x0A	; 10
    1e0e:	ff e0       	ldi	r31, 0x0F	; 15
    1e10:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__prologue_saves__+0x1c>
    1e14:	ae 01       	movw	r20, r28
    1e16:	49 5f       	subi	r20, 0xF9	; 249
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	da 01       	movw	r26, r20
    1e1c:	6d 91       	ld	r22, X+
    1e1e:	7d 91       	ld	r23, X+
    1e20:	ad 01       	movw	r20, r26
    1e22:	0e e1       	ldi	r16, 0x1E	; 30
    1e24:	13 e0       	ldi	r17, 0x03	; 3
    1e26:	f8 01       	movw	r30, r16
    1e28:	82 81       	ldd	r24, Z+2	; 0x02
    1e2a:	93 81       	ldd	r25, Z+3	; 0x03
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	13 96       	adiw	r26, 0x03	; 3
    1e30:	2c 91       	ld	r18, X
    1e32:	13 97       	sbiw	r26, 0x03	; 3
    1e34:	28 60       	ori	r18, 0x08	; 8
    1e36:	13 96       	adiw	r26, 0x03	; 3
    1e38:	2c 93       	st	X, r18
    1e3a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <vfprintf>
    1e3e:	d8 01       	movw	r26, r16
    1e40:	12 96       	adiw	r26, 0x02	; 2
    1e42:	ed 91       	ld	r30, X+
    1e44:	fc 91       	ld	r31, X
    1e46:	13 97       	sbiw	r26, 0x03	; 3
    1e48:	23 81       	ldd	r18, Z+3	; 0x03
    1e4a:	27 7f       	andi	r18, 0xF7	; 247
    1e4c:	23 83       	std	Z+3, r18	; 0x03
    1e4e:	e4 e0       	ldi	r30, 0x04	; 4
    1e50:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__epilogue_restores__+0x1c>

00001e54 <putchar>:
    1e54:	60 91 20 03 	lds	r22, 0x0320	; 0x800320 <__iob+0x2>
    1e58:	70 91 21 03 	lds	r23, 0x0321	; 0x800321 <__iob+0x3>
    1e5c:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    1e60:	08 95       	ret

00001e62 <vfprintf>:
    1e62:	ab e0       	ldi	r26, 0x0B	; 11
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e7 e3       	ldi	r30, 0x37	; 55
    1e68:	ff e0       	ldi	r31, 0x0F	; 15
    1e6a:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__prologue_saves__>
    1e6e:	6c 01       	movw	r12, r24
    1e70:	7b 01       	movw	r14, r22
    1e72:	8a 01       	movw	r16, r20
    1e74:	fc 01       	movw	r30, r24
    1e76:	17 82       	std	Z+7, r1	; 0x07
    1e78:	16 82       	std	Z+6, r1	; 0x06
    1e7a:	83 81       	ldd	r24, Z+3	; 0x03
    1e7c:	81 ff       	sbrs	r24, 1
    1e7e:	cc c1       	rjmp	.+920    	; 0x2218 <vfprintf+0x3b6>
    1e80:	ce 01       	movw	r24, r28
    1e82:	01 96       	adiw	r24, 0x01	; 1
    1e84:	3c 01       	movw	r6, r24
    1e86:	f6 01       	movw	r30, r12
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	f7 01       	movw	r30, r14
    1e8c:	93 fd       	sbrc	r25, 3
    1e8e:	85 91       	lpm	r24, Z+
    1e90:	93 ff       	sbrs	r25, 3
    1e92:	81 91       	ld	r24, Z+
    1e94:	7f 01       	movw	r14, r30
    1e96:	88 23       	and	r24, r24
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <vfprintf+0x3a>
    1e9a:	ba c1       	rjmp	.+884    	; 0x2210 <vfprintf+0x3ae>
    1e9c:	85 32       	cpi	r24, 0x25	; 37
    1e9e:	39 f4       	brne	.+14     	; 0x1eae <vfprintf+0x4c>
    1ea0:	93 fd       	sbrc	r25, 3
    1ea2:	85 91       	lpm	r24, Z+
    1ea4:	93 ff       	sbrs	r25, 3
    1ea6:	81 91       	ld	r24, Z+
    1ea8:	7f 01       	movw	r14, r30
    1eaa:	85 32       	cpi	r24, 0x25	; 37
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <vfprintf+0x56>
    1eae:	b6 01       	movw	r22, r12
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    1eb6:	e7 cf       	rjmp	.-50     	; 0x1e86 <vfprintf+0x24>
    1eb8:	91 2c       	mov	r9, r1
    1eba:	21 2c       	mov	r2, r1
    1ebc:	31 2c       	mov	r3, r1
    1ebe:	ff e1       	ldi	r31, 0x1F	; 31
    1ec0:	f3 15       	cp	r31, r3
    1ec2:	d8 f0       	brcs	.+54     	; 0x1efa <vfprintf+0x98>
    1ec4:	8b 32       	cpi	r24, 0x2B	; 43
    1ec6:	79 f0       	breq	.+30     	; 0x1ee6 <vfprintf+0x84>
    1ec8:	38 f4       	brcc	.+14     	; 0x1ed8 <vfprintf+0x76>
    1eca:	80 32       	cpi	r24, 0x20	; 32
    1ecc:	79 f0       	breq	.+30     	; 0x1eec <vfprintf+0x8a>
    1ece:	83 32       	cpi	r24, 0x23	; 35
    1ed0:	a1 f4       	brne	.+40     	; 0x1efa <vfprintf+0x98>
    1ed2:	23 2d       	mov	r18, r3
    1ed4:	20 61       	ori	r18, 0x10	; 16
    1ed6:	1d c0       	rjmp	.+58     	; 0x1f12 <vfprintf+0xb0>
    1ed8:	8d 32       	cpi	r24, 0x2D	; 45
    1eda:	61 f0       	breq	.+24     	; 0x1ef4 <vfprintf+0x92>
    1edc:	80 33       	cpi	r24, 0x30	; 48
    1ede:	69 f4       	brne	.+26     	; 0x1efa <vfprintf+0x98>
    1ee0:	23 2d       	mov	r18, r3
    1ee2:	21 60       	ori	r18, 0x01	; 1
    1ee4:	16 c0       	rjmp	.+44     	; 0x1f12 <vfprintf+0xb0>
    1ee6:	83 2d       	mov	r24, r3
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	38 2e       	mov	r3, r24
    1eec:	e3 2d       	mov	r30, r3
    1eee:	e4 60       	ori	r30, 0x04	; 4
    1ef0:	3e 2e       	mov	r3, r30
    1ef2:	2a c0       	rjmp	.+84     	; 0x1f48 <vfprintf+0xe6>
    1ef4:	f3 2d       	mov	r31, r3
    1ef6:	f8 60       	ori	r31, 0x08	; 8
    1ef8:	1d c0       	rjmp	.+58     	; 0x1f34 <vfprintf+0xd2>
    1efa:	37 fc       	sbrc	r3, 7
    1efc:	2d c0       	rjmp	.+90     	; 0x1f58 <vfprintf+0xf6>
    1efe:	20 ed       	ldi	r18, 0xD0	; 208
    1f00:	28 0f       	add	r18, r24
    1f02:	2a 30       	cpi	r18, 0x0A	; 10
    1f04:	40 f0       	brcs	.+16     	; 0x1f16 <vfprintf+0xb4>
    1f06:	8e 32       	cpi	r24, 0x2E	; 46
    1f08:	b9 f4       	brne	.+46     	; 0x1f38 <vfprintf+0xd6>
    1f0a:	36 fc       	sbrc	r3, 6
    1f0c:	81 c1       	rjmp	.+770    	; 0x2210 <vfprintf+0x3ae>
    1f0e:	23 2d       	mov	r18, r3
    1f10:	20 64       	ori	r18, 0x40	; 64
    1f12:	32 2e       	mov	r3, r18
    1f14:	19 c0       	rjmp	.+50     	; 0x1f48 <vfprintf+0xe6>
    1f16:	36 fe       	sbrs	r3, 6
    1f18:	06 c0       	rjmp	.+12     	; 0x1f26 <vfprintf+0xc4>
    1f1a:	8a e0       	ldi	r24, 0x0A	; 10
    1f1c:	98 9e       	mul	r9, r24
    1f1e:	20 0d       	add	r18, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	92 2e       	mov	r9, r18
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <vfprintf+0xe6>
    1f26:	ea e0       	ldi	r30, 0x0A	; 10
    1f28:	2e 9e       	mul	r2, r30
    1f2a:	20 0d       	add	r18, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	22 2e       	mov	r2, r18
    1f30:	f3 2d       	mov	r31, r3
    1f32:	f0 62       	ori	r31, 0x20	; 32
    1f34:	3f 2e       	mov	r3, r31
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <vfprintf+0xe6>
    1f38:	8c 36       	cpi	r24, 0x6C	; 108
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <vfprintf+0xe2>
    1f3c:	83 2d       	mov	r24, r3
    1f3e:	80 68       	ori	r24, 0x80	; 128
    1f40:	38 2e       	mov	r3, r24
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <vfprintf+0xe6>
    1f44:	88 36       	cpi	r24, 0x68	; 104
    1f46:	41 f4       	brne	.+16     	; 0x1f58 <vfprintf+0xf6>
    1f48:	f7 01       	movw	r30, r14
    1f4a:	93 fd       	sbrc	r25, 3
    1f4c:	85 91       	lpm	r24, Z+
    1f4e:	93 ff       	sbrs	r25, 3
    1f50:	81 91       	ld	r24, Z+
    1f52:	7f 01       	movw	r14, r30
    1f54:	81 11       	cpse	r24, r1
    1f56:	b3 cf       	rjmp	.-154    	; 0x1ebe <vfprintf+0x5c>
    1f58:	98 2f       	mov	r25, r24
    1f5a:	9f 7d       	andi	r25, 0xDF	; 223
    1f5c:	95 54       	subi	r25, 0x45	; 69
    1f5e:	93 30       	cpi	r25, 0x03	; 3
    1f60:	28 f4       	brcc	.+10     	; 0x1f6c <vfprintf+0x10a>
    1f62:	0c 5f       	subi	r16, 0xFC	; 252
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	9f e3       	ldi	r25, 0x3F	; 63
    1f68:	99 83       	std	Y+1, r25	; 0x01
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <vfprintf+0x124>
    1f6c:	83 36       	cpi	r24, 0x63	; 99
    1f6e:	31 f0       	breq	.+12     	; 0x1f7c <vfprintf+0x11a>
    1f70:	83 37       	cpi	r24, 0x73	; 115
    1f72:	71 f0       	breq	.+28     	; 0x1f90 <vfprintf+0x12e>
    1f74:	83 35       	cpi	r24, 0x53	; 83
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <vfprintf+0x118>
    1f78:	59 c0       	rjmp	.+178    	; 0x202c <vfprintf+0x1ca>
    1f7a:	21 c0       	rjmp	.+66     	; 0x1fbe <vfprintf+0x15c>
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	80 81       	ld	r24, Z
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	0e 5f       	subi	r16, 0xFE	; 254
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	88 24       	eor	r8, r8
    1f88:	83 94       	inc	r8
    1f8a:	91 2c       	mov	r9, r1
    1f8c:	53 01       	movw	r10, r6
    1f8e:	13 c0       	rjmp	.+38     	; 0x1fb6 <vfprintf+0x154>
    1f90:	28 01       	movw	r4, r16
    1f92:	f2 e0       	ldi	r31, 0x02	; 2
    1f94:	4f 0e       	add	r4, r31
    1f96:	51 1c       	adc	r5, r1
    1f98:	f8 01       	movw	r30, r16
    1f9a:	a0 80       	ld	r10, Z
    1f9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f9e:	36 fe       	sbrs	r3, 6
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <vfprintf+0x146>
    1fa2:	69 2d       	mov	r22, r9
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <vfprintf+0x14a>
    1fa8:	6f ef       	ldi	r22, 0xFF	; 255
    1faa:	7f ef       	ldi	r23, 0xFF	; 255
    1fac:	c5 01       	movw	r24, r10
    1fae:	0e 94 1d 11 	call	0x223a	; 0x223a <strnlen>
    1fb2:	4c 01       	movw	r8, r24
    1fb4:	82 01       	movw	r16, r4
    1fb6:	f3 2d       	mov	r31, r3
    1fb8:	ff 77       	andi	r31, 0x7F	; 127
    1fba:	3f 2e       	mov	r3, r31
    1fbc:	16 c0       	rjmp	.+44     	; 0x1fea <vfprintf+0x188>
    1fbe:	28 01       	movw	r4, r16
    1fc0:	22 e0       	ldi	r18, 0x02	; 2
    1fc2:	42 0e       	add	r4, r18
    1fc4:	51 1c       	adc	r5, r1
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	a0 80       	ld	r10, Z
    1fca:	b1 80       	ldd	r11, Z+1	; 0x01
    1fcc:	36 fe       	sbrs	r3, 6
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <vfprintf+0x174>
    1fd0:	69 2d       	mov	r22, r9
    1fd2:	70 e0       	ldi	r23, 0x00	; 0
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x178>
    1fd6:	6f ef       	ldi	r22, 0xFF	; 255
    1fd8:	7f ef       	ldi	r23, 0xFF	; 255
    1fda:	c5 01       	movw	r24, r10
    1fdc:	0e 94 12 11 	call	0x2224	; 0x2224 <strnlen_P>
    1fe0:	4c 01       	movw	r8, r24
    1fe2:	f3 2d       	mov	r31, r3
    1fe4:	f0 68       	ori	r31, 0x80	; 128
    1fe6:	3f 2e       	mov	r3, r31
    1fe8:	82 01       	movw	r16, r4
    1fea:	33 fc       	sbrc	r3, 3
    1fec:	1b c0       	rjmp	.+54     	; 0x2024 <vfprintf+0x1c2>
    1fee:	82 2d       	mov	r24, r2
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	88 16       	cp	r8, r24
    1ff4:	99 06       	cpc	r9, r25
    1ff6:	b0 f4       	brcc	.+44     	; 0x2024 <vfprintf+0x1c2>
    1ff8:	b6 01       	movw	r22, r12
    1ffa:	80 e2       	ldi	r24, 0x20	; 32
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    2002:	2a 94       	dec	r2
    2004:	f4 cf       	rjmp	.-24     	; 0x1fee <vfprintf+0x18c>
    2006:	f5 01       	movw	r30, r10
    2008:	37 fc       	sbrc	r3, 7
    200a:	85 91       	lpm	r24, Z+
    200c:	37 fe       	sbrs	r3, 7
    200e:	81 91       	ld	r24, Z+
    2010:	5f 01       	movw	r10, r30
    2012:	b6 01       	movw	r22, r12
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    201a:	21 10       	cpse	r2, r1
    201c:	2a 94       	dec	r2
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	82 1a       	sub	r8, r18
    2022:	91 08       	sbc	r9, r1
    2024:	81 14       	cp	r8, r1
    2026:	91 04       	cpc	r9, r1
    2028:	71 f7       	brne	.-36     	; 0x2006 <vfprintf+0x1a4>
    202a:	e8 c0       	rjmp	.+464    	; 0x21fc <vfprintf+0x39a>
    202c:	84 36       	cpi	r24, 0x64	; 100
    202e:	11 f0       	breq	.+4      	; 0x2034 <vfprintf+0x1d2>
    2030:	89 36       	cpi	r24, 0x69	; 105
    2032:	41 f5       	brne	.+80     	; 0x2084 <vfprintf+0x222>
    2034:	f8 01       	movw	r30, r16
    2036:	37 fe       	sbrs	r3, 7
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <vfprintf+0x1e6>
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	0c 5f       	subi	r16, 0xFC	; 252
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	08 c0       	rjmp	.+16     	; 0x2058 <vfprintf+0x1f6>
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	07 2e       	mov	r0, r23
    204e:	00 0c       	add	r0, r0
    2050:	88 0b       	sbc	r24, r24
    2052:	99 0b       	sbc	r25, r25
    2054:	0e 5f       	subi	r16, 0xFE	; 254
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	f3 2d       	mov	r31, r3
    205a:	ff 76       	andi	r31, 0x6F	; 111
    205c:	3f 2e       	mov	r3, r31
    205e:	97 ff       	sbrs	r25, 7
    2060:	09 c0       	rjmp	.+18     	; 0x2074 <vfprintf+0x212>
    2062:	90 95       	com	r25
    2064:	80 95       	com	r24
    2066:	70 95       	com	r23
    2068:	61 95       	neg	r22
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	8f 4f       	sbci	r24, 0xFF	; 255
    206e:	9f 4f       	sbci	r25, 0xFF	; 255
    2070:	f0 68       	ori	r31, 0x80	; 128
    2072:	3f 2e       	mov	r3, r31
    2074:	2a e0       	ldi	r18, 0x0A	; 10
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	a3 01       	movw	r20, r6
    207a:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ultoa_invert>
    207e:	88 2e       	mov	r8, r24
    2080:	86 18       	sub	r8, r6
    2082:	45 c0       	rjmp	.+138    	; 0x210e <vfprintf+0x2ac>
    2084:	85 37       	cpi	r24, 0x75	; 117
    2086:	31 f4       	brne	.+12     	; 0x2094 <vfprintf+0x232>
    2088:	23 2d       	mov	r18, r3
    208a:	2f 7e       	andi	r18, 0xEF	; 239
    208c:	b2 2e       	mov	r11, r18
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	25 c0       	rjmp	.+74     	; 0x20de <vfprintf+0x27c>
    2094:	93 2d       	mov	r25, r3
    2096:	99 7f       	andi	r25, 0xF9	; 249
    2098:	b9 2e       	mov	r11, r25
    209a:	8f 36       	cpi	r24, 0x6F	; 111
    209c:	c1 f0       	breq	.+48     	; 0x20ce <vfprintf+0x26c>
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <vfprintf+0x244>
    20a0:	88 35       	cpi	r24, 0x58	; 88
    20a2:	79 f0       	breq	.+30     	; 0x20c2 <vfprintf+0x260>
    20a4:	b5 c0       	rjmp	.+362    	; 0x2210 <vfprintf+0x3ae>
    20a6:	80 37       	cpi	r24, 0x70	; 112
    20a8:	19 f0       	breq	.+6      	; 0x20b0 <vfprintf+0x24e>
    20aa:	88 37       	cpi	r24, 0x78	; 120
    20ac:	21 f0       	breq	.+8      	; 0x20b6 <vfprintf+0x254>
    20ae:	b0 c0       	rjmp	.+352    	; 0x2210 <vfprintf+0x3ae>
    20b0:	e9 2f       	mov	r30, r25
    20b2:	e0 61       	ori	r30, 0x10	; 16
    20b4:	be 2e       	mov	r11, r30
    20b6:	b4 fe       	sbrs	r11, 4
    20b8:	0d c0       	rjmp	.+26     	; 0x20d4 <vfprintf+0x272>
    20ba:	fb 2d       	mov	r31, r11
    20bc:	f4 60       	ori	r31, 0x04	; 4
    20be:	bf 2e       	mov	r11, r31
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <vfprintf+0x272>
    20c2:	34 fe       	sbrs	r3, 4
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <vfprintf+0x278>
    20c6:	29 2f       	mov	r18, r25
    20c8:	26 60       	ori	r18, 0x06	; 6
    20ca:	b2 2e       	mov	r11, r18
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <vfprintf+0x278>
    20ce:	28 e0       	ldi	r18, 0x08	; 8
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	05 c0       	rjmp	.+10     	; 0x20de <vfprintf+0x27c>
    20d4:	20 e1       	ldi	r18, 0x10	; 16
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <vfprintf+0x27c>
    20da:	20 e1       	ldi	r18, 0x10	; 16
    20dc:	32 e0       	ldi	r19, 0x02	; 2
    20de:	f8 01       	movw	r30, r16
    20e0:	b7 fe       	sbrs	r11, 7
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <vfprintf+0x290>
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	0c 5f       	subi	r16, 0xFC	; 252
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x29c>
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 5f       	subi	r16, 0xFE	; 254
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	a3 01       	movw	r20, r6
    2100:	0e 94 64 11 	call	0x22c8	; 0x22c8 <__ultoa_invert>
    2104:	88 2e       	mov	r8, r24
    2106:	86 18       	sub	r8, r6
    2108:	fb 2d       	mov	r31, r11
    210a:	ff 77       	andi	r31, 0x7F	; 127
    210c:	3f 2e       	mov	r3, r31
    210e:	36 fe       	sbrs	r3, 6
    2110:	0d c0       	rjmp	.+26     	; 0x212c <vfprintf+0x2ca>
    2112:	23 2d       	mov	r18, r3
    2114:	2e 7f       	andi	r18, 0xFE	; 254
    2116:	a2 2e       	mov	r10, r18
    2118:	89 14       	cp	r8, r9
    211a:	58 f4       	brcc	.+22     	; 0x2132 <vfprintf+0x2d0>
    211c:	34 fe       	sbrs	r3, 4
    211e:	0b c0       	rjmp	.+22     	; 0x2136 <vfprintf+0x2d4>
    2120:	32 fc       	sbrc	r3, 2
    2122:	09 c0       	rjmp	.+18     	; 0x2136 <vfprintf+0x2d4>
    2124:	83 2d       	mov	r24, r3
    2126:	8e 7e       	andi	r24, 0xEE	; 238
    2128:	a8 2e       	mov	r10, r24
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <vfprintf+0x2d4>
    212c:	b8 2c       	mov	r11, r8
    212e:	a3 2c       	mov	r10, r3
    2130:	03 c0       	rjmp	.+6      	; 0x2138 <vfprintf+0x2d6>
    2132:	b8 2c       	mov	r11, r8
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <vfprintf+0x2d6>
    2136:	b9 2c       	mov	r11, r9
    2138:	a4 fe       	sbrs	r10, 4
    213a:	0f c0       	rjmp	.+30     	; 0x215a <vfprintf+0x2f8>
    213c:	fe 01       	movw	r30, r28
    213e:	e8 0d       	add	r30, r8
    2140:	f1 1d       	adc	r31, r1
    2142:	80 81       	ld	r24, Z
    2144:	80 33       	cpi	r24, 0x30	; 48
    2146:	21 f4       	brne	.+8      	; 0x2150 <vfprintf+0x2ee>
    2148:	9a 2d       	mov	r25, r10
    214a:	99 7e       	andi	r25, 0xE9	; 233
    214c:	a9 2e       	mov	r10, r25
    214e:	09 c0       	rjmp	.+18     	; 0x2162 <vfprintf+0x300>
    2150:	a2 fe       	sbrs	r10, 2
    2152:	06 c0       	rjmp	.+12     	; 0x2160 <vfprintf+0x2fe>
    2154:	b3 94       	inc	r11
    2156:	b3 94       	inc	r11
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <vfprintf+0x300>
    215a:	8a 2d       	mov	r24, r10
    215c:	86 78       	andi	r24, 0x86	; 134
    215e:	09 f0       	breq	.+2      	; 0x2162 <vfprintf+0x300>
    2160:	b3 94       	inc	r11
    2162:	a3 fc       	sbrc	r10, 3
    2164:	11 c0       	rjmp	.+34     	; 0x2188 <vfprintf+0x326>
    2166:	a0 fe       	sbrs	r10, 0
    2168:	06 c0       	rjmp	.+12     	; 0x2176 <vfprintf+0x314>
    216a:	b2 14       	cp	r11, r2
    216c:	88 f4       	brcc	.+34     	; 0x2190 <vfprintf+0x32e>
    216e:	28 0c       	add	r2, r8
    2170:	92 2c       	mov	r9, r2
    2172:	9b 18       	sub	r9, r11
    2174:	0e c0       	rjmp	.+28     	; 0x2192 <vfprintf+0x330>
    2176:	b2 14       	cp	r11, r2
    2178:	60 f4       	brcc	.+24     	; 0x2192 <vfprintf+0x330>
    217a:	b6 01       	movw	r22, r12
    217c:	80 e2       	ldi	r24, 0x20	; 32
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    2184:	b3 94       	inc	r11
    2186:	f7 cf       	rjmp	.-18     	; 0x2176 <vfprintf+0x314>
    2188:	b2 14       	cp	r11, r2
    218a:	18 f4       	brcc	.+6      	; 0x2192 <vfprintf+0x330>
    218c:	2b 18       	sub	r2, r11
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x332>
    2190:	98 2c       	mov	r9, r8
    2192:	21 2c       	mov	r2, r1
    2194:	a4 fe       	sbrs	r10, 4
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <vfprintf+0x356>
    2198:	b6 01       	movw	r22, r12
    219a:	80 e3       	ldi	r24, 0x30	; 48
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    21a2:	a2 fe       	sbrs	r10, 2
    21a4:	17 c0       	rjmp	.+46     	; 0x21d4 <vfprintf+0x372>
    21a6:	a1 fc       	sbrc	r10, 1
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <vfprintf+0x34e>
    21aa:	88 e7       	ldi	r24, 0x78	; 120
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <vfprintf+0x352>
    21b0:	88 e5       	ldi	r24, 0x58	; 88
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	b6 01       	movw	r22, r12
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <vfprintf+0x36e>
    21b8:	8a 2d       	mov	r24, r10
    21ba:	86 78       	andi	r24, 0x86	; 134
    21bc:	59 f0       	breq	.+22     	; 0x21d4 <vfprintf+0x372>
    21be:	a1 fe       	sbrs	r10, 1
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <vfprintf+0x364>
    21c2:	8b e2       	ldi	r24, 0x2B	; 43
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <vfprintf+0x366>
    21c6:	80 e2       	ldi	r24, 0x20	; 32
    21c8:	a7 fc       	sbrc	r10, 7
    21ca:	8d e2       	ldi	r24, 0x2D	; 45
    21cc:	b6 01       	movw	r22, r12
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    21d4:	89 14       	cp	r8, r9
    21d6:	38 f4       	brcc	.+14     	; 0x21e6 <vfprintf+0x384>
    21d8:	b6 01       	movw	r22, r12
    21da:	80 e3       	ldi	r24, 0x30	; 48
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    21e2:	9a 94       	dec	r9
    21e4:	f7 cf       	rjmp	.-18     	; 0x21d4 <vfprintf+0x372>
    21e6:	8a 94       	dec	r8
    21e8:	f3 01       	movw	r30, r6
    21ea:	e8 0d       	add	r30, r8
    21ec:	f1 1d       	adc	r31, r1
    21ee:	80 81       	ld	r24, Z
    21f0:	b6 01       	movw	r22, r12
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    21f8:	81 10       	cpse	r8, r1
    21fa:	f5 cf       	rjmp	.-22     	; 0x21e6 <vfprintf+0x384>
    21fc:	22 20       	and	r2, r2
    21fe:	09 f4       	brne	.+2      	; 0x2202 <vfprintf+0x3a0>
    2200:	42 ce       	rjmp	.-892    	; 0x1e86 <vfprintf+0x24>
    2202:	b6 01       	movw	r22, r12
    2204:	80 e2       	ldi	r24, 0x20	; 32
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 28 11 	call	0x2250	; 0x2250 <fputc>
    220c:	2a 94       	dec	r2
    220e:	f6 cf       	rjmp	.-20     	; 0x21fc <vfprintf+0x39a>
    2210:	f6 01       	movw	r30, r12
    2212:	86 81       	ldd	r24, Z+6	; 0x06
    2214:	97 81       	ldd	r25, Z+7	; 0x07
    2216:	02 c0       	rjmp	.+4      	; 0x221c <vfprintf+0x3ba>
    2218:	8f ef       	ldi	r24, 0xFF	; 255
    221a:	9f ef       	ldi	r25, 0xFF	; 255
    221c:	2b 96       	adiw	r28, 0x0b	; 11
    221e:	e2 e1       	ldi	r30, 0x12	; 18
    2220:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__epilogue_restores__>

00002224 <strnlen_P>:
    2224:	fc 01       	movw	r30, r24
    2226:	05 90       	lpm	r0, Z+
    2228:	61 50       	subi	r22, 0x01	; 1
    222a:	70 40       	sbci	r23, 0x00	; 0
    222c:	01 10       	cpse	r0, r1
    222e:	d8 f7       	brcc	.-10     	; 0x2226 <strnlen_P+0x2>
    2230:	80 95       	com	r24
    2232:	90 95       	com	r25
    2234:	8e 0f       	add	r24, r30
    2236:	9f 1f       	adc	r25, r31
    2238:	08 95       	ret

0000223a <strnlen>:
    223a:	fc 01       	movw	r30, r24
    223c:	61 50       	subi	r22, 0x01	; 1
    223e:	70 40       	sbci	r23, 0x00	; 0
    2240:	01 90       	ld	r0, Z+
    2242:	01 10       	cpse	r0, r1
    2244:	d8 f7       	brcc	.-10     	; 0x223c <strnlen+0x2>
    2246:	80 95       	com	r24
    2248:	90 95       	com	r25
    224a:	8e 0f       	add	r24, r30
    224c:	9f 1f       	adc	r25, r31
    224e:	08 95       	ret

00002250 <fputc>:
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	fb 01       	movw	r30, r22
    225a:	23 81       	ldd	r18, Z+3	; 0x03
    225c:	21 fd       	sbrc	r18, 1
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <fputc+0x16>
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	9f ef       	ldi	r25, 0xFF	; 255
    2264:	2c c0       	rjmp	.+88     	; 0x22be <fputc+0x6e>
    2266:	22 ff       	sbrs	r18, 2
    2268:	16 c0       	rjmp	.+44     	; 0x2296 <fputc+0x46>
    226a:	46 81       	ldd	r20, Z+6	; 0x06
    226c:	57 81       	ldd	r21, Z+7	; 0x07
    226e:	24 81       	ldd	r18, Z+4	; 0x04
    2270:	35 81       	ldd	r19, Z+5	; 0x05
    2272:	42 17       	cp	r20, r18
    2274:	53 07       	cpc	r21, r19
    2276:	44 f4       	brge	.+16     	; 0x2288 <fputc+0x38>
    2278:	a0 81       	ld	r26, Z
    227a:	b1 81       	ldd	r27, Z+1	; 0x01
    227c:	9d 01       	movw	r18, r26
    227e:	2f 5f       	subi	r18, 0xFF	; 255
    2280:	3f 4f       	sbci	r19, 0xFF	; 255
    2282:	31 83       	std	Z+1, r19	; 0x01
    2284:	20 83       	st	Z, r18
    2286:	8c 93       	st	X, r24
    2288:	26 81       	ldd	r18, Z+6	; 0x06
    228a:	37 81       	ldd	r19, Z+7	; 0x07
    228c:	2f 5f       	subi	r18, 0xFF	; 255
    228e:	3f 4f       	sbci	r19, 0xFF	; 255
    2290:	37 83       	std	Z+7, r19	; 0x07
    2292:	26 83       	std	Z+6, r18	; 0x06
    2294:	14 c0       	rjmp	.+40     	; 0x22be <fputc+0x6e>
    2296:	8b 01       	movw	r16, r22
    2298:	ec 01       	movw	r28, r24
    229a:	fb 01       	movw	r30, r22
    229c:	00 84       	ldd	r0, Z+8	; 0x08
    229e:	f1 85       	ldd	r31, Z+9	; 0x09
    22a0:	e0 2d       	mov	r30, r0
    22a2:	09 95       	icall
    22a4:	89 2b       	or	r24, r25
    22a6:	e1 f6       	brne	.-72     	; 0x2260 <fputc+0x10>
    22a8:	d8 01       	movw	r26, r16
    22aa:	16 96       	adiw	r26, 0x06	; 6
    22ac:	8d 91       	ld	r24, X+
    22ae:	9c 91       	ld	r25, X
    22b0:	17 97       	sbiw	r26, 0x07	; 7
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	17 96       	adiw	r26, 0x07	; 7
    22b6:	9c 93       	st	X, r25
    22b8:	8e 93       	st	-X, r24
    22ba:	16 97       	sbiw	r26, 0x06	; 6
    22bc:	ce 01       	movw	r24, r28
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	08 95       	ret

000022c8 <__ultoa_invert>:
    22c8:	fa 01       	movw	r30, r20
    22ca:	aa 27       	eor	r26, r26
    22cc:	28 30       	cpi	r18, 0x08	; 8
    22ce:	51 f1       	breq	.+84     	; 0x2324 <__ultoa_invert+0x5c>
    22d0:	20 31       	cpi	r18, 0x10	; 16
    22d2:	81 f1       	breq	.+96     	; 0x2334 <__ultoa_invert+0x6c>
    22d4:	e8 94       	clt
    22d6:	6f 93       	push	r22
    22d8:	6e 7f       	andi	r22, 0xFE	; 254
    22da:	6e 5f       	subi	r22, 0xFE	; 254
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8f 4f       	sbci	r24, 0xFF	; 255
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	af 4f       	sbci	r26, 0xFF	; 255
    22e4:	b1 e0       	ldi	r27, 0x01	; 1
    22e6:	3e d0       	rcall	.+124    	; 0x2364 <__ultoa_invert+0x9c>
    22e8:	b4 e0       	ldi	r27, 0x04	; 4
    22ea:	3c d0       	rcall	.+120    	; 0x2364 <__ultoa_invert+0x9c>
    22ec:	67 0f       	add	r22, r23
    22ee:	78 1f       	adc	r23, r24
    22f0:	89 1f       	adc	r24, r25
    22f2:	9a 1f       	adc	r25, r26
    22f4:	a1 1d       	adc	r26, r1
    22f6:	68 0f       	add	r22, r24
    22f8:	79 1f       	adc	r23, r25
    22fa:	8a 1f       	adc	r24, r26
    22fc:	91 1d       	adc	r25, r1
    22fe:	a1 1d       	adc	r26, r1
    2300:	6a 0f       	add	r22, r26
    2302:	71 1d       	adc	r23, r1
    2304:	81 1d       	adc	r24, r1
    2306:	91 1d       	adc	r25, r1
    2308:	a1 1d       	adc	r26, r1
    230a:	20 d0       	rcall	.+64     	; 0x234c <__ultoa_invert+0x84>
    230c:	09 f4       	brne	.+2      	; 0x2310 <__ultoa_invert+0x48>
    230e:	68 94       	set
    2310:	3f 91       	pop	r19
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	26 9f       	mul	r18, r22
    2316:	11 24       	eor	r1, r1
    2318:	30 19       	sub	r19, r0
    231a:	30 5d       	subi	r19, 0xD0	; 208
    231c:	31 93       	st	Z+, r19
    231e:	de f6       	brtc	.-74     	; 0x22d6 <__ultoa_invert+0xe>
    2320:	cf 01       	movw	r24, r30
    2322:	08 95       	ret
    2324:	46 2f       	mov	r20, r22
    2326:	47 70       	andi	r20, 0x07	; 7
    2328:	40 5d       	subi	r20, 0xD0	; 208
    232a:	41 93       	st	Z+, r20
    232c:	b3 e0       	ldi	r27, 0x03	; 3
    232e:	0f d0       	rcall	.+30     	; 0x234e <__ultoa_invert+0x86>
    2330:	c9 f7       	brne	.-14     	; 0x2324 <__ultoa_invert+0x5c>
    2332:	f6 cf       	rjmp	.-20     	; 0x2320 <__ultoa_invert+0x58>
    2334:	46 2f       	mov	r20, r22
    2336:	4f 70       	andi	r20, 0x0F	; 15
    2338:	40 5d       	subi	r20, 0xD0	; 208
    233a:	4a 33       	cpi	r20, 0x3A	; 58
    233c:	18 f0       	brcs	.+6      	; 0x2344 <__ultoa_invert+0x7c>
    233e:	49 5d       	subi	r20, 0xD9	; 217
    2340:	31 fd       	sbrc	r19, 1
    2342:	40 52       	subi	r20, 0x20	; 32
    2344:	41 93       	st	Z+, r20
    2346:	02 d0       	rcall	.+4      	; 0x234c <__ultoa_invert+0x84>
    2348:	a9 f7       	brne	.-22     	; 0x2334 <__ultoa_invert+0x6c>
    234a:	ea cf       	rjmp	.-44     	; 0x2320 <__ultoa_invert+0x58>
    234c:	b4 e0       	ldi	r27, 0x04	; 4
    234e:	a6 95       	lsr	r26
    2350:	97 95       	ror	r25
    2352:	87 95       	ror	r24
    2354:	77 95       	ror	r23
    2356:	67 95       	ror	r22
    2358:	ba 95       	dec	r27
    235a:	c9 f7       	brne	.-14     	; 0x234e <__ultoa_invert+0x86>
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	61 05       	cpc	r22, r1
    2360:	71 05       	cpc	r23, r1
    2362:	08 95       	ret
    2364:	9b 01       	movw	r18, r22
    2366:	ac 01       	movw	r20, r24
    2368:	0a 2e       	mov	r0, r26
    236a:	06 94       	lsr	r0
    236c:	57 95       	ror	r21
    236e:	47 95       	ror	r20
    2370:	37 95       	ror	r19
    2372:	27 95       	ror	r18
    2374:	ba 95       	dec	r27
    2376:	c9 f7       	brne	.-14     	; 0x236a <__ultoa_invert+0xa2>
    2378:	62 0f       	add	r22, r18
    237a:	73 1f       	adc	r23, r19
    237c:	84 1f       	adc	r24, r20
    237e:	95 1f       	adc	r25, r21
    2380:	a0 1d       	adc	r26, r0
    2382:	08 95       	ret

00002384 <__muluhisi3>:
    2384:	0e 94 0c 12 	call	0x2418	; 0x2418 <__umulhisi3>
    2388:	a5 9f       	mul	r26, r21
    238a:	90 0d       	add	r25, r0
    238c:	b4 9f       	mul	r27, r20
    238e:	90 0d       	add	r25, r0
    2390:	a4 9f       	mul	r26, r20
    2392:	80 0d       	add	r24, r0
    2394:	91 1d       	adc	r25, r1
    2396:	11 24       	eor	r1, r1
    2398:	08 95       	ret

0000239a <__mulshisi3>:
    239a:	b7 ff       	sbrs	r27, 7
    239c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__muluhisi3>

000023a0 <__mulohisi3>:
    23a0:	0e 94 c2 11 	call	0x2384	; 0x2384 <__muluhisi3>
    23a4:	82 1b       	sub	r24, r18
    23a6:	93 0b       	sbc	r25, r19
    23a8:	08 95       	ret

000023aa <__prologue_saves__>:
    23aa:	2f 92       	push	r2
    23ac:	3f 92       	push	r3
    23ae:	4f 92       	push	r4
    23b0:	5f 92       	push	r5
    23b2:	6f 92       	push	r6
    23b4:	7f 92       	push	r7
    23b6:	8f 92       	push	r8
    23b8:	9f 92       	push	r9
    23ba:	af 92       	push	r10
    23bc:	bf 92       	push	r11
    23be:	cf 92       	push	r12
    23c0:	df 92       	push	r13
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	ca 1b       	sub	r28, r26
    23d4:	db 0b       	sbc	r29, r27
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	09 94       	ijmp

000023e2 <__epilogue_restores__>:
    23e2:	2a 88       	ldd	r2, Y+18	; 0x12
    23e4:	39 88       	ldd	r3, Y+17	; 0x11
    23e6:	48 88       	ldd	r4, Y+16	; 0x10
    23e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    23ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    23f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    23f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    23f4:	b9 84       	ldd	r11, Y+9	; 0x09
    23f6:	c8 84       	ldd	r12, Y+8	; 0x08
    23f8:	df 80       	ldd	r13, Y+7	; 0x07
    23fa:	ee 80       	ldd	r14, Y+6	; 0x06
    23fc:	fd 80       	ldd	r15, Y+5	; 0x05
    23fe:	0c 81       	ldd	r16, Y+4	; 0x04
    2400:	1b 81       	ldd	r17, Y+3	; 0x03
    2402:	aa 81       	ldd	r26, Y+2	; 0x02
    2404:	b9 81       	ldd	r27, Y+1	; 0x01
    2406:	ce 0f       	add	r28, r30
    2408:	d1 1d       	adc	r29, r1
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	ed 01       	movw	r28, r26
    2416:	08 95       	ret

00002418 <__umulhisi3>:
    2418:	a2 9f       	mul	r26, r18
    241a:	b0 01       	movw	r22, r0
    241c:	b3 9f       	mul	r27, r19
    241e:	c0 01       	movw	r24, r0
    2420:	a3 9f       	mul	r26, r19
    2422:	70 0d       	add	r23, r0
    2424:	81 1d       	adc	r24, r1
    2426:	11 24       	eor	r1, r1
    2428:	91 1d       	adc	r25, r1
    242a:	b2 9f       	mul	r27, r18
    242c:	70 0d       	add	r23, r0
    242e:	81 1d       	adc	r24, r1
    2430:	11 24       	eor	r1, r1
    2432:	91 1d       	adc	r25, r1
    2434:	08 95       	ret

00002436 <_exit>:
    2436:	f8 94       	cli

00002438 <__stop_program>:
    2438:	ff cf       	rjmp	.-2      	; 0x2438 <__stop_program>
